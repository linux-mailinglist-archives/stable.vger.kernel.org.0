Return-Path: <stable-owner@vger.kernel.org>
X-Original-To: lists+stable@lfdr.de
Delivered-To: lists+stable@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 9F582277CAC
	for <lists+stable@lfdr.de>; Fri, 25 Sep 2020 02:05:16 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726935AbgIYAE6 (ORCPT <rfc822;lists+stable@lfdr.de>);
        Thu, 24 Sep 2020 20:04:58 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33644 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726931AbgIYAE6 (ORCPT
        <rfc822;stable@vger.kernel.org>); Thu, 24 Sep 2020 20:04:58 -0400
Received: from mail-pf1-x430.google.com (mail-pf1-x430.google.com [IPv6:2607:f8b0:4864:20::430])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id DEC1DC0613CE
        for <stable@vger.kernel.org>; Thu, 24 Sep 2020 17:04:57 -0700 (PDT)
Received: by mail-pf1-x430.google.com with SMTP id x22so1290858pfo.12
        for <stable@vger.kernel.org>; Thu, 24 Sep 2020 17:04:57 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=google.com; s=20161025;
        h=mime-version:from:date:message-id:subject:to:cc;
        bh=pE4zuRPiGtG0M5CqysditJg4AQ8HytN0X9m8DtcXHP8=;
        b=mAVyk4Qt6ejJJS17Ac2SXo0ARyCOqR6SMq7bC3Sv79kR+yHYMzfBtlwlUqp1RrKy/N
         jDSIO3lMrWOM1rbPHykFBqdt+YSstf9mLrYLdSyy6QKL+2zvfiAp+GYW5TND8l+wrLcW
         Sl5kI2Qmky4QOqRODEV25D5GOpe6sqZ3NMvsxDbjITvYmXVFGBWJIOpvA2ZCcwC15G6T
         /Bd8Rx900/2EC3CHEGNpzuRp6s2wBHt79p4szG07smc+RPo9aGacFdurj8l9x73k7Sxz
         TUQCnclZEOoHbk+5pXvz1qBcomJqZDj9Hmxpn0aylheHiumAHvQeB2FqQBLAkbtYNZhP
         WOhQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:from:date:message-id:subject:to:cc;
        bh=pE4zuRPiGtG0M5CqysditJg4AQ8HytN0X9m8DtcXHP8=;
        b=c1/qGmUnsfqtcgyfw/fbc44fJP6ndLyWWUIvexL3WrjAxyI2GdZWA3hn0KDpUmuI7Z
         AfwxtTr5MgQ9N7Fevr4s1pgs9s6e/MLTgC3S7PivGHkGqgxSt3M4wFCGdpFFZVwtkk8K
         nMwCRibZS3TPKTQ5s4fhwYNu+TWSY1ZZD/M8bMRdxMJv9lk21wrBwGNS6vOTux9B53R1
         rV15mQKzUI3obijge7pDY+CtfZu5lpifxxnJb0GvFIxJvy5AjUutGEsyMrEzFfNT0lvb
         hHRbsB7zWYOXN21zFnUCCarwvEfCqqBRNEez2WLBeMIQZH9mkkdRB+6zWlbqil9rUQao
         6MMA==
X-Gm-Message-State: AOAM533Dgi0s25epaUbVQeBpz03mHLFJ42g1FZpF5AKjckhvH3PrWHAV
        kdJfdBstne53M/zWipG/oMJFFqVK1Y4OZ0z+RYFKZQ==
X-Google-Smtp-Source: ABdhPJwB38xGPE5Yryt+/Z4JlGuI6b+lNk0vZDnmE8q3/6qZH118Q9PwnV3pVroj9pZKuCm20nehu1QJNJtvNgbrJb4=
X-Received: by 2002:a62:d44e:0:b029:13c:1611:652f with SMTP id
 u14-20020a62d44e0000b029013c1611652fmr1485834pfl.15.1600992296508; Thu, 24
 Sep 2020 17:04:56 -0700 (PDT)
MIME-Version: 1.0
From:   Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu, 24 Sep 2020 17:04:45 -0700
Message-ID: <CAKwvOdkHBGXSXiX-Sgc0D9PiG7eCUyGPE2kAuGJ=NO-CCASp2A@mail.gmail.com>
Subject: LLVM=1 patches for 4.19
To:     Greg KH <gregkh@linuxfoundation.org>,
        Sasha Levin <sashal@kernel.org>
Cc:     Masahiro Yamada <masahiroy@kernel.org>,
        "# 3.4.x" <stable@vger.kernel.org>,
        clang-built-linux <clang-built-linux@googlegroups.com>,
        Nathan Chancellor <natechancellor@gmail.com>
Content-Type: multipart/mixed; boundary="0000000000001fadbd05b01811d2"
Precedence: bulk
List-ID: <stable.vger.kernel.org>
X-Mailing-List: stable@vger.kernel.org

--0000000000001fadbd05b01811d2
Content-Type: text/plain; charset="UTF-8"

Dear stable kernel maintainers,
Please consider the attached mbox file, which contains 10 patches which
cherry pick cleanly onto 4.19.y:
1. commit 8708e13c6a06 ("MAINTAINERS: add CLANG/LLVM BUILD SUPPORT info")
2. commit 7bac98707f65 ("kbuild: add OBJSIZE variable for the size tool")
3. commit fcf1b6a35c ("Documentation/llvm: add documentation on
building w/ Clang/LLVM")
4. commit 0f44fbc162b7 ("Documentation/llvm: fix the name of llvm-size")
5. commit 63b903dfebde ("net: wan: wanxl: use allow to pass
CROSS_COMPILE_M68k for rebuilding firmware")
6. commit 734f3719d343 ("net: wan: wanxl: use $(M68KCC) instead of
$(M68KAS) for rebuilding firmware")
7. commit eefb8c124fd9 ("x86/boot: kbuild: allow readelf executable to
be specified")
8. commit aa824e0c962b ("kbuild: remove AS variable")
9. commit 7e20e47c70f8 ("kbuild: replace AS=clang with LLVM_IAS=1")
10. commit a0d1c951ef08 ("kbuild: support LLVM=1 to switch the default
tools to Clang/LLVM")

The series is analogous to the previous accepted series sent for 5.4,
though this series is for 4.19.y:
https://lore.kernel.org/stable/CAKwvOd=Ko_UHWF-bYotqjPVw=chW_KMUFuBp_o8uOg0wOyHyWA@mail.gmail.com/T/#u

I don't plan to backport the series any further than 4.19.

This series improves/simplifies building kernels with Clang and LLVM
utilities; it will help the various CI systems testing kernels built
with Clang+LLVM utilities, and
we will make immediate use of it in Android (see also:
https://android-review.googlesource.com/c/platform/prebuilts/clang/host/linux-x86/+/1405387).
We can always carry it out of tree in Android, but I think the series
is fairly tame, and would prefer not to.

Some differences in this series from the one sent for 5.4:
additional backports:
1. commit 8708e13c6a06 ("MAINTAINERS: add CLANG/LLVM BUILD SUPPORT info")
2. commit 7bac98707f65 ("kbuild: add OBJSIZE variable for the size tool")

which landed in v5.2-rc7 and v5.3-rc4 respectively. It also drops the
5.4 backport of
1. commit e9781b52d4e0 ("kbuild: add PYTHON2 and PYTHON3 variables")

which was not necessary, as it was backported to 5.4 to resolve merge
conflicts which occurred anyways in this series due to not backporting
to 4.19 the following commits which caused minor conflicts:
1. commit e83b9f55448a ("kbuild: add ability to generate BTF type info
for vmlinux")
2. commit cd238effefa2 ("docs: kbuild: convert docs to ReST and rename
to *.rst")

Put another way, because I avoided backporting e83b9f55448a and
cd238effefa2, most of the patches needed to be slightly modified in
small ways (noted in each commit message), such that there was no
point in backporting e9781b52d4e0.
-- 
Thanks,
~Nick Desaulniers

--0000000000001fadbd05b01811d2
Content-Type: application/octet-stream; name="llvm_1.4.19.mbox"
Content-Disposition: attachment; filename="llvm_1.4.19.mbox"
Content-Transfer-Encoding: base64
Content-ID: <f_kfhhb5o60>
X-Attachment-Id: f_kfhhb5o60

RnJvbSBkMzA3MWZiNDA3MjQ1M2RiMDZiZjAwMzg3M2JkZjI2YzQ1YWFlMzNlIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmllcnNAZ29vZ2xl
LmNvbT4KRGF0ZTogRnJpLCAyOCBKdW4gMjAxOSAxMjowNzoxMiAtMDcwMApTdWJqZWN0OiBbUEFU
Q0ggMDEvMTBdIE1BSU5UQUlORVJTOiBhZGQgQ0xBTkcvTExWTSBCVUlMRCBTVVBQT1JUIGluZm8K
CmNvbW1pdCA4NzA4ZTEzYzZhMDYwMDYyNWVlYTNhZWJkMDI3YzA3MTVhNWQyYmIyIHVwc3RyZWFt
LgoKQWRkIGtleXdvcmQgc3VwcG9ydCBzbyB0aGF0IG91ciBtYWlsaW5nIGxpc3QgZ2V0cyBjYydl
ZCBmb3IgY2xhbmcvbGx2bQpwYXRjaGVzLiAgV2UncmUgcHJldHR5IGFjdGl2ZSBvbiBvdXIgbWFp
bGluZyBsaXN0IHNvIGZhciBhcyBjb2RlIHJldmlldy4KVGhlcmUgYXJlIG51bWVyb3VzIEdvb2ds
ZXJzIGxpa2UgbXlzZWxmIHRoYXQgYXJlIHBhaWQgdG8gc3VwcG9ydApidWlsZGluZyB0aGUgTGlu
dXgga2VybmVsIHdpdGggQ2xhbmcgYW5kIExMVk0uCgpMaW5rOiBodHRwOi8vbGttbC5rZXJuZWwu
b3JnL3IvMjAxOTA2MjAwMDE5MDcuMjU1ODAzLTEtbmRlc2F1bG5pZXJzQGdvb2dsZS5jb20KU2ln
bmVkLW9mZi1ieTogTmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5pZXJzQGdvb2dsZS5jb20+ClJl
dmlld2VkLWJ5OiBOYXRoYW4gQ2hhbmNlbGxvciA8bmF0ZWNoYW5jZWxsb3JAZ21haWwuY29tPgpD
YzogSm9lIFBlcmNoZXMgPGpvZUBwZXJjaGVzLmNvbT4KU2lnbmVkLW9mZi1ieTogQW5kcmV3IE1v
cnRvbiA8YWtwbUBsaW51eC1mb3VuZGF0aW9uLm9yZz4KU2lnbmVkLW9mZi1ieTogTGludXMgVG9y
dmFsZHMgPHRvcnZhbGRzQGxpbnV4LWZvdW5kYXRpb24ub3JnPgotLS0KIE1BSU5UQUlORVJTIHwg
OCArKysrKysrKwogMSBmaWxlIGNoYW5nZWQsIDggaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBh
L01BSU5UQUlORVJTIGIvTUFJTlRBSU5FUlMKaW5kZXggYjlmOWRhMGI4ODZmLi45Mzg4NTY0Yjdh
YjUgMTAwNjQ0Ci0tLSBhL01BSU5UQUlORVJTCisrKyBiL01BSU5UQUlORVJTCkBAIC0zNjEzLDYg
KzM2MTMsMTQgQEAgTToJTWlndWVsIE9qZWRhIDxtaWd1ZWwub2plZGEuc2FuZG9uaXNAZ21haWwu
Y29tPgogUzoJTWFpbnRhaW5lZAogRjoJLmNsYW5nLWZvcm1hdAogCitDTEFORy9MTFZNIEJVSUxE
IFNVUFBPUlQKK0w6CWNsYW5nLWJ1aWx0LWxpbnV4QGdvb2dsZWdyb3Vwcy5jb20KK1c6CWh0dHBz
Oi8vY2xhbmdidWlsdGxpbnV4LmdpdGh1Yi5pby8KK0I6CWh0dHBzOi8vZ2l0aHViLmNvbS9DbGFu
Z0J1aWx0TGludXgvbGludXgvaXNzdWVzCitDOglpcmM6Ly9jaGF0LmZyZWVub2RlLm5ldC9jbGFu
Z2J1aWx0bGludXgKK1M6CVN1cHBvcnRlZAorSzoJXGIoP2k6Y2xhbmd8bGx2bSlcYgorCiBDTEVB
TkNBQ0hFIEFQSQogTToJS29ucmFkIFJ6ZXN6dXRlayBXaWxrIDxrb25yYWQud2lsa0BvcmFjbGUu
Y29tPgogTDoJbGludXgta2VybmVsQHZnZXIua2VybmVsLm9yZwotLSAKMi4yOC4wLjY4MS5nNmY3
N2Y2NWI0ZS1nb29nCgoKRnJvbSA1MTUxYWI1NzVlMmMwZGE4Zjc4OTEwNTI5Y2NkMmNhNWMxNGJl
N2U2IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBWYXNpbHkgR29yYmlrIDxnb3JAbGlu
dXguaWJtLmNvbT4KRGF0ZTogTW9uLCAyMSBKYW4gMjAxOSAxMzo1NDozOSArMDEwMApTdWJqZWN0
OiBbUEFUQ0ggMDIvMTBdIGtidWlsZDogYWRkIE9CSlNJWkUgdmFyaWFibGUgZm9yIHRoZSBzaXpl
IHRvb2wKCmNvbW1pdCA3YmFjOTg3MDdmNjViOTNiZjk5NGVmNGU5OWIxZWI5ZTdkYmI5YzMyIHVw
c3RyZWFtLgoKRGVmaW5lIGFuZCBleHBvcnQgT0JKU0laRSB2YXJpYWJsZSBmb3IgInNpemUiIHRv
b2wgZnJvbSBiaW51dGlscyB0byBiZQp1c2VkIGluIGFyY2hpdGVjdHVyZSBzcGVjaWZpYyBNYWtl
ZmlsZXMgKG5hbWluZyB0aGUgdmFyaWFibGUganVzdCAiU0laRSIKd291bGQgYmUgdG9vIHJpc2t5
KS4gSW4gcGFydGljdWxhciB0aGlzIHRvb2wgaXMgdXNlZnVsIHRvIHBlcmZvcm0gY2hlY2tzCnRo
YXQgZWFybHkgYm9vdCBjb2RlIGlzIG5vdCB1c2luZyBic3Mgc2VjdGlvbiAod2hpY2ggbWlnaHQg
aGF2ZSBub3QgYmVlbgp6ZXJvZWQgeWV0IG9yIGludGVyc2VjdHMgd2l0aCBpbml0cmQgb3Igb3Ro
ZXIgZmlsZXMgYm9vdCBsb2FkZXIgbWlnaHQKaGF2ZSBwdXQgcmlnaHQgYWZ0ZXIgdGhlIGxpbnV4
IGtlcm5lbCkuCgpMaW5rOiBodHRwOi8vbGttbC5rZXJuZWwub3JnL3IvcGF0Y2gtMS50aHJlYWQt
MjI1N2ExLmdpdC0xODhmNWEzZDgxZDUueW91ci1hZC1oZXJlLmNhbGwtMDE1NjUwODg3NTUtZXh0
LTUxMjBAd29yay5ob3VycwpBY2tlZC1ieTogTWFzYWhpcm8gWWFtYWRhIDx5YW1hZGEubWFzYWhp
cm9Ac29jaW9uZXh0LmNvbT4KU2lnbmVkLW9mZi1ieTogVmFzaWx5IEdvcmJpayA8Z29yQGxpbnV4
LmlibS5jb20+CltuZDogY29uZmxpY3QgaW4gZXhwb3J0ZWQgdmFycyBsaXN0IGZyb20gbm90IGJh
Y2twb3J0aW5nIGNvbW1pdAogZTgzYjlmNTU0NDhhICgia2J1aWxkOiBhZGQgYWJpbGl0eSB0byBn
ZW5lcmF0ZSBCVEYgdHlwZSBpbmZvIGZvciB2bWxpbnV4IildCi0tLQogTWFrZWZpbGUgfCAzICsr
LQogMSBmaWxlIGNoYW5nZWQsIDIgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAt
LWdpdCBhL01ha2VmaWxlIGIvTWFrZWZpbGUKaW5kZXggYWFlYjNmM2RiY2VhLi45Yjc1ODU0OWM3
Y2UgMTAwNjQ0Ci0tLSBhL01ha2VmaWxlCisrKyBiL01ha2VmaWxlCkBAIC0zNzcsNiArMzc3LDcg
QEAgTk0JCT0gJChDUk9TU19DT01QSUxFKW5tCiBTVFJJUAkJPSAkKENST1NTX0NPTVBJTEUpc3Ry
aXAKIE9CSkNPUFkJCT0gJChDUk9TU19DT01QSUxFKW9iamNvcHkKIE9CSkRVTVAJCT0gJChDUk9T
U19DT01QSUxFKW9iamR1bXAKK09CSlNJWkUJCT0gJChDUk9TU19DT01QSUxFKXNpemUKIExFWAkJ
PSBmbGV4CiBZQUNDCQk9IGJpc29uCiBBV0sJCT0gYXdrCkBAIC00MzMsNyArNDM0LDcgQEAgR0ND
X1BMVUdJTlNfQ0ZMQUdTIDo9CiBDTEFOR19GTEFHUyA6PQogCiBleHBvcnQgQVJDSCBTUkNBUkNI
IENPTkZJR19TSEVMTCBIT1NUQ0MgS0JVSUxEX0hPU1RDRkxBR1MgQ1JPU1NfQ09NUElMRSBBUyBM
RCBDQwotZXhwb3J0IENQUCBBUiBOTSBTVFJJUCBPQkpDT1BZIE9CSkRVTVAgS0JVSUxEX0hPU1RM
REZMQUdTIEtCVUlMRF9IT1NUTERMSUJTCitleHBvcnQgQ1BQIEFSIE5NIFNUUklQIE9CSkNPUFkg
T0JKRFVNUCBPQkpTSVpFIEtCVUlMRF9IT1NUTERGTEFHUyBLQlVJTERfSE9TVExETElCUwogZXhw
b3J0IE1BS0UgTEVYIFlBQ0MgQVdLIEdFTktTWU1TIElOU1RBTExLRVJORUwgUEVSTCBQWVRIT04g
UFlUSE9OMiBQWVRIT04zIFVUU19NQUNISU5FCiBleHBvcnQgSE9TVENYWCBLQlVJTERfSE9TVENY
WEZMQUdTIExERkxBR1NfTU9EVUxFIENIRUNLIENIRUNLRkxBR1MKIAotLSAKMi4yOC4wLjY4MS5n
NmY3N2Y2NWI0ZS1nb29nCgoKRnJvbSBmMzRlNDE2YjAyMmZkNTU4MGFiYWY1NjgzMDAyMzZmNDQx
MjFjYThlIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBOaWNrIERlc2F1bG5pZXJzIDxu
ZGVzYXVsbmllcnNAZ29vZ2xlLmNvbT4KRGF0ZTogV2VkLCAyNiBGZWIgMjAyMCAxNToyMzozNiAt
MDgwMApTdWJqZWN0OiBbUEFUQ0ggMDMvMTBdIERvY3VtZW50YXRpb24vbGx2bTogYWRkIGRvY3Vt
ZW50YXRpb24gb24gYnVpbGRpbmcgdy8KIENsYW5nL0xMVk0KCmNvbW1pdCBmY2YxYjZhMzVjMTZh
YzUwMGZhOTA4YTQwMjIyMzhlNWQ2NjZlYWJmIHVwc3RyZWFtLgoKYWRkZWQgdG8ga2J1aWxkIGRv
Y3VtZW50YXRpb24uIFByb3ZpZGVzIG1vcmUgb2ZmaWNpYWwgaW5mbyBvbiBidWlsZGluZwprZXJu
ZWxzIHdpdGggQ2xhbmcgYW5kIExMVk0gdGhhbiBvdXIgd2lraS4KClN1Z2dlc3RlZC1ieTogS2Vl
cyBDb29rIDxrZWVzY29va0BjaHJvbWl1bS5vcmc+ClJldmlld2VkLWJ5OiBLZWVzIENvb2sgPGtl
ZXNjb29rQGNocm9taXVtLm9yZz4KUmV2aWV3ZWQtYnk6IE5hdGhhbiBDaGFuY2VsbG9yIDxuYXRl
Y2hhbmNlbGxvckBnbWFpbC5jb20+ClJldmlld2VkLWJ5OiBTZWRhdCBEaWxlayA8c2VkYXQuZGls
ZWtAZ21haWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmll
cnNAZ29vZ2xlLmNvbT4KU2lnbmVkLW9mZi1ieTogTWFzYWhpcm8gWWFtYWRhIDxtYXNhaGlyb3lA
a2VybmVsLm9yZz4KW25kOiBodW5rIGFnYWluc3QgRG9jdW1lbnRhdGlvbi9rYnVpbGQvaW5kZXgu
cnN0IGRyb3BwZWQgZHVlIHRvIG5vdCBiYWNrcG9ydGluZwogY29tbWl0IGNkMjM4ZWZmZWZhMiAo
ImRvY3M6IGtidWlsZDogY29udmVydCBkb2NzIHRvIFJlU1QgYW5kIHJlbmFtZSB0byAqLnJzdCIp
XQotLS0KIERvY3VtZW50YXRpb24va2J1aWxkL2xsdm0ucnN0IHwgODAgKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysKIE1BSU5UQUlORVJTICAgICAgICAgICAgICAgICAgIHwgIDEg
KwogMiBmaWxlcyBjaGFuZ2VkLCA4MSBpbnNlcnRpb25zKCspCiBjcmVhdGUgbW9kZSAxMDA2NDQg
RG9jdW1lbnRhdGlvbi9rYnVpbGQvbGx2bS5yc3QKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9u
L2tidWlsZC9sbHZtLnJzdCBiL0RvY3VtZW50YXRpb24va2J1aWxkL2xsdm0ucnN0Cm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uZDZjNzllYjRlMjNlCi0tLSAvZGV2L251
bGwKKysrIGIvRG9jdW1lbnRhdGlvbi9rYnVpbGQvbGx2bS5yc3QKQEAgLTAsMCArMSw4MCBAQAor
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CitCdWlsZGluZyBMaW51eCB3aXRoIENsYW5n
L0xMVk0KKz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQorCitUaGlzIGRvY3VtZW50IGNv
dmVycyBob3cgdG8gYnVpbGQgdGhlIExpbnV4IGtlcm5lbCB3aXRoIENsYW5nIGFuZCBMTFZNCit1
dGlsaXRpZXMuCisKK0Fib3V0CistLS0tLQorCitUaGUgTGludXgga2VybmVsIGhhcyBhbHdheXMg
dHJhZGl0aW9uYWxseSBiZWVuIGNvbXBpbGVkIHdpdGggR05VIHRvb2xjaGFpbnMKK3N1Y2ggYXMg
R0NDIGFuZCBiaW51dGlscy4gT25nb2luZyB3b3JrIGhhcyBhbGxvd2VkIGZvciBgQ2xhbmcKKzxo
dHRwczovL2NsYW5nLmxsdm0ub3JnLz5gXyBhbmQgYExMVk0gPGh0dHBzOi8vbGx2bS5vcmcvPmBf
IHV0aWxpdGllcyB0byBiZQordXNlZCBhcyB2aWFibGUgc3Vic3RpdHV0ZXMuIERpc3RyaWJ1dGlv
bnMgc3VjaCBhcyBgQW5kcm9pZAorPGh0dHBzOi8vd3d3LmFuZHJvaWQuY29tLz5gXywgYENocm9t
ZU9TCis8aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2Nocm9taXVtLW9zPmBfLCBhbmQgYE9wZW5N
YW5kcml2YQorPGh0dHBzOi8vd3d3Lm9wZW5tYW5kcml2YS5vcmcvPmBfIHVzZSBDbGFuZyBidWls
dCBrZXJuZWxzLiAgYExMVk0gaXMgYQorY29sbGVjdGlvbiBvZiB0b29sY2hhaW4gY29tcG9uZW50
cyBpbXBsZW1lbnRlZCBpbiB0ZXJtcyBvZiBDKysgb2JqZWN0cworPGh0dHBzOi8vd3d3LmFvc2Fi
b29rLm9yZy9lbi9sbHZtLmh0bWw+YF8uIENsYW5nIGlzIGEgZnJvbnQtZW5kIHRvIExMVk0gdGhh
dAorc3VwcG9ydHMgQyBhbmQgdGhlIEdOVSBDIGV4dGVuc2lvbnMgcmVxdWlyZWQgYnkgdGhlIGtl
cm5lbCwgYW5kIGlzIHByb25vdW5jZWQKKyJrbGFuZywiIG5vdCAic2VlLWxhbmcuIgorCitDbGFu
ZworLS0tLS0KKworVGhlIGNvbXBpbGVyIHVzZWQgY2FuIGJlIHN3YXBwZWQgb3V0IHZpYSBgQ0M9
YCBjb21tYW5kIGxpbmUgYXJndW1lbnQgdG8gYG1ha2VgLgorYENDPWAgc2hvdWxkIGJlIHNldCB3
aGVuIHNlbGVjdGluZyBhIGNvbmZpZyBhbmQgZHVyaW5nIGEgYnVpbGQuCisKKwltYWtlIENDPWNs
YW5nIGRlZmNvbmZpZworCisJbWFrZSBDQz1jbGFuZworCitDcm9zcyBDb21waWxpbmcKKy0tLS0t
LS0tLS0tLS0tLQorCitBIHNpbmdsZSBDbGFuZyBjb21waWxlciBiaW5hcnkgd2lsbCB0eXBpY2Fs
bHkgY29udGFpbiBhbGwgc3VwcG9ydGVkIGJhY2tlbmRzLAord2hpY2ggY2FuIGhlbHAgc2ltcGxp
ZnkgY3Jvc3MgY29tcGlsaW5nLgorCisJQVJDSD1hcm02NCBDUk9TU19DT01QSUxFPWFhcmNoNjQt
bGludXgtZ251LSBtYWtlIENDPWNsYW5nCisKK2BDUk9TU19DT01QSUxFYCBpcyBub3QgdXNlZCB0
byBwcmVmaXggdGhlIENsYW5nIGNvbXBpbGVyIGJpbmFyeSwgaW5zdGVhZAorYENST1NTX0NPTVBJ
TEVgIGlzIHVzZWQgdG8gc2V0IGEgY29tbWFuZCBsaW5lIGZsYWc6IGAtLXRhcmdldCA8dHJpcGxl
PmAuIEZvcgorZXhhbXBsZToKKworCWNsYW5nIC0tdGFyZ2V0IGFhcmNoNjQtbGludXgtZ251IGZv
by5jCisKK0xMVk0gVXRpbGl0aWVzCistLS0tLS0tLS0tLS0tLQorCitMTFZNIGhhcyBzdWJzdGl0
dXRlcyBmb3IgR05VIGJpbnV0aWxzIHV0aWxpdGllcy4gVGhlc2UgY2FuIGJlIGludm9rZWQgYXMK
K2FkZGl0aW9uYWwgcGFyYW1ldGVycyB0byBgbWFrZWAuCisKKwltYWtlIENDPWNsYW5nIEFTPWNs
YW5nIExEPWxkLmxsZCBBUj1sbHZtLWFyIE5NPWxsdm0tbm0gU1RSSVA9bGx2bS1zdHJpcCBcXAor
CSAgT0JKQ09QWT1sbHZtLW9iamNvcHkgT0JKRFVNUD1sbHZtLW9iamR1bXAgT0JKU0laRT1sbHZt
LW9ianNpemUgXFwKKwkgIFJFQURFTEY9bGx2bS1yZWFkZWxmIEhPU1RDQz1jbGFuZyBIT1NUQ1hY
PWNsYW5nKysgSE9TVEFSPWxsdm0tYXIgXFwKKwkgIEhPU1RMRD1sZC5sbGQKKworR2V0dGluZyBI
ZWxwCistLS0tLS0tLS0tLS0KKworLSBgV2Vic2l0ZSA8aHR0cHM6Ly9jbGFuZ2J1aWx0bGludXgu
Z2l0aHViLmlvLz5gXworLSBgTWFpbGluZyBMaXN0IDxodHRwczovL2dyb3Vwcy5nb29nbGUuY29t
L2ZvcnVtLyMhZm9ydW0vY2xhbmctYnVpbHQtbGludXg+YF86IDxjbGFuZy1idWlsdC1saW51eEBn
b29nbGVncm91cHMuY29tPgorLSBgSXNzdWUgVHJhY2tlciA8aHR0cHM6Ly9naXRodWIuY29tL0Ns
YW5nQnVpbHRMaW51eC9saW51eC9pc3N1ZXM+YF8KKy0gSVJDOiAjY2xhbmdidWlsdGxpbnV4IG9u
IGNoYXQuZnJlZW5vZGUubmV0CistIGBUZWxlZ3JhbSA8aHR0cHM6Ly90Lm1lL0NsYW5nQnVpbHRM
aW51eD5gXzogQENsYW5nQnVpbHRMaW51eAorLSBgV2lraSA8aHR0cHM6Ly9naXRodWIuY29tL0Ns
YW5nQnVpbHRMaW51eC9saW51eC93aWtpPmBfCistIGBCZWdpbm5lciBCdWdzIDxodHRwczovL2dp
dGh1Yi5jb20vQ2xhbmdCdWlsdExpbnV4L2xpbnV4L2lzc3Vlcz9xPWlzJTNBb3BlbitpcyUzQWlz
c3VlK2xhYmVsJTNBJTIyZ29vZCtmaXJzdCtpc3N1ZSUyMj5gXworCitHZXR0aW5nIExMVk0KKy0t
LS0tLS0tLS0tLS0KKworLSBodHRwOi8vcmVsZWFzZXMubGx2bS5vcmcvZG93bmxvYWQuaHRtbAor
LSBodHRwczovL2dpdGh1Yi5jb20vbGx2bS9sbHZtLXByb2plY3QKKy0gaHR0cHM6Ly9sbHZtLm9y
Zy9kb2NzL0dldHRpbmdTdGFydGVkLmh0bWwKKy0gaHR0cHM6Ly9sbHZtLm9yZy9kb2NzL0NNYWtl
Lmh0bWwKKy0gaHR0cHM6Ly9hcHQubGx2bS5vcmcvCistIGh0dHBzOi8vd3d3LmFyY2hsaW51eC5v
cmcvcGFja2FnZXMvZXh0cmEveDg2XzY0L2xsdm0vCistIGh0dHBzOi8vZ2l0aHViLmNvbS9DbGFu
Z0J1aWx0TGludXgvdGMtYnVpbGQKKy0gaHR0cHM6Ly9naXRodWIuY29tL0NsYW5nQnVpbHRMaW51
eC9saW51eC93aWtpL0J1aWxkaW5nLUNsYW5nLWZyb20tc291cmNlCistIGh0dHBzOi8vYW5kcm9p
ZC5nb29nbGVzb3VyY2UuY29tL3BsYXRmb3JtL3ByZWJ1aWx0cy9jbGFuZy9ob3N0L2xpbnV4LXg4
Ni8KZGlmZiAtLWdpdCBhL01BSU5UQUlORVJTIGIvTUFJTlRBSU5FUlMKaW5kZXggOTM4ODU2NGI3
YWI1Li4xMDYxZGI2ZmJjMzIgMTAwNjQ0Ci0tLSBhL01BSU5UQUlORVJTCisrKyBiL01BSU5UQUlO
RVJTCkBAIC0zNjIwLDYgKzM2MjAsNyBAQCBCOglodHRwczovL2dpdGh1Yi5jb20vQ2xhbmdCdWls
dExpbnV4L2xpbnV4L2lzc3VlcwogQzoJaXJjOi8vY2hhdC5mcmVlbm9kZS5uZXQvY2xhbmdidWls
dGxpbnV4CiBTOglTdXBwb3J0ZWQKIEs6CVxiKD9pOmNsYW5nfGxsdm0pXGIKK0Y6CURvY3VtZW50
YXRpb24va2J1aWxkL2xsdm0ucnN0CiAKIENMRUFOQ0FDSEUgQVBJCiBNOglLb25yYWQgUnplc3p1
dGVrIFdpbGsgPGtvbnJhZC53aWxrQG9yYWNsZS5jb20+Ci0tIAoyLjI4LjAuNjgxLmc2Zjc3ZjY1
YjRlLWdvb2cKCgpGcm9tIGM3NDg3ZDc5YWYwNDVlMjgwZjRlYzg1Yzg2NjI0MWU3ODQ2OTcwYTEg
TW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IEZhbmdydWkgU29uZyA8bWFza3JheUBnb29n
bGUuY29tPgpEYXRlOiBUaHUsIDIgQXByIDIwMjAgMTA6Mzg6NDIgLTA3MDAKU3ViamVjdDogW1BB
VENIIDA0LzEwXSBEb2N1bWVudGF0aW9uL2xsdm06IGZpeCB0aGUgbmFtZSBvZiBsbHZtLXNpemUK
CmNvbW1pdCAwZjQ0ZmJjMTYyYjczN2ZmNjI1MWFlMjQ4MTg0MzkwYWUyMjc5ZmVlIHVwc3RyZWFt
LgoKVGhlIHRvb2wgaXMgY2FsbGVkIGxsdm0tc2l6ZSwgbm90IGxsdm0tb2Jqc2l6ZS4KCkZpeGVz
OiBmY2YxYjZhMzVjMTYgKCJEb2N1bWVudGF0aW9uL2xsdm06IGFkZCBkb2N1bWVudGF0aW9uIG9u
IGJ1aWxkaW5nIHcvIENsYW5nL0xMVk0iKQpTaWduZWQtb2ZmLWJ5OiBGYW5ncnVpIFNvbmcgPG1h
c2tyYXlAZ29vZ2xlLmNvbT4KUmV2aWV3ZWQtYnk6IE5pY2sgRGVzYXVsbmllcnMgPG5kZXNhdWxu
aWVyc0Bnb29nbGUuY29tPgpSZXZpZXdlZC1ieTogTmF0aGFuIENoYW5jZWxsb3IgPG5hdGVjaGFu
Y2VsbG9yQGdtYWlsLmNvbT4KU2lnbmVkLW9mZi1ieTogTWFzYWhpcm8gWWFtYWRhIDxtYXNhaGly
b3lAa2VybmVsLm9yZz4KU2lnbmVkLW9mZi1ieTogTmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5p
ZXJzQGdvb2dsZS5jb20+Ci0tLQogRG9jdW1lbnRhdGlvbi9rYnVpbGQvbGx2bS5yc3QgfCAyICst
CiAxIGZpbGUgY2hhbmdlZCwgMSBpbnNlcnRpb24oKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1n
aXQgYS9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdCBiL0RvY3VtZW50YXRpb24va2J1aWxk
L2xsdm0ucnN0CmluZGV4IGQ2Yzc5ZWI0ZTIzZS4uZWVmYmRmYTNlNGQ5IDEwMDY0NAotLS0gYS9E
b2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdAorKysgYi9Eb2N1bWVudGF0aW9uL2tidWlsZC9s
bHZtLnJzdApAQCAtNTEsNyArNTEsNyBAQCBMTFZNIGhhcyBzdWJzdGl0dXRlcyBmb3IgR05VIGJp
bnV0aWxzIHV0aWxpdGllcy4gVGhlc2UgY2FuIGJlIGludm9rZWQgYXMKIGFkZGl0aW9uYWwgcGFy
YW1ldGVycyB0byBgbWFrZWAuCiAKIAltYWtlIENDPWNsYW5nIEFTPWNsYW5nIExEPWxkLmxsZCBB
Uj1sbHZtLWFyIE5NPWxsdm0tbm0gU1RSSVA9bGx2bS1zdHJpcCBcXAotCSAgT0JKQ09QWT1sbHZt
LW9iamNvcHkgT0JKRFVNUD1sbHZtLW9iamR1bXAgT0JKU0laRT1sbHZtLW9ianNpemUgXFwKKwkg
IE9CSkNPUFk9bGx2bS1vYmpjb3B5IE9CSkRVTVA9bGx2bS1vYmpkdW1wIE9CSlNJWkU9bGx2bS1z
aXplIFxcCiAJICBSRUFERUxGPWxsdm0tcmVhZGVsZiBIT1NUQ0M9Y2xhbmcgSE9TVENYWD1jbGFu
ZysrIEhPU1RBUj1sbHZtLWFyIFxcCiAJICBIT1NUTEQ9bGQubGxkCiAKLS0gCjIuMjguMC42ODEu
ZzZmNzdmNjViNGUtZ29vZwoKCkZyb20gNzZhMjlmMjMzMzQyNzQ5MGMzMzE5YjM1M2EwZDRhZDg1
YWEzNWU3OSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogTWFzYWhpcm8gWWFtYWRhIDxt
YXNhaGlyb3lAa2VybmVsLm9yZz4KRGF0ZTogVGh1LCAyNiBNYXIgMjAyMCAxNDo1NzoxNSArMDkw
MApTdWJqZWN0OiBbUEFUQ0ggMDUvMTBdIG5ldDogd2FuOiB3YW54bDogdXNlIGFsbG93IHRvIHBh
c3MgQ1JPU1NfQ09NUElMRV9NNjhrCiBmb3IgcmVidWlsZGluZyBmaXJtd2FyZQoKY29tbWl0IDYz
YjkwM2RmZWJkZWE5MmFhOTJhZDMzN2Q4NDUxYTZmYmZlYWJmOWQgdXBzdHJlYW0uCgpBcyBmYXIg
YXMgSSB1bmRlcnN0b29kIGZyb20gdGhlIEtjb25maWcgaGVscCB0ZXh0LCB0aGlzIGJ1aWxkIHJ1
bGUgaXMKdXNlZCB0byByZWJ1aWxkIHRoZSBkcml2ZXIgZmlybXdhcmUsIHdoaWNoIHJ1bnMgb24g
YW4gb2xkIG02OGstYmFzZWQKY2hpcC4gU28sIHlvdSBuZWVkIG02OGsgdG9vbHMgZm9yIHRoZSBm
aXJtd2FyZSByZWJ1aWxkLgoKd2FueGwuYyBpcyBhIFBDSSBkcml2ZXIsIGJ1dCBDT05GSUdfTTY4
SyBkb2VzIG5vdCBzZWxlY3QgQ09ORklHX0hBVkVfUENJLgpTbywgeW91IGNhbm5vdCBlbmFibGUg
Q09ORklHX1dBTlhMX0JVSUxEX0ZJUk1XQVJFIGZvciBBUkNIPW02OGsuIEluIG90aGVyCndvcmRz
LCBpZmVxICgkKEFSQ0gpLG02OGspIGlzIGZhbHNlIGhlcmUuCgpJIGFtIGtlZXBpbmcgdGhlIGRl
YWQgY29kZSBmb3Igbm93LCBidXQgcmVidWlsZGluZyB0aGUgZmlybXdhcmUgcmVxdWlyZXMKJ2Fz
NjhrJyBhbmQgJ2xkNjhrJywgd2hpY2ggSSBkbyBub3QgaGF2ZSBpbiBoYW5kLgoKSW5zdGVhZCwg
dGhlIGtlcm5lbC5vcmcgbTY4ayBHQ0MgWzFdIHN1Y2Nlc3NmdWxseSBidWlsdCBpdC4KCkFsbG93
aW5nIGEgdXNlciB0byBwYXNzIGluIENST1NTX0NPTVBJTEVfTTY4Sz0gaXMgaGFuZGllci4KClsx
XSBodHRwczovL21pcnJvcnMuZWRnZS5rZXJuZWwub3JnL3B1Yi90b29scy9jcm9zc3Rvb2wvZmls
ZXMvYmluL3g4Nl82NC85LjIuMC94ODZfNjQtZ2NjLTkuMi4wLW5vbGliYy1tNjhrLWxpbnV4LnRh
ci54egoKU3VnZ2VzdGVkLWJ5OiBHZWVydCBVeXR0ZXJob2V2ZW4gPGdlZXJ0QGxpbnV4LW02OGsu
b3JnPgpTaWduZWQtb2ZmLWJ5OiBNYXNhaGlybyBZYW1hZGEgPG1hc2FoaXJveUBrZXJuZWwub3Jn
PgpTaWduZWQtb2ZmLWJ5OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmllcnNAZ29vZ2xlLmNv
bT4KLS0tCiBkcml2ZXJzL25ldC93YW4vS2NvbmZpZyAgfCAgMiArLQogZHJpdmVycy9uZXQvd2Fu
L01ha2VmaWxlIHwgMTIgKysrKysrLS0tLS0tCiAyIGZpbGVzIGNoYW5nZWQsIDcgaW5zZXJ0aW9u
cygrKSwgNyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC93YW4vS2NvbmZp
ZyBiL2RyaXZlcnMvbmV0L3dhbi9LY29uZmlnCmluZGV4IDRlOWZlNzVkNzA2Ny4uMjExOTBkZmJh
YmIxIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC93YW4vS2NvbmZpZworKysgYi9kcml2ZXJzL25l
dC93YW4vS2NvbmZpZwpAQCAtMTk5LDcgKzE5OSw3IEBAIGNvbmZpZyBXQU5YTF9CVUlMRF9GSVJN
V0FSRQogCWRlcGVuZHMgb24gV0FOWEwgJiYgIVBSRVZFTlRfRklSTVdBUkVfQlVJTEQKIAloZWxw
CiAJICBBbGxvd3MgeW91IHRvIHJlYnVpbGQgZmlybXdhcmUgcnVuIGJ5IHRoZSBRVUlDQyBwcm9j
ZXNzb3IuCi0JICBJdCByZXF1aXJlcyBhczY4aywgbGQ2OGsgYW5kIGhleGR1bXAgcHJvZ3JhbXMu
CisJICBJdCByZXF1aXJlcyBtNjhrIHRvb2xjaGFpbnMgYW5kIGhleGR1bXAgcHJvZ3JhbXMuCiAK
IAkgIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0aGlzIG9wdGlvbiwgc2F5IE4uCiAKZGlmZiAtLWdp
dCBhL2RyaXZlcnMvbmV0L3dhbi9NYWtlZmlsZSBiL2RyaXZlcnMvbmV0L3dhbi9NYWtlZmlsZQpp
bmRleCA5NTMyZTY5ZmRhODcuLmMyMWI3MzQ1YjUwYiAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQv
d2FuL01ha2VmaWxlCisrKyBiL2RyaXZlcnMvbmV0L3dhbi9NYWtlZmlsZQpAQCAtNDEsMTcgKzQx
LDE3IEBAICQob2JqKS93YW54bC5vOgkkKG9iaikvd2FueGxmdy5pbmMKIAogaWZlcSAoJChDT05G
SUdfV0FOWExfQlVJTERfRklSTVdBUkUpLHkpCiBpZmVxICgkKEFSQ0gpLG02OGspCi0gIEFTNjhL
ID0gJChBUykKLSAgTEQ2OEsgPSAkKExEKQorICBNNjhLQVMgPSAkKEFTKQorICBNNjhLTEQgPSAk
KExEKQogZWxzZQotICBBUzY4SyA9IGFzNjhrCi0gIExENjhLID0gbGQ2OGsKKyAgTTY4S0FTID0g
JChDUk9TU19DT01QSUxFX002OEspYXMKKyAgTTY4S0xEID0gJChDUk9TU19DT01QSUxFX002OEsp
bGQKIGVuZGlmCiAKIHF1aWV0X2NtZF9idWlsZF93YW54bGZ3ID0gQkxEIEZXICAkQAogICAgICAg
Y21kX2J1aWxkX3dhbnhsZncgPSBcCi0JJChDUFApIC1EX19BU1NFTUJMWV9fIC1XcCwtTUQsJChk
ZXBmaWxlKSAtSSQoc3JjdHJlZSkvaW5jbHVkZS91YXBpICQ8IHwgJChBUzY4SykgLW02ODM2MCAt
byAkKG9iaikvd2FueGxmdy5vOyBcCi0JJChMRDY4SykgLS1vZm9ybWF0IGJpbmFyeSAtVHRleHQg
MHgxMDAwICQob2JqKS93YW54bGZ3Lm8gLW8gJChvYmopL3dhbnhsZncuYmluOyBcCisJJChDUFAp
IC1EX19BU1NFTUJMWV9fIC1XcCwtTUQsJChkZXBmaWxlKSAtSSQoc3JjdHJlZSkvaW5jbHVkZS91
YXBpICQ8IHwgJChNNjhLQVMpIC1tNjgzNjAgLW8gJChvYmopL3dhbnhsZncubzsgXAorCSQoTTY4
S0xEKSAtLW9mb3JtYXQgYmluYXJ5IC1UdGV4dCAweDEwMDAgJChvYmopL3dhbnhsZncubyAtbyAk
KG9iaikvd2FueGxmdy5iaW47IFwKIAloZXhkdW1wIC12ZSAnIlxuIiAxNi8xICIweCUwMlgsIicg
JChvYmopL3dhbnhsZncuYmluIHwgc2VkICdzLzB4ICAsLy9nOzFzL14vc3RhdGljIGNvbnN0IHU4
IGZpcm13YXJlW109ey87JCRzLywkJC9cbn07XG4vJyA+JChvYmopL3dhbnhsZncuaW5jOyBcCiAJ
cm0gLWYgJChvYmopL3dhbnhsZncuYmluICQob2JqKS93YW54bGZ3Lm8KIAotLSAKMi4yOC4wLjY4
MS5nNmY3N2Y2NWI0ZS1nb29nCgoKRnJvbSAyNDY4ZjRlYmU1NmI5YmMyZDE4ODg0ZTE3MjZiMzUw
NDFmZGIxOGZhIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBNYXNhaGlybyBZYW1hZGEg
PG1hc2FoaXJveUBrZXJuZWwub3JnPgpEYXRlOiBUaHUsIDI2IE1hciAyMDIwIDE0OjU3OjE2ICsw
OTAwClN1YmplY3Q6IFtQQVRDSCAwNi8xMF0gbmV0OiB3YW46IHdhbnhsOiB1c2UgJChNNjhLQ0Mp
IGluc3RlYWQgb2YgJChNNjhLQVMpIGZvcgogcmVidWlsZGluZyBmaXJtd2FyZQoKY29tbWl0IDcz
NGYzNzE5ZDM0MzhmOWNjMTgxZDY3NGMzM2NhOTc2MmU5MTQ4YTEgdXBzdHJlYW0uCgpUaGUgZmly
bXdhcmUgc291cmNlLCB3YW54bGZ3LlMsIGlzIGN1cnJlbnRseSBjb21waWxlZCBieSB0aGUgY29t
Ym8gb2YKJChDUFApIGFuZCAkKE02OEtBUykuIFRoaXMgaXMgbm90IHdoYXQgd2UgdXN1YWxseSBk
byBmb3IgY29tcGlsaW5nICouUwpmaWxlcy4gSW4gZmFjdCwgdGhpcyBNYWtlZmlsZSBpcyB0aGUg
b25seSB1c2VyIG9mICQoQVMpIGluIHRoZSBrZXJuZWwKYnVpbGQuCgpJbnN0ZWFkIG9mIGNvbWJp
bmluZyAkKENQUCkgYW5kIChBUykgZnJvbSBkaWZmZXJlbnQgdG9vbCBzZXRzLCB1c2luZwokKE02
OEtDQykgYXMgYW4gYXNzZW1ibGVyIGRyaXZlciBpcyBzaW1wbGVyLCBhbmQgc2FuZXIuCgpTaWdu
ZWQtb2ZmLWJ5OiBNYXNhaGlybyBZYW1hZGEgPG1hc2FoaXJveUBrZXJuZWwub3JnPgpTaWduZWQt
b2ZmLWJ5OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmllcnNAZ29vZ2xlLmNvbT4KLS0tCiBk
cml2ZXJzL25ldC93YW4vTWFrZWZpbGUgfCA2ICsrKy0tLQogMSBmaWxlIGNoYW5nZWQsIDMgaW5z
ZXJ0aW9ucygrKSwgMyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC93YW4v
TWFrZWZpbGUgYi9kcml2ZXJzL25ldC93YW4vTWFrZWZpbGUKaW5kZXggYzIxYjczNDViNTBiLi4w
NTAwMjgyZTE3NmUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L3dhbi9NYWtlZmlsZQorKysgYi9k
cml2ZXJzL25ldC93YW4vTWFrZWZpbGUKQEAgLTQxLDE2ICs0MSwxNiBAQCAkKG9iaikvd2FueGwu
bzoJJChvYmopL3dhbnhsZncuaW5jCiAKIGlmZXEgKCQoQ09ORklHX1dBTlhMX0JVSUxEX0ZJUk1X
QVJFKSx5KQogaWZlcSAoJChBUkNIKSxtNjhrKQotICBNNjhLQVMgPSAkKEFTKQorICBNNjhLQ0Mg
PSAkKENDKQogICBNNjhLTEQgPSAkKExEKQogZWxzZQotICBNNjhLQVMgPSAkKENST1NTX0NPTVBJ
TEVfTTY4SylhcworICBNNjhLQ0MgPSAkKENST1NTX0NPTVBJTEVfTTY4SylnY2MKICAgTTY4S0xE
ID0gJChDUk9TU19DT01QSUxFX002OEspbGQKIGVuZGlmCiAKIHF1aWV0X2NtZF9idWlsZF93YW54
bGZ3ID0gQkxEIEZXICAkQAogICAgICAgY21kX2J1aWxkX3dhbnhsZncgPSBcCi0JJChDUFApIC1E
X19BU1NFTUJMWV9fIC1XcCwtTUQsJChkZXBmaWxlKSAtSSQoc3JjdHJlZSkvaW5jbHVkZS91YXBp
ICQ8IHwgJChNNjhLQVMpIC1tNjgzNjAgLW8gJChvYmopL3dhbnhsZncubzsgXAorCSQoTTY4S0ND
KSAtRF9fQVNTRU1CTFlfXyAtV3AsLU1ELCQoZGVwZmlsZSkgLUkkKHNyY3RyZWUpL2luY2x1ZGUv
dWFwaSAtYyAtbyAkKG9iaikvd2FueGxmdy5vICQ8OyBcCiAJJChNNjhLTEQpIC0tb2Zvcm1hdCBi
aW5hcnkgLVR0ZXh0IDB4MTAwMCAkKG9iaikvd2FueGxmdy5vIC1vICQob2JqKS93YW54bGZ3LmJp
bjsgXAogCWhleGR1bXAgLXZlICciXG4iIDE2LzEgIjB4JTAyWCwiJyAkKG9iaikvd2FueGxmdy5i
aW4gfCBzZWQgJ3MvMHggICwvL2c7MXMvXi9zdGF0aWMgY29uc3QgdTggZmlybXdhcmVbXT17Lzsk
JHMvLCQkL1xufTtcbi8nID4kKG9iaikvd2FueGxmdy5pbmM7IFwKIAlybSAtZiAkKG9iaikvd2Fu
eGxmdy5iaW4gJChvYmopL3dhbnhsZncubwotLSAKMi4yOC4wLjY4MS5nNmY3N2Y2NWI0ZS1nb29n
CgoKRnJvbSA4ZmU4NTcyOGI0NmE4ZWU5MDI2NTY5NmM5ODc2YTcyNTk2NDE1MDQ0IE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBEbWl0cnkgR29sb3ZpbiA8ZGltYUBnb2xvdmluLmluPgpE
YXRlOiBUaHUsIDUgRGVjIDIwMTkgMDA6NTQ6NDEgKzAyMDAKU3ViamVjdDogW1BBVENIIDA3LzEw
XSB4ODYvYm9vdDoga2J1aWxkOiBhbGxvdyByZWFkZWxmIGV4ZWN1dGFibGUgdG8gYmUKIHNwZWNp
ZmllZAoKY29tbWl0IGVlZmI4YzEyNGZkOTY5ZTlhMTc0ZmYyYmVkZmY4NmFhMzA1YTc0MzggdXBz
dHJlYW0uCgpJbnRyb2R1Y2UgYSBuZXcgUkVBREVMRiB2YXJpYWJsZSB0byB0b3AtbGV2ZWwgTWFr
ZWZpbGUsIHNvIHRoZSBuYW1lIG9mCnJlYWRlbGYgYmluYXJ5IGNhbiBiZSBzcGVjaWZpZWQuCgpC
ZWZvcmUgdGhpcyBjaGFuZ2UgdGhlIG5hbWUgb2YgdGhlIGJpbmFyeSB3YXMgaGFyZGNvZGVkIHRv
CiIkKENST1NTX0NPTVBJTEUpcmVhZGVsZiIgd2hpY2ggbWlnaHQgbm90IGJlIHByZXNlbnQgZm9y
IGV2ZXJ5CnRvb2xjaGFpbi4KClRoaXMgYWxsb3dzIHRvIGJ1aWxkIHdpdGggTExWTSBPYmplY3Qg
UmVhZGVyIGJ5IHVzaW5nIG1ha2UgcGFyYW1ldGVyClJFQURFTEY9bGx2bS1yZWFkZWxmLgoKTGlu
azogaHR0cHM6Ly9naXRodWIuY29tL0NsYW5nQnVpbHRMaW51eC9saW51eC9pc3N1ZXMvNzcxClNp
Z25lZC1vZmYtYnk6IERtaXRyeSBHb2xvdmluIDxkaW1hQGdvbG92aW4uaW4+ClJldmlld2VkLWJ5
OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmllcnNAZ29vZ2xlLmNvbT4KU2lnbmVkLW9mZi1i
eTogTWFzYWhpcm8gWWFtYWRhIDxtYXNhaGlyb3lAa2VybmVsLm9yZz4KU2lnbmVkLW9mZi1ieTog
TmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5pZXJzQGdvb2dsZS5jb20+CltuZDogY29uZmxpY3Qg
aW4gZXhwb3J0ZWQgdmFycyBsaXN0IGZyb20gbm90IGJhY2twb3J0aW5nIGNvbW1pdAogZTgzYjlm
NTU0NDhhICgia2J1aWxkOiBhZGQgYWJpbGl0eSB0byBnZW5lcmF0ZSBCVEYgdHlwZSBpbmZvIGZv
ciB2bWxpbnV4IildCi0tLQogTWFrZWZpbGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAr
Ky0KIGFyY2gveDg2L2Jvb3QvY29tcHJlc3NlZC9NYWtlZmlsZSB8IDIgKy0KIDIgZmlsZXMgY2hh
bmdlZCwgMyBpbnNlcnRpb25zKCspLCAyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL01ha2Vm
aWxlIGIvTWFrZWZpbGUKaW5kZXggOWI3NTg1NDljN2NlLi4yMTM1ZjNkZjBlZWUgMTAwNjQ0Ci0t
LSBhL01ha2VmaWxlCisrKyBiL01ha2VmaWxlCkBAIC0zNzgsNiArMzc4LDcgQEAgU1RSSVAJCT0g
JChDUk9TU19DT01QSUxFKXN0cmlwCiBPQkpDT1BZCQk9ICQoQ1JPU1NfQ09NUElMRSlvYmpjb3B5
CiBPQkpEVU1QCQk9ICQoQ1JPU1NfQ09NUElMRSlvYmpkdW1wCiBPQkpTSVpFCQk9ICQoQ1JPU1Nf
Q09NUElMRSlzaXplCitSRUFERUxGCQk9ICQoQ1JPU1NfQ09NUElMRSlyZWFkZWxmCiBMRVgJCT0g
ZmxleAogWUFDQwkJPSBiaXNvbgogQVdLCQk9IGF3awpAQCAtNDM0LDcgKzQzNSw3IEBAIEdDQ19Q
TFVHSU5TX0NGTEFHUyA6PQogQ0xBTkdfRkxBR1MgOj0KIAogZXhwb3J0IEFSQ0ggU1JDQVJDSCBD
T05GSUdfU0hFTEwgSE9TVENDIEtCVUlMRF9IT1NUQ0ZMQUdTIENST1NTX0NPTVBJTEUgQVMgTEQg
Q0MKLWV4cG9ydCBDUFAgQVIgTk0gU1RSSVAgT0JKQ09QWSBPQkpEVU1QIE9CSlNJWkUgS0JVSUxE
X0hPU1RMREZMQUdTIEtCVUlMRF9IT1NUTERMSUJTCitleHBvcnQgQ1BQIEFSIE5NIFNUUklQIE9C
SkNPUFkgT0JKRFVNUCBPQkpTSVpFIFJFQURFTEYgS0JVSUxEX0hPU1RMREZMQUdTIEtCVUlMRF9I
T1NUTERMSUJTCiBleHBvcnQgTUFLRSBMRVggWUFDQyBBV0sgR0VOS1NZTVMgSU5TVEFMTEtFUk5F
TCBQRVJMIFBZVEhPTiBQWVRIT04yIFBZVEhPTjMgVVRTX01BQ0hJTkUKIGV4cG9ydCBIT1NUQ1hY
IEtCVUlMRF9IT1NUQ1hYRkxBR1MgTERGTEFHU19NT0RVTEUgQ0hFQ0sgQ0hFQ0tGTEFHUwogCmRp
ZmYgLS1naXQgYS9hcmNoL3g4Ni9ib290L2NvbXByZXNzZWQvTWFrZWZpbGUgYi9hcmNoL3g4Ni9i
b290L2NvbXByZXNzZWQvTWFrZWZpbGUKaW5kZXggNDY2ZjY2YzhhN2Y4Li4xMGM4ZDZhMmIyMGIg
MTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2Jvb3QvY29tcHJlc3NlZC9NYWtlZmlsZQorKysgYi9hcmNo
L3g4Ni9ib290L2NvbXByZXNzZWQvTWFrZWZpbGUKQEAgLTEwMCw3ICsxMDAsNyBAQCB2bWxpbnV4
LW9ianMtJChDT05GSUdfRUZJX01JWEVEKSArPSAkKG9iaikvZWZpX3RodW5rXyQoQklUUykubwog
cXVpZXRfY21kX2NoZWNrX2RhdGFfcmVsID0gREFUQVJFTCAkQAogZGVmaW5lIGNtZF9jaGVja19k
YXRhX3JlbAogCWZvciBvYmogaW4gJChmaWx0ZXIgJS5vLCReKTsgZG8gXAotCQkke0NST1NTX0NP
TVBJTEV9cmVhZGVsZiAtUyAkJG9iaiB8IGdyZXAgLXFGIC5yZWwubG9jYWwgJiYgeyBcCisJCSQo
UkVBREVMRikgLVMgJCRvYmogfCBncmVwIC1xRiAucmVsLmxvY2FsICYmIHsgXAogCQkJZWNobyAi
ZXJyb3I6ICQkb2JqIGhhcyBkYXRhIHJlbG9jYXRpb25zISIgPiYyOyBcCiAJCQlleGl0IDE7IFwK
IAkJfSB8fCB0cnVlOyBcCi0tIAoyLjI4LjAuNjgxLmc2Zjc3ZjY1YjRlLWdvb2cKCgpGcm9tIDU3
ZjNlNWE4OGJlZmNmZTMzMmIwMTU3ZTY5MDRiNWYzYmUyYmZmNWYgTW9uIFNlcCAxNyAwMDowMDow
MCAyMDAxCkZyb206IE1hc2FoaXJvIFlhbWFkYSA8bWFzYWhpcm95QGtlcm5lbC5vcmc+CkRhdGU6
IFRodSwgMjYgTWFyIDIwMjAgMTQ6NTc6MTggKzA5MDAKU3ViamVjdDogW1BBVENIIDA4LzEwXSBr
YnVpbGQ6IHJlbW92ZSBBUyB2YXJpYWJsZQoKY29tbWl0IGFhODI0ZTBjOTYyYjUzMmQ1MDczY2Ji
NDFiMmVmY2Q2ZjVlNzJiYWUgdXBzdHJlYW0uCgpBcyBjb21taXQgNWVmODcyNjM2Y2E3ICgia2J1
aWxkOiBnZXQgcmlkIG9mIG1pc2xlYWRpbmcgJChBUykgZnJvbQpkb2N1bWVudHMiKSBub3RlZCwg
d2UgcmFyZWx5IHVzZSAkKEFTKSBkaXJlY3RseSBpbiB0aGUga2VybmVsIGJ1aWxkLgoKTm93IHRo
YXQgdGhlIG9ubHkvbGFzdCB1c2VyIG9mICQoQVMpIGluIGRyaXZlcnMvbmV0L3dhbi9NYWtlZmls
ZSB3YXMKY29udmVydGVkIHRvICQoQ0MpLCAkKEFTKSBpcyBubyBsb25nZXIgdXNlZCBpbiB0aGUg
YnVpbGQgcHJvY2Vzcy4KCllvdSBjYW4gc3RpbGwgcGFzcyBpbiBBUz1jbGFuZywgd2hpY2ggaXMg
anVzdCBhIHN3aXRjaCB0byB0dXJuIG9uCnRoZSBMTFZNIGludGVncmF0ZWQgYXNzZW1ibGVyLgoK
U2lnbmVkLW9mZi1ieTogTWFzYWhpcm8gWWFtYWRhIDxtYXNhaGlyb3lAa2VybmVsLm9yZz4KUmV2
aWV3ZWQtYnk6IE5pY2sgRGVzYXVsbmllcnMgPG5kZXNhdWxuaWVyc0Bnb29nbGUuY29tPgpUZXN0
ZWQtYnk6IE5pY2sgRGVzYXVsbmllcnMgPG5kZXNhdWxuaWVyc0Bnb29nbGUuY29tPgpSZXZpZXdl
ZC1ieTogTmF0aGFuIENoYW5jZWxsb3IgPG5hdGVjaGFuY2VsbG9yQGdtYWlsLmNvbT4KU2lnbmVk
LW9mZi1ieTogTmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5pZXJzQGdvb2dsZS5jb20+CltuZDog
Y29uZmxpY3QgaW4gZXhwb3J0ZWQgdmFycyBsaXN0IGZyb20gbm90IGJhY2twb3J0aW5nIGNvbW1p
dAogZTgzYjlmNTU0NDhhICgia2J1aWxkOiBhZGQgYWJpbGl0eSB0byBnZW5lcmF0ZSBCVEYgdHlw
ZSBpbmZvIGZvciB2bWxpbnV4IildCi0tLQogTWFrZWZpbGUgfCAzICstLQogMSBmaWxlIGNoYW5n
ZWQsIDEgaW5zZXJ0aW9uKCspLCAyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL01ha2VmaWxl
IGIvTWFrZWZpbGUKaW5kZXggMjEzNWYzZGYwZWVlLi4wOGY0N2M1NTk1NDggMTAwNjQ0Ci0tLSBh
L01ha2VmaWxlCisrKyBiL01ha2VmaWxlCkBAIC0zNjgsNyArMzY4LDYgQEAgS0JVSUxEX0hPU1RM
REZMQUdTICA6PSAkKEhPU1RfTEZTX0xERkxBR1MpICQoSE9TVExERkxBR1MpCiBLQlVJTERfSE9T
VExETElCUyAgIDo9ICQoSE9TVF9MRlNfTElCUykgJChIT1NUTERMSUJTKQogCiAjIE1ha2UgdmFy
aWFibGVzIChDQywgZXRjLi4uKQotQVMJCT0gJChDUk9TU19DT01QSUxFKWFzCiBMRAkJPSAkKENS
T1NTX0NPTVBJTEUpbGQKIENDCQk9ICQoQ1JPU1NfQ09NUElMRSlnY2MKIENQUAkJPSAkKENDKSAt
RQpAQCAtNDM0LDcgKzQzMyw3IEBAIEtCVUlMRF9MREZMQUdTIDo9CiBHQ0NfUExVR0lOU19DRkxB
R1MgOj0KIENMQU5HX0ZMQUdTIDo9CiAKLWV4cG9ydCBBUkNIIFNSQ0FSQ0ggQ09ORklHX1NIRUxM
IEhPU1RDQyBLQlVJTERfSE9TVENGTEFHUyBDUk9TU19DT01QSUxFIEFTIExEIENDCitleHBvcnQg
QVJDSCBTUkNBUkNIIENPTkZJR19TSEVMTCBIT1NUQ0MgS0JVSUxEX0hPU1RDRkxBR1MgQ1JPU1Nf
Q09NUElMRSBMRCBDQwogZXhwb3J0IENQUCBBUiBOTSBTVFJJUCBPQkpDT1BZIE9CSkRVTVAgT0JK
U0laRSBSRUFERUxGIEtCVUlMRF9IT1NUTERGTEFHUyBLQlVJTERfSE9TVExETElCUwogZXhwb3J0
IE1BS0UgTEVYIFlBQ0MgQVdLIEdFTktTWU1TIElOU1RBTExLRVJORUwgUEVSTCBQWVRIT04gUFlU
SE9OMiBQWVRIT04zIFVUU19NQUNISU5FCiBleHBvcnQgSE9TVENYWCBLQlVJTERfSE9TVENYWEZM
QUdTIExERkxBR1NfTU9EVUxFIENIRUNLIENIRUNLRkxBR1MKLS0gCjIuMjguMC42ODEuZzZmNzdm
NjViNGUtZ29vZwoKCkZyb20gNTY2NzdlMTJlYjQyMTY3NjJjNjFjNTNmNzRlMDNiZjQxYzY5ZGEz
OSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogTWFzYWhpcm8gWWFtYWRhIDxtYXNhaGly
b3lAa2VybmVsLm9yZz4KRGF0ZTogV2VkLCA4IEFwciAyMDIwIDEwOjM2OjIyICswOTAwClN1Ympl
Y3Q6IFtQQVRDSCAwOS8xMF0ga2J1aWxkOiByZXBsYWNlIEFTPWNsYW5nIHdpdGggTExWTV9JQVM9
MQoKY29tbWl0IDdlMjBlNDdjNzBmODEwZDY3OGQwMjk0MWZhM2M2NzEyMDljNGNhOTcgdXBzdHJl
YW0uCgpUaGUgJ0FTJyB2YXJpYWJsZSBpcyB1bnVzZWQgZm9yIGJ1aWxkaW5nIHRoZSBrZXJuZWwu
IE9ubHkgdGhlIHJlbWFpbmluZwp1c2FnZSBpcyB0byB0dXJuIG9uIHRoZSBpbnRlZ3JhdGVkIGFz
c2VtYmxlci4gQSBib29sZWFuIGZsYWcgaXMgYSBiZXR0ZXIKZml0IGZvciB0aGlzIHB1cnBvc2Uu
CgpBUz1jbGFuZyB3YXMgYWRkZWQgZm9yIGV4cGVydHMuIFNvLCBJIHJlcGxhY2VkIGl0IHdpdGgg
TExWTV9JQVM9MSwKYnJlYWtpbmcgdGhlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuCgpTdWdnZXN0
ZWQtYnk6IE5pY2sgRGVzYXVsbmllcnMgPG5kZXNhdWxuaWVyc0Bnb29nbGUuY29tPgpTaWduZWQt
b2ZmLWJ5OiBNYXNhaGlybyBZYW1hZGEgPG1hc2FoaXJveUBrZXJuZWwub3JnPgpSZXZpZXdlZC1i
eTogTmF0aGFuIENoYW5jZWxsb3IgPG5hdGVjaGFuY2VsbG9yQGdtYWlsLmNvbT4KUmV2aWV3ZWQt
Ynk6IE5pY2sgRGVzYXVsbmllcnMgPG5kZXNhdWxuaWVyc0Bnb29nbGUuY29tPgpTaWduZWQtb2Zm
LWJ5OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmllcnNAZ29vZ2xlLmNvbT4KLS0tCiBEb2N1
bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdCB8IDUgKysrKy0KIE1ha2VmaWxlICAgICAgICAgICAg
ICAgICAgICAgIHwgMiArKwogMiBmaWxlcyBjaGFuZ2VkLCA2IGluc2VydGlvbnMoKyksIDEgZGVs
ZXRpb24oLSkKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdCBiL0Rv
Y3VtZW50YXRpb24va2J1aWxkL2xsdm0ucnN0CmluZGV4IGVlZmJkZmEzZTRkOS4uNDUwNzA4NTM0
ODYwIDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdAorKysgYi9Eb2N1
bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdApAQCAtNTAsMTEgKzUwLDE0IEBAIExMVk0gVXRpbGl0
aWVzCiBMTFZNIGhhcyBzdWJzdGl0dXRlcyBmb3IgR05VIGJpbnV0aWxzIHV0aWxpdGllcy4gVGhl
c2UgY2FuIGJlIGludm9rZWQgYXMKIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byBgbWFrZWAuCiAK
LQltYWtlIENDPWNsYW5nIEFTPWNsYW5nIExEPWxkLmxsZCBBUj1sbHZtLWFyIE5NPWxsdm0tbm0g
U1RSSVA9bGx2bS1zdHJpcCBcXAorCW1ha2UgQ0M9Y2xhbmcgTEQ9bGQubGxkIEFSPWxsdm0tYXIg
Tk09bGx2bS1ubSBTVFJJUD1sbHZtLXN0cmlwIFxcCiAJICBPQkpDT1BZPWxsdm0tb2JqY29weSBP
QkpEVU1QPWxsdm0tb2JqZHVtcCBPQkpTSVpFPWxsdm0tc2l6ZSBcXAogCSAgUkVBREVMRj1sbHZt
LXJlYWRlbGYgSE9TVENDPWNsYW5nIEhPU1RDWFg9Y2xhbmcrKyBIT1NUQVI9bGx2bS1hciBcXAog
CSAgSE9TVExEPWxkLmxsZAogCitDdXJyZW50bHksIHRoZSBpbnRlZ3JhdGVkIGFzc2VtYmxlciBp
cyBkaXNhYmxlZCBieSBkZWZhdWx0LiBZb3UgY2FuIHBhc3MKK2BMTFZNX0lBUz0xYCB0byBlbmFi
bGUgaXQuCisKIEdldHRpbmcgSGVscAogLS0tLS0tLS0tLS0tCiAKZGlmZiAtLWdpdCBhL01ha2Vm
aWxlIGIvTWFrZWZpbGUKaW5kZXggMDhmNDdjNTU5NTQ4Li4wZWUzNjBlOThkZTEgMTAwNjQ0Ci0t
LSBhL01ha2VmaWxlCisrKyBiL01ha2VmaWxlCkBAIC00OTIsNyArNDkyLDkgQEAgZW5kaWYKIGlm
bmVxICgkKEdDQ19UT09MQ0hBSU4pLCkKIENMQU5HX0ZMQUdTCSs9IC0tZ2NjLXRvb2xjaGFpbj0k
KEdDQ19UT09MQ0hBSU4pCiBlbmRpZgoraWZuZXEgKCQoTExWTV9JQVMpLDEpCiBDTEFOR19GTEFH
UwkrPSAtbm8taW50ZWdyYXRlZC1hcworZW5kaWYKIENMQU5HX0ZMQUdTCSs9IC1XZXJyb3I9dW5r
bm93bi13YXJuaW5nLW9wdGlvbgogS0JVSUxEX0NGTEFHUwkrPSAkKENMQU5HX0ZMQUdTKQogS0JV
SUxEX0FGTEFHUwkrPSAkKENMQU5HX0ZMQUdTKQotLSAKMi4yOC4wLjY4MS5nNmY3N2Y2NWI0ZS1n
b29nCgoKRnJvbSA0ODdlMmU2ZmU5NDE0MTYxYjAxNGY1NzcyYjRlZDhlNDZjZjRhMGE2IE1vbiBT
ZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBNYXNhaGlybyBZYW1hZGEgPG1hc2FoaXJveUBrZXJu
ZWwub3JnPgpEYXRlOiBXZWQsIDggQXByIDIwMjAgMTA6MzY6MjMgKzA5MDAKU3ViamVjdDogW1BB
VENIIDEwLzEwXSBrYnVpbGQ6IHN1cHBvcnQgTExWTT0xIHRvIHN3aXRjaCB0aGUgZGVmYXVsdCB0
b29scyB0bwogQ2xhbmcvTExWTQoKY29tbWl0IGEwZDFjOTUxZWYwOGVkMjRmMzUxMjkyNjdlMzU5
NWQ4NmY1N2Y1ZDMgdXBzdHJlYW0uCgpBcyBEb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdCBp
bXBsaWVzLCBidWlsZGluZyB0aGUga2VybmVsIHdpdGggYQpmdWxsIHNldCBvZiBMTFZNIHRvb2xz
IGdldHMgdmVyeSB2ZXJib3NlIGFuZCB1bndpZWxkeS4KClByb3ZpZGUgYSBzaW5nbGUgc3dpdGNo
IExMVk09MSB0byB1c2UgQ2xhbmcgYW5kIExMVk0gdG9vbHMgaW5zdGVhZApvZiBHQ0MgYW5kIEJp
bnV0aWxzLiBZb3UgY2FuIHBhc3MgaXQgZnJvbSB0aGUgY29tbWFuZCBsaW5lIG9yIGFzIGFuCmVu
dmlyb25tZW50IHZhcmlhYmxlLgoKUGxlYXNlIG5vdGUgTExWTT0xIGRvZXMgbm90IHR1cm4gb24g
dGhlIGludGVncmF0ZWQgYXNzZW1ibGVyLiBZb3UgbmVlZAp0byBwYXNzIExMVk1fSUFTPTEgdG8g
dXNlIGl0LiBXaGVuIHRoZSB1cHN0cmVhbSBrZXJuZWwgaXMgcmVhZHkgZm9yIHRoZQppbnRlZ3Jh
dGVkIGFzc2VtYmxlciwgSSB0aGluayB3ZSBjYW4gbWFrZSBpdCBkZWZhdWx0LgoKV2UgZGlzY3Vz
c2VkIHdoYXQgd2UgbmVlZCwgYW5kIHdlIGFncmVlZCB0byBnbyB3aXRoIGEgc2ltcGxlIGJvb2xl
YW4KZmxhZyB0aGF0IHN3aXRjaGVzIGJvdGggdGFyZ2V0IGFuZCBob3N0IHRvb2xzOgoKICBodHRw
czovL2xrbWwub3JnL2xrbWwvMjAyMC8zLzI4LzQ5NAogIGh0dHBzOi8vbGttbC5vcmcvbGttbC8y
MDIwLzQvMy80MwoKU29tZSBpdGVtcyBkaXNjdXNzZWQsIGJ1dCBub3QgYWRvcHRlZDoKCi0gTExW
TV9ESVIKCiAgV2hlbiBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBMTFZNIGFyZSBpbnN0YWxsZWQsIEkg
anVzdCB0aG91Z2h0IHN1cHBvcnRpbmcKICBMTFZNX0RJUj0vcGF0aC90by9teS9sbHZtL2Jpbi8g
bWlnaHQgYmUgdXNlZnVsLgoKICBDQyAgICAgID0gJChMTFZNX0RJUiljbGFuZwogIExEICAgICAg
PSAkKExMVk1fRElSKWxkLmxsZAogICAgLi4uCgogIEhvd2V2ZXIsIHdlIGNhbiBoYW5kbGUgdGhp
cyBieSBtb2RpZnlpbmcgUEFUSC4gU28sIHdlIGRlY2lkZWQgdG8gbm90IGRvCiAgdGhpcy4KCi0g
TExWTV9TVUZGSVgKCiAgU29tZSBkaXN0cmlidXRpb25zIChlLmcuIERlYmlhbikgcGFja2FnZSBz
cGVjaWZpYyB2ZXJzaW9ucyBvZiBMTFZNIHdpdGgKICBuYW1pbmcgY29udmVudGlvbnMgdGhhdCB1
c2UgdGhlIHZlcnNpb24gYXMgYSBzdWZmaXguCgogIENDICAgICAgPSBjbGFuZyQoTExWTV9TVUZG
SVgpCiAgTEQgICAgICA9IGxkLmxsZChMTFZNX1NVRkZJWCkKICAgIC4uLgoKICB3aWxsIGFsbG93
IGEgdXNlciB0byBwYXNzIExMVk1fU1VGRklYPS0xMSB0byB1c2UgY2xhbmctMTEgZXRjLiwKICBi
dXQgdGhlIHN1ZmZpeGVkIHZlcnNpb25zIGluIC91c3IvYmluLyBhcmUgc3ltbGlua3MgdG8gYmlu
YXJpZXMgaW4KICAvdXNyL2xpYi9sbHZtLSMvYmluLywgc28gdGhpcyBjYW4gYWxzbyBiZSBoYW5k
bGVkIGJ5IFBBVEguCgpTaWduZWQtb2ZmLWJ5OiBNYXNhaGlybyBZYW1hZGEgPG1hc2FoaXJveUBr
ZXJuZWwub3JnPgpSZXZpZXdlZC1ieTogTmF0aGFuIENoYW5jZWxsb3IgPG5hdGVjaGFuY2VsbG9y
QGdtYWlsLmNvbT4KVGVzdGVkLWJ5OiBOYXRoYW4gQ2hhbmNlbGxvciA8bmF0ZWNoYW5jZWxsb3JA
Z21haWwuY29tPiAjIGJ1aWxkClRlc3RlZC1ieTogTmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5p
ZXJzQGdvb2dsZS5jb20+ClJldmlld2VkLWJ5OiBOaWNrIERlc2F1bG5pZXJzIDxuZGVzYXVsbmll
cnNAZ29vZ2xlLmNvbT4KU2lnbmVkLW9mZi1ieTogTmljayBEZXNhdWxuaWVycyA8bmRlc2F1bG5p
ZXJzQGdvb2dsZS5jb20+CltuZDogY29uZmxpY3QgaW4gZXhwb3J0ZWQgdmFycyBsaXN0IGZyb20g
bm90IGJhY2twb3J0aW5nIGNvbW1pdAogZTgzYjlmNTU0NDhhICgia2J1aWxkOiBhZGQgYWJpbGl0
eSB0byBnZW5lcmF0ZSBCVEYgdHlwZSBpbmZvIGZvciB2bWxpbnV4IildCltuZDogaHVuayBhZ2Fp
bnN0IERvY3VtZW50YXRpb24va2J1aWxkL2tidWlsZC5yc3QgZHJvcHBlZCBkdWUgdG8gbm90IGJh
Y2twb3J0aW5nCiBjb21taXQgY2QyMzhlZmZlZmEyICgiZG9jczoga2J1aWxkOiBjb252ZXJ0IGRv
Y3MgdG8gUmVTVCBhbmQgcmVuYW1lIHRvICoucnN0IildCi0tLQogRG9jdW1lbnRhdGlvbi9rYnVp
bGQvbGx2bS5yc3QgfCAgOCArKysrKystLQogTWFrZWZpbGUgICAgICAgICAgICAgICAgICAgICAg
fCAyOSArKysrKysrKysrKysrKysrKysrKysrKy0tLS0tLQogdG9vbHMvb2JqdG9vbC9NYWtlZmls
ZSAgICAgICAgfCAgNiArKysrKysKIDMgZmlsZXMgY2hhbmdlZCwgMzUgaW5zZXJ0aW9ucygrKSwg
OCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJz
dCBiL0RvY3VtZW50YXRpb24va2J1aWxkL2xsdm0ucnN0CmluZGV4IDQ1MDcwODUzNDg2MC4uYzc3
NmI2ZWVlOTY5IDEwMDY0NAotLS0gYS9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdAorKysg
Yi9Eb2N1bWVudGF0aW9uL2tidWlsZC9sbHZtLnJzdApAQCAtNDcsOCArNDcsMTIgQEAgZXhhbXBs
ZToKIExMVk0gVXRpbGl0aWVzCiAtLS0tLS0tLS0tLS0tLQogCi1MTFZNIGhhcyBzdWJzdGl0dXRl
cyBmb3IgR05VIGJpbnV0aWxzIHV0aWxpdGllcy4gVGhlc2UgY2FuIGJlIGludm9rZWQgYXMKLWFk
ZGl0aW9uYWwgcGFyYW1ldGVycyB0byBgbWFrZWAuCitMTFZNIGhhcyBzdWJzdGl0dXRlcyBmb3Ig
R05VIGJpbnV0aWxzIHV0aWxpdGllcy4gS2J1aWxkIHN1cHBvcnRzIGBMTFZNPTFgCit0byBlbmFi
bGUgdGhlbS4KKworCW1ha2UgTExWTT0xCisKK1RoZXkgY2FuIGJlIGVuYWJsZWQgaW5kaXZpZHVh
bGx5LiBUaGUgZnVsbCBsaXN0IG9mIHRoZSBwYXJhbWV0ZXJzOgogCiAJbWFrZSBDQz1jbGFuZyBM
RD1sZC5sbGQgQVI9bGx2bS1hciBOTT1sbHZtLW5tIFNUUklQPWxsdm0tc3RyaXAgXFwKIAkgIE9C
SkNPUFk9bGx2bS1vYmpjb3B5IE9CSkRVTVA9bGx2bS1vYmpkdW1wIE9CSlNJWkU9bGx2bS1zaXpl
IFxcCmRpZmYgLS1naXQgYS9NYWtlZmlsZSBiL01ha2VmaWxlCmluZGV4IDBlZTM2MGU5OGRlMS4u
OTgxMGNiYmEwY2VhIDEwMDY0NAotLS0gYS9NYWtlZmlsZQorKysgYi9NYWtlZmlsZQpAQCAtMzU4
LDggKzM1OCwxMyBAQCBIT1NUX0xGU19DRkxBR1MgOj0gJChzaGVsbCBnZXRjb25mIExGU19DRkxB
R1MgMj4vZGV2L251bGwpCiBIT1NUX0xGU19MREZMQUdTIDo9ICQoc2hlbGwgZ2V0Y29uZiBMRlNf
TERGTEFHUyAyPi9kZXYvbnVsbCkKIEhPU1RfTEZTX0xJQlMgOj0gJChzaGVsbCBnZXRjb25mIExG
U19MSUJTIDI+L2Rldi9udWxsKQogCi1IT1NUQ0MgICAgICAgPSBnY2MKLUhPU1RDWFggICAgICA9
IGcrKworaWZuZXEgKCQoTExWTSksKQorSE9TVENDCT0gY2xhbmcKK0hPU1RDWFgJPSBjbGFuZysr
CitlbHNlCitIT1NUQ0MJPSBnY2MKK0hPU1RDWFgJPSBnKysKK2VuZGlmCiBLQlVJTERfSE9TVENG
TEFHUyAgIDo9IC1XYWxsIC1XbWlzc2luZy1wcm90b3R5cGVzIC1Xc3RyaWN0LXByb3RvdHlwZXMg
LU8yIFwKIAkJLWZvbWl0LWZyYW1lLXBvaW50ZXIgLXN0ZD1nbnU4OSAkKEhPU1RfTEZTX0NGTEFH
UykgXAogCQkkKEhPU1RDRkxBR1MpCkBAIC0zNjgsMTYgKzM3MywyOCBAQCBLQlVJTERfSE9TVExE
RkxBR1MgIDo9ICQoSE9TVF9MRlNfTERGTEFHUykgJChIT1NUTERGTEFHUykKIEtCVUlMRF9IT1NU
TERMSUJTICAgOj0gJChIT1NUX0xGU19MSUJTKSAkKEhPU1RMRExJQlMpCiAKICMgTWFrZSB2YXJp
YWJsZXMgKENDLCBldGMuLi4pCi1MRAkJPSAkKENST1NTX0NPTVBJTEUpbGQKLUNDCQk9ICQoQ1JP
U1NfQ09NUElMRSlnY2MKIENQUAkJPSAkKENDKSAtRQoraWZuZXEgKCQoTExWTSksKQorQ0MJCT0g
Y2xhbmcKK0xECQk9IGxkLmxsZAorQVIJCT0gbGx2bS1hcgorTk0JCT0gbGx2bS1ubQorT0JKQ09Q
WQkJPSBsbHZtLW9iamNvcHkKK09CSkRVTVAJCT0gbGx2bS1vYmpkdW1wCitSRUFERUxGCQk9IGxs
dm0tcmVhZGVsZgorT0JKU0laRQkJPSBsbHZtLXNpemUKK1NUUklQCQk9IGxsdm0tc3RyaXAKK2Vs
c2UKK0NDCQk9ICQoQ1JPU1NfQ09NUElMRSlnY2MKK0xECQk9ICQoQ1JPU1NfQ09NUElMRSlsZAog
QVIJCT0gJChDUk9TU19DT01QSUxFKWFyCiBOTQkJPSAkKENST1NTX0NPTVBJTEUpbm0KLVNUUklQ
CQk9ICQoQ1JPU1NfQ09NUElMRSlzdHJpcAogT0JKQ09QWQkJPSAkKENST1NTX0NPTVBJTEUpb2Jq
Y29weQogT0JKRFVNUAkJPSAkKENST1NTX0NPTVBJTEUpb2JqZHVtcAotT0JKU0laRQkJPSAkKENS
T1NTX0NPTVBJTEUpc2l6ZQogUkVBREVMRgkJPSAkKENST1NTX0NPTVBJTEUpcmVhZGVsZgorT0JK
U0laRQkJPSAkKENST1NTX0NPTVBJTEUpc2l6ZQorU1RSSVAJCT0gJChDUk9TU19DT01QSUxFKXN0
cmlwCitlbmRpZgogTEVYCQk9IGZsZXgKIFlBQ0MJCT0gYmlzb24KIEFXSwkJPSBhd2sKZGlmZiAt
LWdpdCBhL3Rvb2xzL29ianRvb2wvTWFrZWZpbGUgYi90b29scy9vYmp0b29sL01ha2VmaWxlCmlu
ZGV4IDIwZjY3ZmNmMzc4ZC4uYmFhOTIyNzljMTM3IDEwMDY0NAotLS0gYS90b29scy9vYmp0b29s
L01ha2VmaWxlCisrKyBiL3Rvb2xzL29ianRvb2wvTWFrZWZpbGUKQEAgLTcsOSArNywxNSBAQCBB
UkNIIDo9IHg4NgogZW5kaWYKIAogIyBhbHdheXMgdXNlIHRoZSBob3N0IGNvbXBpbGVyCitpZm5l
cSAoJChMTFZNKSwpCitIT1NUQVIJPz0gbGx2bS1hcgorSE9TVENDCT89IGNsYW5nCitIT1NUTEQJ
Pz0gbGQubGxkCitlbHNlCiBIT1NUQVIJPz0gYXIKIEhPU1RDQwk/PSBnY2MKIEhPU1RMRAk/PSBs
ZAorZW5kaWYKIEFSCSA9ICQoSE9TVEFSKQogQ0MJID0gJChIT1NUQ0MpCiBMRAkgPSAkKEhPU1RM
RCkKLS0gCjIuMjguMC42ODEuZzZmNzdmNjViNGUtZ29vZwoK
--0000000000001fadbd05b01811d2--
