Return-Path: <stable-owner@vger.kernel.org>
X-Original-To: lists+stable@lfdr.de
Delivered-To: lists+stable@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 2D79A396C8B
	for <lists+stable@lfdr.de>; Tue,  1 Jun 2021 06:58:46 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S230170AbhFAFAZ (ORCPT <rfc822;lists+stable@lfdr.de>);
        Tue, 1 Jun 2021 01:00:25 -0400
Received: from mail.kernel.org ([198.145.29.99]:46708 "EHLO mail.kernel.org"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S229477AbhFAFAZ (ORCPT <rfc822;stable@vger.kernel.org>);
        Tue, 1 Jun 2021 01:00:25 -0400
Received: by mail.kernel.org (Postfix) with ESMTPSA id 5666A61370;
        Tue,  1 Jun 2021 04:58:44 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1622523524;
        bh=CPHBt8d6ucu1q+bvvc6LslW8WH9yv6H8mYh3HvVonDY=;
        h=Subject:To:Cc:References:From:Date:In-Reply-To:From;
        b=NClhJJ0OAYy8MPJf7CEDxDWORdCiHEIx//P7RCZdaC7zZsHll3CQoyAenrkXCiUIe
         S0SmhmD2imhjfEWt/x1duHvMbhXpirOb0BrLEfj5g8dChUj8CnWn1LRXqpsSqTErpz
         t+7+sTa2aNogw7AEJYZ5pQ5OVL3QUukI0TRvogk5MuWMah8N4Df9ZHLknyDP1eohhj
         V962rPSbOAIKKA06mp8CaxLHqHDnaZ0zSQNiEWgXUucLly8mw4UNhaPrARRRqiSRvn
         SgAKlH6Ps37x2OpmB5FOQx8+WhZGEUJR3ubMA6+AjhZ/dmLG3a2437ernCmvSdXUbU
         CmR0be7f/ukmg==
Subject: Re: [RFC v2 1/2] x86/fpu: Fix state corruption in
 __fpu__restore_sig()
To:     Thomas Gleixner <tglx@linutronix.de>,
        the arch/x86 maintainers <x86@kernel.org>
Cc:     Dave Hansen <dave.hansen@intel.com>, stable@vger.kernel.org,
        syzbot+2067e764dbcd10721e2e@syzkaller.appspotmail.com
References: <878s3u34iy.ffs@nanos.tec.linutronix.de>
From:   Andy Lutomirski <luto@kernel.org>
Message-ID: <603011b5-9479-3aac-78ee-74b9b5a5ef7c@kernel.org>
Date:   Mon, 31 May 2021 21:58:43 -0700
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101
 Thunderbird/78.10.1
MIME-Version: 1.0
In-Reply-To: <878s3u34iy.ffs@nanos.tec.linutronix.de>
Content-Type: multipart/mixed;
 boundary="------------686200B77A971DA2BDFA4281"
Content-Language: en-US
Precedence: bulk
List-ID: <stable.vger.kernel.org>
X-Mailing-List: stable@vger.kernel.org

This is a multi-part message in MIME format.
--------------686200B77A971DA2BDFA4281
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit

On 5/31/21 3:46 PM, Thomas Gleixner wrote:
> On Mon, May 31 2021 at 12:30, Andy Lutomirski wrote:
>> On Mon, May 31, 2021, at 11:56 AM, Thomas Gleixner wrote:
>>> And of course there is:
>>>
>>> __fpu__restore_sig()
>>>
>>> 	if (!buf) {
>>>                 fpu__clear_user_states(fpu);
>>>                 return 0;
>>>         }
>>>
>>> and
>>>
>>> handle_signal()
>>>
>>>    if (!failed)
>>>       fpu__clear_user_states(fpu);
>>
>> This looks okay.
> 
> Looks okay is meh... That other stuff obviously looked okay as well...
> 
> That FPU code is an unpenetrable mess.
> 
>> Really there are two callers of fpu__clear_all() that are special:
>>
>> execve: Just in case some part of the xstate buffer mode thatâ€™s
>> supposed to be invariant got corrupted or in case there is some side
>> channel that can leak the INIT-but-not-zeroed contents of a state to
>> user code, we should really wipe the memory completely across
>> privilege boundaries.
>>
>> __fpu__restore_sig: the utterly daft copy from user space needs
>> special recovery.
>>
>> Maybe the right solution is to rename it. Instead of fpu__clear_all(),
>> how about fpu__wipe_and_reset()?
> 
> The right solution is to just use copy_user_to_xstate() unconditionally.
> 
> That fixes the issue even without cleaning up that fpu_clear() mess
> which we want to do nevertheless.
> 
> I have a similar fix for the related xstateregs_set() trainwreck, but
> that really needs to allocate a buffer because it's operating on a
> different task contrary to signal handling.
> 
> I'm too tired now to test the xstateregs_set() muck, but if you want to
> have a look:
> 
>      https://tglx.de/~tglx/patches.tar
> 
> Thanks,
> 
>         tglx
> ---
> --- a/arch/x86/include/asm/fpu/xstate.h
> +++ b/arch/x86/include/asm/fpu/xstate.h
> @@ -112,8 +112,4 @@ void copy_supervisor_to_kernel(struct xr
>  void copy_dynamic_supervisor_to_kernel(struct xregs_state *xstate, u64 mask);
>  void copy_kernel_to_dynamic_supervisor(struct xregs_state *xstate, u64 mask);
>  
> -
> -/* Validate an xstate header supplied by userspace (ptrace or sigreturn) */
> -int validate_user_xstate_header(const struct xstate_header *hdr);
> -
>  #endif
> --- a/arch/x86/kernel/fpu/signal.c
> +++ b/arch/x86/kernel/fpu/signal.c
> @@ -405,14 +405,7 @@ static int __fpu__restore_sig(void __use
>  	if (use_xsave() && !fx_only) {
>  		u64 init_bv = xfeatures_mask_user() & ~user_xfeatures;
>  
> -		if (using_compacted_format()) {
> -			ret = copy_user_to_xstate(&fpu->state.xsave, buf_fx);
> -		} else {
> -			ret = __copy_from_user(&fpu->state.xsave, buf_fx, state_size);
> -
> -			if (!ret && state_size > offsetof(struct xregs_state, header))
> -				ret = validate_user_xstate_header(&fpu->state.xsave.header);
> -		}
> +		ret = copy_user_to_xstate(&fpu->state.xsave, buf_fx);
>  		if (ret)
>  			goto err_out;
>  
> --- a/arch/x86/kernel/fpu/xstate.c
> +++ b/arch/x86/kernel/fpu/xstate.c
> @@ -515,7 +515,7 @@ int using_compacted_format(void)
>  }
>  
>  /* Validate an xstate header supplied by userspace (ptrace or sigreturn) */
> -int validate_user_xstate_header(const struct xstate_header *hdr)
> +static int validate_user_xstate_header(const struct xstate_header *hdr)
>  {
>  	/* No unknown or supervisor features may be set */
>  	if (hdr->xfeatures & ~xfeatures_mask_user())
> 

I like it.

Here's my current patch pile.  Not even really compile tested -- it's
bedtime.  Your patch is copied in verbatim.

--------------686200B77A971DA2BDFA4281
Content-Type: application/x-tar;
 name="my-patches.tar"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="my-patches.tar"

cGF0Y2hlcy9mcHUvdjMtMDAwMS1zZWxmdGVzdHMteDg2LVRlc3Qtc2lnbmFsLWZyYW1lLVhT
VEFURS1oZWFkZXItY29yLnBhdGNoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQA
MDAwMTc1MAAwMDAxNzUwADAwMDAwMDA3MTAyADE0MDU1MzM3MDU0ADAyNDcxNgAgMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGx1dG8A
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbHV0bwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGcm9tIDY5MWVjZTMwYjJlYzI1NTgyODcxODVm
ZmJkNjg3MWEzMmUyODI2OGYgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCk1lc3NhZ2UtSWQ6
IDw2OTFlY2UzMGIyZWMyNTU4Mjg3MTg1ZmZiZDY4NzFhMzJlMjgyNjhmLjE2MjI1MjM0MzYu
Z2l0Lmx1dG9Aa2VybmVsLm9yZz4KRnJvbTogQW5keSBMdXRvbWlyc2tpIDxsdXRvQGtlcm5l
bC5vcmc+CkRhdGU6IFN1biwgMzAgTWF5IDIwMjEgMTY6MzM6MTQgLTA3MDAKU3ViamVjdDog
W1BBVENIIHYzIDEvNV0gc2VsZnRlc3RzL3g4NjogVGVzdCBzaWduYWwgZnJhbWUgWFNUQVRF
IGhlYWRlcgogY29ycnVwdGlvbgoKVGhpcyBpcyB2ZXJ5IGhlYXZpbHkgYmFzZWQgb24gc29t
ZSBjb2RlIGZyb20gVGhvbWFzIEdsZWl4bmVyLiAgT24gYSBzeXN0ZW0Kd2l0aG91dCBYU0FW
RVMsIGl0IHdhcm5zIHdpdGg6CgogICAgQmFkIEZQVSBzdGF0ZSBkZXRlY3RlZCBhdCBjb3B5
X2tlcm5lbF90b19mcHJlZ3MrMHgyZi8weDQwLCByZWluaXRpYWxpemluZyBGUFUgcmVnaXN0
ZXJzLgoKU2lnbmVkLW9mZi1ieTogQW5keSBMdXRvbWlyc2tpIDxsdXRvQGtlcm5lbC5vcmc+
Ci0tLQogdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMveDg2L01ha2VmaWxlICAgICAgICAgIHwg
IDMgKy0KIC4uLi9zZWxmdGVzdHMveDg2L2NvcnJ1cHRfeHN0YXRlX2hlYWRlci5jICAgICB8
IDgwICsrKysrKysrKysrKysrKysrKysKIDIgZmlsZXMgY2hhbmdlZCwgODIgaW5zZXJ0aW9u
cygrKSwgMSBkZWxldGlvbigtKQogY3JlYXRlIG1vZGUgMTAwNjQ0IHRvb2xzL3Rlc3Rpbmcv
c2VsZnRlc3RzL3g4Ni9jb3JydXB0X3hzdGF0ZV9oZWFkZXIuYwoKZGlmZiAtLWdpdCBhL3Rv
b2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL3g4Ni9NYWtlZmlsZSBiL3Rvb2xzL3Rlc3Rpbmcvc2Vs
ZnRlc3RzL3g4Ni9NYWtlZmlsZQppbmRleCAzMzM5ODAzNzViYzcuLmY1OWMyZTVmMDM2NCAx
MDA2NDQKLS0tIGEvdG9vbHMvdGVzdGluZy9zZWxmdGVzdHMveDg2L01ha2VmaWxlCisrKyBi
L3Rvb2xzL3Rlc3Rpbmcvc2VsZnRlc3RzL3g4Ni9NYWtlZmlsZQpAQCAtMTcsNyArMTcsOCBA
QCBUQVJHRVRTX0NfQk9USEJJVFMgOj0gc2luZ2xlX3N0ZXBfc3lzY2FsbCBzeXNyZXRfc3Nf
YXR0cnMgc3lzY2FsbF9udCB0ZXN0X21yZW1hcAogVEFSR0VUU19DXzMyQklUX09OTFkgOj0g
ZW50cnlfZnJvbV92bTg2IHRlc3Rfc3lzY2FsbF92ZHNvIHVud2luZF92ZHNvIFwKIAkJCXRl
c3RfRkNNT1YgdGVzdF9GQ09NSSB0ZXN0X0ZJU1RUUCBcCiAJCQl2ZHNvX3Jlc3RvcmVyCi1U
QVJHRVRTX0NfNjRCSVRfT05MWSA6PSBmc2dzYmFzZSBzeXNyZXRfcmlwIHN5c2NhbGxfbnVt
YmVyaW5nCitUQVJHRVRTX0NfNjRCSVRfT05MWSA6PSBmc2dzYmFzZSBzeXNyZXRfcmlwIHN5
c2NhbGxfbnVtYmVyaW5nIFwKKwkJCWNvcnJ1cHRfeHN0YXRlX2hlYWRlcgogIyBTb21lIHNl
bGZ0ZXN0cyByZXF1aXJlIDMyYml0IHN1cHBvcnQgZW5hYmxlZCBhbHNvIG9uIDY0Yml0IHN5
c3RlbXMKIFRBUkdFVFNfQ18zMkJJVF9ORUVERUQgOj0gbGR0X2dkdCBwdHJhY2Vfc3lzY2Fs
bAogCmRpZmYgLS1naXQgYS90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy94ODYvY29ycnVwdF94
c3RhdGVfaGVhZGVyLmMgYi90b29scy90ZXN0aW5nL3NlbGZ0ZXN0cy94ODYvY29ycnVwdF94
c3RhdGVfaGVhZGVyLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAw
Li45NzRlZGE5ZTc4OGEKLS0tIC9kZXYvbnVsbAorKysgYi90b29scy90ZXN0aW5nL3NlbGZ0
ZXN0cy94ODYvY29ycnVwdF94c3RhdGVfaGVhZGVyLmMKQEAgLTAsMCArMSw4MCBAQAorLy8g
U1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAtb25seQorLyoKKyAqIGNvcnJ1cHRf
eHN0YXRlX2hlYWRlci5jIC0gQ29ycnVwdCB0aGUgWFNUQVRFIGhlYWRlciBpbiBhIHNpZ25h
bCBmcmFtZQorICoKKyAqIEJhc2VkIG9uIGFuYWx5c2lzIGFuZCBhIHRlc3QgY2FzZSBmcm9t
IFRob21hcyBHbGVpeG5lci4KKyAqLworCisjZGVmaW5lIF9HTlVfU09VUkNFCisKKyNpbmNs
dWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxzdGRpby5oPgorI2luY2x1ZGUgPHN0cmluZy5o
PgorI2luY2x1ZGUgPHNjaGVkLmg+CisjaW5jbHVkZSA8c2lnbmFsLmg+CisjaW5jbHVkZSA8
ZXJyLmg+CisjaW5jbHVkZSA8dW5pc3RkLmg+CisjaW5jbHVkZSA8c3RkaW50Lmg+CisjaW5j
bHVkZSA8c3lzL3dhaXQuaD4KKworc3RhdGljIHZvaWQgc2V0aGFuZGxlcihpbnQgc2lnLCB2
b2lkICgqaGFuZGxlcikoaW50LCBzaWdpbmZvX3QgKiwgdm9pZCAqKSwKKwkJICAgICAgIGlu
dCBmbGFncykKK3sKKwlzdHJ1Y3Qgc2lnYWN0aW9uIHNhOworCW1lbXNldCgmc2EsIDAsIHNp
emVvZihzYSkpOworCXNhLnNhX3NpZ2FjdGlvbiA9IGhhbmRsZXI7CisJc2Euc2FfZmxhZ3Mg
PSBTQV9TSUdJTkZPIHwgZmxhZ3M7CisJc2lnZW1wdHlzZXQoJnNhLnNhX21hc2spOworCWlm
IChzaWdhY3Rpb24oc2lnLCAmc2EsIDApKQorCQllcnIoMSwgInNpZ2FjdGlvbiIpOworfQor
CitzdGF0aWMgdm9pZCBzaWd1c3IxKGludCBzaWcsIHNpZ2luZm9fdCAqaW5mbywgdm9pZCAq
dWNfdm9pZCkKK3sKKwl1Y29udGV4dF90ICp1YyA9IHVjX3ZvaWQ7CisJdWludDhfdCAqZnBz
dGF0ZSA9ICh1aW50OF90ICopdWMtPnVjX21jb250ZXh0LmZwcmVnczsKKwl1aW50NjRfdCAq
eGZlYXR1cmVzID0gKHVpbnQ2NF90ICopKGZwc3RhdGUgKyA1MTIpOworCisJcHJpbnRmKCJc
dE9yaWdpbmFsIFhGRUFUVVJFUyA9IDB4JWx4XG4iLCAqeGZlYXR1cmVzKTsKKwkqKHhmZWF0
dXJlcysyKSA9IDB4ZmZmZmZmZjsKKwkvLyp4ZmVhdHVyZXMgPSB+KHVpbnQ2NF90KTA7Cit9
CisKK3N0YXRpYyB2b2lkIHNpZ3NlZ3YoaW50IHNpZywgc2lnaW5mb190ICppbmZvLCB2b2lk
ICp1Y192b2lkKQoreworCXByaW50ZigiXHRHb3QgU0lHU0VHVlxuIik7Cit9CisKK2ludCBt
YWluKCkKK3sKKwljcHVfc2V0X3Qgc2V0OworCisJc2V0aGFuZGxlcihTSUdVU1IxLCBzaWd1
c3IxLCAwKTsKKwlzZXRoYW5kbGVyKFNJR1NFR1YsIHNpZ3NlZ3YsIDApOworCisJQ1BVX1pF
Uk8oJnNldCk7CisJQ1BVX1NFVCgwLCAmc2V0KTsKKworCXNjaGVkX3NldGFmZmluaXR5KGdl
dHBpZCgpLCBzaXplb2Yoc2V0KSwgJnNldCk7CisKKwlwcmludGYoIltSVU5dXHRTZW5kIG91
cnNlbHZlcyBhIHNpZ25hbFxuIik7CisJcmFpc2UoU0lHVVNSMSk7CisKKwlwcmludGYoIltP
S11cdEJhY2sgZnJvbSB0aGUgc2lnbmFsLiAgTm93IHNjaGVkdWxlLlxuIik7CisJcGlkX3Qg
Y2hpbGQgPSBmb3JrKCk7CisJaWYgKGNoaWxkIDwgMCkKKwkJZXJyKDEsICJmb3JrIik7CisJ
aWYgKGNoaWxkID09IDApCisJCXJldHVybiAwOworCWlmIChjaGlsZCkKKwkJd2FpdHBpZChj
aGlsZCwgTlVMTCwgMCk7CisJcHJpbnRmKCJbT0tdXHRCYWNrIGluIHRoZSBtYWluIHRocmVh
ZC5cbiIpOworCisJLyoKKwkgKiBXZSBjb3VsZCB0cnkgdG8gY29uZmlybSB0aGF0IGV4dGVu
ZGVkIHN0YXRlIGlzIHN0aWxsIHByZXNlcnZlZAorCSAqIHdoZW4gd2Ugc2NoZWR1bGUuICBG
b3Igbm93LCB0aGUgb25seSBpbmRpY2F0aW9uIG9mIGZhaWx1cmUgaXMKKwkgKiBhIHdhcm5p
bmcgaW4gdGhlIGtlcm5lbCBsb2dzLgorCSAqLworCisJcmV0dXJuIDA7Cit9Ci0tIAoyLjMx
LjEKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAcGF0Y2hlcy9mcHUvdjMtMDAwMi14ODYtZnB1LUZpeC1zdGF0
ZS1jb3JydXB0aW9uLWluLV9fZnB1X19yZXN0b3JlX3NpLnBhdGNoAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAxNzUwADAwMDAwMDA2NzIzADE0MDU1MzM3
MDU0ADAyNTM0MwAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAB1c3RhciAgAGx1dG8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbHV0bwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGcm9tIDZjODZk
MGEyYjhhMTZmNThmOTUwN2Y0NjZiNjgyYTZlYTJhMzJiOTcgTW9uIFNlcCAxNyAwMDowMDow
MCAyMDAxCk1lc3NhZ2UtSWQ6IDw2Yzg2ZDBhMmI4YTE2ZjU4Zjk1MDdmNDY2YjY4MmE2ZWEy
YTMyYjk3LjE2MjI1MjM0MzYuZ2l0Lmx1dG9Aa2VybmVsLm9yZz4KSW4tUmVwbHktVG86IDw2
OTFlY2UzMGIyZWMyNTU4Mjg3MTg1ZmZiZDY4NzFhMzJlMjgyNjhmLjE2MjI1MjM0MzYuZ2l0
Lmx1dG9Aa2VybmVsLm9yZz4KUmVmZXJlbmNlczogPDY5MWVjZTMwYjJlYzI1NTgyODcxODVm
ZmJkNjg3MWEzMmUyODI2OGYuMTYyMjUyMzQzNi5naXQubHV0b0BrZXJuZWwub3JnPgpGcm9t
OiBBbmR5IEx1dG9taXJza2kgPGx1dG9Aa2VybmVsLm9yZz4KRGF0ZTogTW9uLCAzMSBNYXkg
MjAyMSAyMToyNjo1OSAtMDcwMApTdWJqZWN0OiBbUEFUQ0ggdjMgMi81XSB4ODYvZnB1OiBG
aXggc3RhdGUgY29ycnVwdGlvbiBpbiBfX2ZwdV9fcmVzdG9yZV9zaWcoKQoKUHJpb3IgdG8g
YWRkaW5nIFhTQVZFUyBzdXBwb3J0LCBzb21lIG9mIGZwdV9fY2xlYXIoKSdzIGNhbGxlcnMg
cmVxdWlyZWQKdGhhdCBmcHVfX2NsZWFyKCkgc3VjY2Vzc2Z1bGx5IHJlc2V0IGN1cnJlbnQn
cyBGUFUgc3RhdGUgZXZlbiBpZgpjdXJyZW50J3MgWFNBVkUgaGVhZGVyIHdhcyBjb3JydXB0
LiAgY29tbWl0IGI4NjBlYjhkY2U1OQooIng4Ni9mcHUveHN0YXRlOiBEZWZpbmUgbmV3IGZ1
bmN0aW9ucyBmb3IgY2xlYXJpbmcgZnByZWdzIGFuZCB4c3RhdGVzIikKc3BsaXQgZnB1X19j
bGVhcigpIGludG8gdHdvIGRpZmZlcmVudCBmdW5jdGlvbnMsIG5laXRoZXIgb2Ygd2hpY2gg
d2FzCmNhcGFibGUgb2YgY29ycmVjdGx5IGhhbmRsaW5nIGEgY29ycnVwdCBoZWFkZXIuCgpJ
bnN0ZWFkIG9mIHRyeWluZyB0byBnaXZlIHNlbnNpYmxlIHNlbWFudGljcyB0byB0aGUgZnB1
IGNsZWFyIGZ1bmN0aW9ucwppbiB0aGUgcHJlc2VuY2Ugb2YgWFNBVkUgaGVhZGVyIGNvcnJ1
cHRpb24sIHNpbXBseSBhdm9pZCBjb3JydXB0aW5nIHRoZQpoZWFkZXIgaW4gdGhlIGZpcnN0
IHBsYWNlIGJ5IHVzaW5nIGNvcHlfdXNlcl90b194c3RhdGUoKS4KCkNjOiBzdGFibGVAdmdl
ci5rZXJuZWwub3JnCkRlYnVnZ2VkLWJ5OiBUaG9tYXMgR2xlaXhuZXIgPHRnbHhAbGludXRy
b25peC5kZT4KRml4ZXM6IGI4NjBlYjhkY2U1OSAoIng4Ni9mcHUveHN0YXRlOiBEZWZpbmUg
bmV3IGZ1bmN0aW9ucyBmb3IgY2xlYXJpbmcgZnByZWdzIGFuZCB4c3RhdGVzIikKUmVwb3J0
ZWQtYnk6IHN5emJvdCsyMDY3ZTc2NGRiY2QxMDcyMWUyZUBzeXprYWxsZXIuYXBwc3BvdG1h
aWwuY29tClNpZ25lZC1vZmYtYnk6IEFuZHkgTHV0b21pcnNraSA8bHV0b0BrZXJuZWwub3Jn
PgpbdGdseCwgc2lnbiB0aGlzLiAgdGhpcyBpcyB5b3VyIHBhdGNoXQotLS0KIGFyY2gveDg2
L2luY2x1ZGUvYXNtL2ZwdS94c3RhdGUuaCB8IDQgLS0tLQogYXJjaC94ODYva2VybmVsL2Zw
dS9zaWduYWwuYyAgICAgIHwgOSArLS0tLS0tLS0KIGFyY2gveDg2L2tlcm5lbC9mcHUveHN0
YXRlLmMgICAgICB8IDIgKy0KIDMgZmlsZXMgY2hhbmdlZCwgMiBpbnNlcnRpb25zKCspLCAx
MyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9mcHUv
eHN0YXRlLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9mcHUveHN0YXRlLmgKaW5kZXggNDdh
OTIyMzJkNTk1Li5mNGM1YmFkMmE4OWIgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUv
YXNtL2ZwdS94c3RhdGUuaAorKysgYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9mcHUveHN0YXRl
LmgKQEAgLTExMiw4ICsxMTIsNCBAQCB2b2lkIGNvcHlfc3VwZXJ2aXNvcl90b19rZXJuZWwo
c3RydWN0IHhyZWdzX3N0YXRlICp4c2F2ZSk7CiB2b2lkIGNvcHlfZHluYW1pY19zdXBlcnZp
c29yX3RvX2tlcm5lbChzdHJ1Y3QgeHJlZ3Nfc3RhdGUgKnhzdGF0ZSwgdTY0IG1hc2spOwog
dm9pZCBjb3B5X2tlcm5lbF90b19keW5hbWljX3N1cGVydmlzb3Ioc3RydWN0IHhyZWdzX3N0
YXRlICp4c3RhdGUsIHU2NCBtYXNrKTsKIAotCi0vKiBWYWxpZGF0ZSBhbiB4c3RhdGUgaGVh
ZGVyIHN1cHBsaWVkIGJ5IHVzZXJzcGFjZSAocHRyYWNlIG9yIHNpZ3JldHVybikgKi8KLWlu
dCB2YWxpZGF0ZV91c2VyX3hzdGF0ZV9oZWFkZXIoY29uc3Qgc3RydWN0IHhzdGF0ZV9oZWFk
ZXIgKmhkcik7Ci0KICNlbmRpZgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2VybmVsL2ZwdS9z
aWduYWwuYyBiL2FyY2gveDg2L2tlcm5lbC9mcHUvc2lnbmFsLmMKaW5kZXggYTRlYzY1MzE3
YTdmLi5kNWJjOTZhNTM2YzIgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2tlcm5lbC9mcHUvc2ln
bmFsLmMKKysrIGIvYXJjaC94ODYva2VybmVsL2ZwdS9zaWduYWwuYwpAQCAtNDA1LDE0ICs0
MDUsNyBAQCBzdGF0aWMgaW50IF9fZnB1X19yZXN0b3JlX3NpZyh2b2lkIF9fdXNlciAqYnVm
LCB2b2lkIF9fdXNlciAqYnVmX2Z4LCBpbnQgc2l6ZSkKIAlpZiAodXNlX3hzYXZlKCkgJiYg
IWZ4X29ubHkpIHsKIAkJdTY0IGluaXRfYnYgPSB4ZmVhdHVyZXNfbWFza191c2VyKCkgJiB+
dXNlcl94ZmVhdHVyZXM7CiAKLQkJaWYgKHVzaW5nX2NvbXBhY3RlZF9mb3JtYXQoKSkgewot
CQkJcmV0ID0gY29weV91c2VyX3RvX3hzdGF0ZSgmZnB1LT5zdGF0ZS54c2F2ZSwgYnVmX2Z4
KTsKLQkJfSBlbHNlIHsKLQkJCXJldCA9IF9fY29weV9mcm9tX3VzZXIoJmZwdS0+c3RhdGUu
eHNhdmUsIGJ1Zl9meCwgc3RhdGVfc2l6ZSk7Ci0KLQkJCWlmICghcmV0ICYmIHN0YXRlX3Np
emUgPiBvZmZzZXRvZihzdHJ1Y3QgeHJlZ3Nfc3RhdGUsIGhlYWRlcikpCi0JCQkJcmV0ID0g
dmFsaWRhdGVfdXNlcl94c3RhdGVfaGVhZGVyKCZmcHUtPnN0YXRlLnhzYXZlLmhlYWRlcik7
Ci0JCX0KKwkJcmV0ID0gY29weV91c2VyX3RvX3hzdGF0ZSgmZnB1LT5zdGF0ZS54c2F2ZSwg
YnVmX2Z4KTsKIAkJaWYgKHJldCkKIAkJCWdvdG8gZXJyX291dDsKIApkaWZmIC0tZ2l0IGEv
YXJjaC94ODYva2VybmVsL2ZwdS94c3RhdGUuYyBiL2FyY2gveDg2L2tlcm5lbC9mcHUveHN0
YXRlLmMKaW5kZXggYTg1YzY0MDAwMjE4Li44M2EzM2UyMGVhNWMgMTAwNjQ0Ci0tLSBhL2Fy
Y2gveDg2L2tlcm5lbC9mcHUveHN0YXRlLmMKKysrIGIvYXJjaC94ODYva2VybmVsL2ZwdS94
c3RhdGUuYwpAQCAtNTE1LDcgKzUxNSw3IEBAIGludCB1c2luZ19jb21wYWN0ZWRfZm9ybWF0
KHZvaWQpCiB9CiAKIC8qIFZhbGlkYXRlIGFuIHhzdGF0ZSBoZWFkZXIgc3VwcGxpZWQgYnkg
dXNlcnNwYWNlIChwdHJhY2Ugb3Igc2lncmV0dXJuKSAqLwotaW50IHZhbGlkYXRlX3VzZXJf
eHN0YXRlX2hlYWRlcihjb25zdCBzdHJ1Y3QgeHN0YXRlX2hlYWRlciAqaGRyKQorc3RhdGlj
IGludCB2YWxpZGF0ZV91c2VyX3hzdGF0ZV9oZWFkZXIoY29uc3Qgc3RydWN0IHhzdGF0ZV9o
ZWFkZXIgKmhkcikKIHsKIAkvKiBObyB1bmtub3duIG9yIHN1cGVydmlzb3IgZmVhdHVyZXMg
bWF5IGJlIHNldCAqLwogCWlmIChoZHItPnhmZWF0dXJlcyAmIH54ZmVhdHVyZXNfbWFza191
c2VyKCkpCi0tIAoyLjMxLjEKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHBhdGNoZXMvZnB1L3YzLTAwMDMteDg2LWZwdS1DbGVhbi11cC10aGUtZnB1
X19jbGVhci12YXJpYW50cy5wYXRjaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAwMDAwNjQ0ADAwMDE3NTAAMDAwMTc1MAAwMDAwMDAwNjczNQAxNDA1NTMzNzA1NAAwMjMz
NTYAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0
YXIgIABsdXRvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGx1dG8AAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARnJvbSBkOWJlZWE5YzA3ZDhj
N2E0MWU1MzVkNDU1YzM3NTY4NjczZTZiZjAzIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpN
ZXNzYWdlLUlkOiA8ZDliZWVhOWMwN2Q4YzdhNDFlNTM1ZDQ1NWMzNzU2ODY3M2U2YmYwMy4x
NjIyNTIzNDM2LmdpdC5sdXRvQGtlcm5lbC5vcmc+CkluLVJlcGx5LVRvOiA8NjkxZWNlMzBi
MmVjMjU1ODI4NzE4NWZmYmQ2ODcxYTMyZTI4MjY4Zi4xNjIyNTIzNDM2LmdpdC5sdXRvQGtl
cm5lbC5vcmc+ClJlZmVyZW5jZXM6IDw2OTFlY2UzMGIyZWMyNTU4Mjg3MTg1ZmZiZDY4NzFh
MzJlMjgyNjhmLjE2MjI1MjM0MzYuZ2l0Lmx1dG9Aa2VybmVsLm9yZz4KRnJvbTogQW5keSBM
dXRvbWlyc2tpIDxsdXRvQGtlcm5lbC5vcmc+CkRhdGU6IFRodSwgMjcgTWF5IDIwMjEgMTE6
MTA6NDkgLTA3MDAKU3ViamVjdDogW1BBVENIIHYzIDMvNV0geDg2L2ZwdTogQ2xlYW4gdXAg
dGhlIGZwdV9fY2xlYXIoKSB2YXJpYW50cwoKZnB1X19jbGVhcl9hbGwoKSBhbmQgZnB1X19j
bGVhcl91c2VyX3N0YXRlcygpIHNoYXJlIGFuIGltcGxlbWVudGF0aW9uLAphbmQgdGhlIHJl
c3VsdGluZyBjb2RlIGlzIGFsbW9zdCB1bnJlYWRhYmxlLiAgQ2xlYW4gaXQgdXAuCgpTaWdu
ZWQtb2ZmLWJ5OiBBbmR5IEx1dG9taXJza2kgPGx1dG9Aa2VybmVsLm9yZz4KLS0tCiBhcmNo
L3g4Ni9rZXJuZWwvZnB1L2NvcmUuYyB8IDYzICsrKysrKysrKysrKysrKysrKysrKysrKyst
LS0tLS0tLS0tLS0tCiAxIGZpbGUgY2hhbmdlZCwgNDIgaW5zZXJ0aW9ucygrKSwgMjEgZGVs
ZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2VybmVsL2ZwdS9jb3JlLmMgYi9h
cmNoL3g4Ni9rZXJuZWwvZnB1L2NvcmUuYwppbmRleCA1NzEyMjBhYzhiZWEuLmEwMWNiYjZh
MDhiYiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva2VybmVsL2ZwdS9jb3JlLmMKKysrIGIvYXJj
aC94ODYva2VybmVsL2ZwdS9jb3JlLmMKQEAgLTM1NCw0NSArMzU0LDY2IEBAIHN0YXRpYyBp
bmxpbmUgdm9pZCBjb3B5X2luaXRfZnBzdGF0ZV90b19mcHJlZ3ModTY0IGZlYXR1cmVzX21h
c2spCiB9CiAKIC8qCi0gKiBDbGVhciB0aGUgRlBVIHN0YXRlIGJhY2sgdG8gaW5pdCBzdGF0
ZS4KLSAqCi0gKiBDYWxsZWQgYnkgc3lzX2V4ZWN2ZSgpLCBieSB0aGUgc2lnbmFsIGhhbmRs
ZXIgY29kZSBhbmQgYnkgdmFyaW91cwotICogZXJyb3IgcGF0aHMuCisgKiBSZXNldCBjdXJy
ZW50J3MgdXNlciBGUFUgc3RhdGVzIHRvIHRoZSBpbml0IHN0YXRlcy4gIGN1cnJlbnQncyBz
dXBlcnZpc29yCisgKiBzdGF0ZXMsIGlmIGFueSwgYXJlIG5vdCBtb2RpZmllZCBieSB0aGlz
IGZ1bmN0aW9uLiAgVGhlIFhTVEFURSBoZWFkZXIKKyAqIGluIG1lbW9yeSBpcyBhc3N1bWVk
IHRvIGJlIGludGFjdCB3aGVuIHRoaXMgaXMgY2FsbGVkLgogICovCi1zdGF0aWMgdm9pZCBm
cHVfX2NsZWFyKHN0cnVjdCBmcHUgKmZwdSwgYm9vbCB1c2VyX29ubHkpCit2b2lkIGZwdV9f
Y2xlYXJfdXNlcl9zdGF0ZXMoc3RydWN0IGZwdSAqZnB1KQogewogCVdBUk5fT05fRlBVKGZw
dSAhPSAmY3VycmVudC0+dGhyZWFkLmZwdSk7CiAKIAlpZiAoIXN0YXRpY19jcHVfaGFzKFg4
Nl9GRUFUVVJFX0ZQVSkpIHsKLQkJZnB1X19kcm9wKGZwdSk7Ci0JCWZwdV9faW5pdGlhbGl6
ZShmcHUpOworCQlmcHVfX2NsZWFyX2FsbChmcHUpOwogCQlyZXR1cm47CiAJfQogCiAJZnBy
ZWdzX2xvY2soKTsKIAotCWlmICh1c2VyX29ubHkpIHsKLQkJaWYgKCFmcHJlZ3Nfc3RhdGVf
dmFsaWQoZnB1LCBzbXBfcHJvY2Vzc29yX2lkKCkpICYmCi0JCSAgICB4ZmVhdHVyZXNfbWFz
a19zdXBlcnZpc29yKCkpCi0JCQljb3B5X2tlcm5lbF90b194cmVncygmZnB1LT5zdGF0ZS54
c2F2ZSwKLQkJCQkJICAgICB4ZmVhdHVyZXNfbWFza19zdXBlcnZpc29yKCkpOwotCQljb3B5
X2luaXRfZnBzdGF0ZV90b19mcHJlZ3MoeGZlYXR1cmVzX21hc2tfdXNlcigpKTsKLQl9IGVs
c2UgewotCQljb3B5X2luaXRfZnBzdGF0ZV90b19mcHJlZ3MoeGZlYXR1cmVzX21hc2tfYWxs
KTsKLQl9CisJLyoKKwkgKiBFbnN1cmUgdGhhdCBjdXJyZW50J3Mgc3VwZXJ2aXNvciBzdGF0
ZXMgYXJlIGxvYWRlZCBpbnRvCisJICogdGhlaXIgY29ycmVzcG9uZGluZyByZWdpc3RlcnMu
CisJICovCisJaWYgKCFmcHJlZ3Nfc3RhdGVfdmFsaWQoZnB1LCBzbXBfcHJvY2Vzc29yX2lk
KCkpICYmCisJICAgIHhmZWF0dXJlc19tYXNrX3N1cGVydmlzb3IoKSkKKwkJY29weV9rZXJu
ZWxfdG9feHJlZ3MoJmZwdS0+c3RhdGUueHNhdmUsCisJCQkJICAgICB4ZmVhdHVyZXNfbWFz
a19zdXBlcnZpc29yKCkpOwogCisJLyoKKwkgKiBSZXNldCB1c2VyIHN0YXRlcyBpbiByZWdp
c3RlcnMuCisJICovCisJY29weV9pbml0X2Zwc3RhdGVfdG9fZnByZWdzKHhmZWF0dXJlc19t
YXNrX3VzZXIoKSk7CisKKwkvKgorCSAqIE5vdyBhbGwgRlBVIHJlZ2lzdGVycyBoYXZlIHRo
ZWlyIGRlc2lyZWQgdmFsdWVzLiAgSW5mb3JtIHRoZQorCSAqIEZQVSBzdGF0ZSBtYWNoaW5l
IHRoYXQgY3VycmVudCdzIEZQVSByZWdpc3RlcnMgYXJlIGluIHRoZQorCSAqIGhhcmR3YXJl
IHJlZ2lzdGVycy4KKwkgKi8KIAlmcHJlZ3NfbWFya19hY3RpdmF0ZSgpOworCiAJZnByZWdz
X3VubG9jaygpOwogfQogCi12b2lkIGZwdV9fY2xlYXJfdXNlcl9zdGF0ZXMoc3RydWN0IGZw
dSAqZnB1KQotewotCWZwdV9fY2xlYXIoZnB1LCB0cnVlKTsKLX0KIAorLyoKKyAqIFJlc2V0
IGN1cnJlbnQncyBGUFUgcmVnaXN0ZXJzICh1c2VyIGFuZCBzdXBlcnZpc29yKSB0byB0aGVp
ciBJTklUIHZhbHVlcy4KKyAqIFRoaXMgaXMgdXNlZCBieSBleGVjdmUoKTsgb3V0IG9mIGFu
IGFidW5kYW5jZSBvZiBjYXV0aW9uLCBpdCBjb21wbGV0ZWx5CisgKiB3aXBlcyBhbmQgcmVz
ZXRzIHRoZSBYU1RBVEUgYnVmZmVyIGluIG1lbW9yeS4KKyAqCisgKiBOb3RlIHRoYXQgWFNB
VkUgKHVubGlrZSBYU0FWRVMpIGV4cGVjdHMgdGhlIFhTVEFURSBidWZmZXIgaW4gbWVtb3J5
IHRvCisgKiBiZSB2YWxpZCwgc28gdGhlcmUgYXJlIGNlcnRhaW4gZm9ybXMgb2YgY29ycnVw
dGlvbiBvZiB0aGUgWFNUQVRFIGJ1ZmZlcgorICogaW4gbWVtb3J5IHRoYXQgd291bGQgc3Vy
dml2ZSBpbml0aWFsaXppbmcgdGhlIEZQVSByZWdpc3RlcnMgYW5kIFhTQVZFaW5nCisgKiB0
aGVtIHRvIG1lbW9yeS4KKyAqCisgKiBUaGlzIGRvZXMgbm90IGNoYW5nZSB0aGUgYWN0dWFs
IGhhcmR3YXJlIHJlZ2lzdGVyczsgd2hlbiBmcHVfX2NsZWFyX2FsbCgpCisgKiByZXR1cm5z
LCBUSUZfTkVFRF9GUFVfTE9BRCB3aWxsIGJlIHNldCwgYW5kIGEgc3Vic2VxdWVudCBleGl0
IHRvIHVzZXIgbW9kZQorICogd2lsbCByZWxvYWQgdGhlIGhhcmR3YXJlIHJlZ2lzdGVycyBm
cm9tIG1lbW9yeS4KKyAqLwogdm9pZCBmcHVfX2NsZWFyX2FsbChzdHJ1Y3QgZnB1ICpmcHUp
CiB7Ci0JZnB1X19jbGVhcihmcHUsIGZhbHNlKTsKKwlmcHJlZ3NfbG9jaygpOworCWZwdV9f
ZHJvcChmcHUpOworCWZwdV9faW5pdGlhbGl6ZShmcHUpOworCWZwcmVnc191bmxvY2soKTsK
IH0KIAogLyoKLS0gCjIuMzEuMQoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABwYXRjaGVzL2ZwdS92My0wMDA0LXg4Ni1mcHUtQWRkLWFkZHJlc3MtcmFuZ2UtY2hlY2tz
LXRvLWNvcHlfdXNlcl90b18ucGF0Y2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0
NAAwMDAxNzUwADAwMDE3NTAAMDAwMDAwMDQ0NzQAMTQwNTUzMzcwNTQAMDI1MTQzACAwAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAbHV0
bwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsdXRvAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZyb20gMTBjOWEzNDVjMTYwZDA3NWU1Nzky
YzZkNmRlMjZkMDEwZDgyZGEzOSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKTWVzc2FnZS1J
ZDogPDEwYzlhMzQ1YzE2MGQwNzVlNTc5MmM2ZDZkZTI2ZDAxMGQ4MmRhMzkuMTYyMjUyMzQz
Ni5naXQubHV0b0BrZXJuZWwub3JnPgpJbi1SZXBseS1UbzogPDY5MWVjZTMwYjJlYzI1NTgy
ODcxODVmZmJkNjg3MWEzMmUyODI2OGYuMTYyMjUyMzQzNi5naXQubHV0b0BrZXJuZWwub3Jn
PgpSZWZlcmVuY2VzOiA8NjkxZWNlMzBiMmVjMjU1ODI4NzE4NWZmYmQ2ODcxYTMyZTI4MjY4
Zi4xNjIyNTIzNDM2LmdpdC5sdXRvQGtlcm5lbC5vcmc+CkZyb206IEFuZHkgTHV0b21pcnNr
aSA8bHV0b0BrZXJuZWwub3JnPgpEYXRlOiBNb24sIDMxIE1heSAyMDIxIDIxOjQ4OjUwIC0w
NzAwClN1YmplY3Q6IFtQQVRDSCB2MyA0LzVdIHg4Ni9mcHU6IEFkZCBhZGRyZXNzIHJhbmdl
IGNoZWNrcyB0bwogY29weV91c2VyX3RvX3hzdGF0ZSgpCgpjb3B5X3VzZXJfdG9feHN0YXRl
KCkgdXNlZCBfX2NvcHlfZnJvbV91c2VyKCksIHdoaWNoIHdhcyBhIG5lZ2xpZ2libGUKc3Bl
ZWR1cC4gIFVzZSBjb3B5X2Zyb21fdXNlcigpIGluc3RlYWQuCgpGb3J0dW5hdGVseSwgYm90
aCBjYWxsIHNpdGVzIHdlcmUgYXQgbGVhc3QgYWxtb3N0IGNvcnJlY3QuCl9fZnB1X19yZXN0
b3JlX3NpZygpIGNoZWNrZWQgYWNjZXNzX29rKCkgd2l0aCBhIGxlbmd0aCBvZgp4c3RhdGVf
c2lnZnJhbWVfc2l6ZSgpIGFuZCBwdHJhY2UgcmVnc2V0IGFjY2VzcyB1c2VkCmZwdV91c2Vy
X3hzdGF0ZV9zaXplLiAgVGhlc2Ugc2hvdWxkIGJlIHZhbGlkIHVwcGVyIGJvdW5kcyBvbiB0
aGUgbGVuZ3RoLApzbywgYXQgd29yc3QsIHRoaXMgd291bGQgY2F1c2Ugc3B1cmlvdXMgZmFp
bHVyZXMgYW5kIG5vdCBhY2Nlc3NlcyB0bwprZXJuZWwgbWVtb3J5LgoKTm9uZXRoZWxlc3Ms
IHRoaXMgaXMgZmFyIG1vcmUgZnJhZ2lsZSB0aGFuIHNlZW1zIGp1c3RpZmlhYmxlLiAgVXNl
CmNvcHlfZnJvbV91c2VyKCkuCgpTaWduZWQtb2ZmLWJ5OiBBbmR5IEx1dG9taXJza2kgPGx1
dG9Aa2VybmVsLm9yZz4KLS0tCiBhcmNoL3g4Ni9rZXJuZWwvZnB1L3hzdGF0ZS5jIHwgNiAr
KystLS0KIDEgZmlsZSBjaGFuZ2VkLCAzIGluc2VydGlvbnMoKyksIDMgZGVsZXRpb25zKC0p
CgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2VybmVsL2ZwdS94c3RhdGUuYyBiL2FyY2gveDg2
L2tlcm5lbC9mcHUveHN0YXRlLmMKaW5kZXggODNhMzNlMjBlYTVjLi5iODgyZmUzYzgyNzYg
MTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2tlcm5lbC9mcHUveHN0YXRlLmMKKysrIGIvYXJjaC94
ODYva2VybmVsL2ZwdS94c3RhdGUuYwpAQCAtMTE5MCw3ICsxMTkwLDcgQEAgaW50IGNvcHlf
dXNlcl90b194c3RhdGUoc3RydWN0IHhyZWdzX3N0YXRlICp4c2F2ZSwgY29uc3Qgdm9pZCBf
X3VzZXIgKnVidWYpCiAJb2Zmc2V0ID0gb2Zmc2V0b2Yoc3RydWN0IHhyZWdzX3N0YXRlLCBo
ZWFkZXIpOwogCXNpemUgPSBzaXplb2YoaGRyKTsKIAotCWlmIChfX2NvcHlfZnJvbV91c2Vy
KCZoZHIsIHVidWYgKyBvZmZzZXQsIHNpemUpKQorCWlmIChjb3B5X2Zyb21fdXNlcigmaGRy
LCB1YnVmICsgb2Zmc2V0LCBzaXplKSkKIAkJcmV0dXJuIC1FRkFVTFQ7CiAKIAlpZiAodmFs
aWRhdGVfdXNlcl94c3RhdGVfaGVhZGVyKCZoZHIpKQpAQCAtMTIwNSw3ICsxMjA1LDcgQEAg
aW50IGNvcHlfdXNlcl90b194c3RhdGUoc3RydWN0IHhyZWdzX3N0YXRlICp4c2F2ZSwgY29u
c3Qgdm9pZCBfX3VzZXIgKnVidWYpCiAJCQlvZmZzZXQgPSB4c3RhdGVfb2Zmc2V0c1tpXTsK
IAkJCXNpemUgPSB4c3RhdGVfc2l6ZXNbaV07CiAKLQkJCWlmIChfX2NvcHlfZnJvbV91c2Vy
KGRzdCwgdWJ1ZiArIG9mZnNldCwgc2l6ZSkpCisJCQlpZiAoY29weV9mcm9tX3VzZXIoZHN0
LCB1YnVmICsgb2Zmc2V0LCBzaXplKSkKIAkJCQlyZXR1cm4gLUVGQVVMVDsKIAkJfQogCX0K
QEAgLTEyMTMsNyArMTIxMyw3IEBAIGludCBjb3B5X3VzZXJfdG9feHN0YXRlKHN0cnVjdCB4
cmVnc19zdGF0ZSAqeHNhdmUsIGNvbnN0IHZvaWQgX191c2VyICp1YnVmKQogCWlmICh4ZmVh
dHVyZXNfbXhjc3JfcXVpcmsoaGRyLnhmZWF0dXJlcykpIHsKIAkJb2Zmc2V0ID0gb2Zmc2V0
b2Yoc3RydWN0IGZ4cmVnc19zdGF0ZSwgbXhjc3IpOwogCQlzaXplID0gTVhDU1JfQU5EX0ZM
QUdTX1NJWkU7Ci0JCWlmIChfX2NvcHlfZnJvbV91c2VyKCZ4c2F2ZS0+aTM4Ny5teGNzciwg
dWJ1ZiArIG9mZnNldCwgc2l6ZSkpCisJCWlmIChjb3B5X2Zyb21fdXNlcigmeHNhdmUtPmkz
ODcubXhjc3IsIHVidWYgKyBvZmZzZXQsIHNpemUpKQogCQkJcmV0dXJuIC1FRkFVTFQ7CiAJ
fQogCi0tIAoyLjMxLjEKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwYXRj
aGVzL2ZwdS92My0wMDA1LXg4Ni1mcHUtSW52YWxpZGF0ZS1GUFUtc3RhdGUtYWZ0ZXItYS1m
YWlsZWQtWFJTVE8ucGF0Y2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAx
NzUwADAwMDE3NTAAMDAwMDAwMDQxNjMAMTQwNTUzMzcwNTQAMDI0NTA3ACAwAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAbHV0bwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsdXRvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEZyb20gZjI0MzE2ZjE4YmFiNTNhM2I4NGM1MGY1ODA3
ODJmNDUzMzc0NDg5NCBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKTWVzc2FnZS1JZDogPGYy
NDMxNmYxOGJhYjUzYTNiODRjNTBmNTgwNzgyZjQ1MzM3NDQ4OTQuMTYyMjUyMzQzNi5naXQu
bHV0b0BrZXJuZWwub3JnPgpJbi1SZXBseS1UbzogPDY5MWVjZTMwYjJlYzI1NTgyODcxODVm
ZmJkNjg3MWEzMmUyODI2OGYuMTYyMjUyMzQzNi5naXQubHV0b0BrZXJuZWwub3JnPgpSZWZl
cmVuY2VzOiA8NjkxZWNlMzBiMmVjMjU1ODI4NzE4NWZmYmQ2ODcxYTMyZTI4MjY4Zi4xNjIy
NTIzNDM2LmdpdC5sdXRvQGtlcm5lbC5vcmc+CkZyb206IEFuZHkgTHV0b21pcnNraSA8bHV0
b0BrZXJuZWwub3JnPgpEYXRlOiBTYXQsIDI5IE1heSAyMDIxIDIyOjA1OjAwIC0wNzAwClN1
YmplY3Q6IFtQQVRDSCB2MyA1LzVdIHg4Ni9mcHU6IEludmFsaWRhdGUgRlBVIHN0YXRlIGFm
dGVyIGEgZmFpbGVkIFhSU1RPUgogZnJvbSBhIHVzZXIgYnVmZmVyCgpJZiBYUlNUT1IgZmFp
bHMgZHVlIHRvIHN1ZmZpY2llbnRseSBjb21wbGljYXRlZCBwYWdpbmcgZXJyb3JzIChlLmcu
CmNvbmN1cnJlbnQgVExCIGludmFsaWRhdGlvbiksIGl0IG1heSBmYXVsdCB3aXRoICNQRiBi
dXQgc3RpbGwgbW9kaWZ5CnBvcnRpb25zIG9mIHRoZSB1c2VyIGV4dGVuZGVkIHN0YXRlLiAg
SWYgdGhpcyBoYXBwZW5zIGluCl9fZnB1X3Jlc3RvcmVfc2lnKCkgd2l0aCBhIHZpY3RpbSB0
YXNrJ3MgRlBVIHJlZ2lzdGVycyBsb2FkZWQsIGFuZAp3ZSBhcmUgcHJlZW1wdGVkIGluIHRo
ZSB3cm9uZyBwbGFjZSBhZnRlciBYUlNUT1IgZmF1bHRzLCB3ZSBtYXkKcmVzdW1lIHRoZSB2
aWN0aW0gdGFzayB3aXRoIHBhcnRpYWxseSBjb3JydXB0IGV4dGVuZGVkIHN0YXRlLgoKSW52
YWxpZGF0ZSB0aGUgRlBVIHJlZ2lzdGVycyB3aGVuIFhSU1RPUiBmYWlscyB0byBwcmV2ZW50
IHRoaXMKc2NlbmFyaW8uCgpTaWduZWQtb2ZmLWJ5OiBBbmR5IEx1dG9taXJza2kgPGx1dG9A
a2VybmVsLm9yZz4KLS0tCiBhcmNoL3g4Ni9rZXJuZWwvZnB1L3NpZ25hbC5jIHwgMjEgKysr
KysrKysrKysrKysrKysrKysrCiAxIGZpbGUgY2hhbmdlZCwgMjEgaW5zZXJ0aW9ucygrKQoK
ZGlmZiAtLWdpdCBhL2FyY2gveDg2L2tlcm5lbC9mcHUvc2lnbmFsLmMgYi9hcmNoL3g4Ni9r
ZXJuZWwvZnB1L3NpZ25hbC5jCmluZGV4IGQ1YmM5NmE1MzZjMi4uNTI5OGNlYjAyNDA4IDEw
MDY0NAotLS0gYS9hcmNoL3g4Ni9rZXJuZWwvZnB1L3NpZ25hbC5jCisrKyBiL2FyY2gveDg2
L2tlcm5lbC9mcHUvc2lnbmFsLmMKQEAgLTM2OSw2ICszNjksMjcgQEAgc3RhdGljIGludCBf
X2ZwdV9fcmVzdG9yZV9zaWcodm9pZCBfX3VzZXIgKmJ1Ziwgdm9pZCBfX3VzZXIgKmJ1Zl9m
eCwgaW50IHNpemUpCiAJCQlmcHJlZ3NfdW5sb2NrKCk7CiAJCQlyZXR1cm4gMDsKIAkJfQor
CisJCWlmICh0ZXN0X3RocmVhZF9mbGFnKFRJRl9ORUVEX0ZQVV9MT0FEKSkgeworCQkJLyoK
KwkJCSAqIFRoZSBGUFUgcmVnaXN0ZXJzIGRvIG5vdCBiZWxvbmcgdG8gY3VycmVudCwgYW5k
CisJCQkgKiBXZSBqdXN0IGRpZCBhbiBGUFUgcmVzdG9yZSBvcGVyYXRpb24sIHJlc3RyaWN0
ZWQgdG8KKwkJCSAqIHRoZSB1c2VyIHBvcnRpb24gb2YgdGhlIHJlZ2lzdGVyIGZpbGUsIGFu
ZCBmYWlsZWQuCisJCQkgKiBJbiB0aGUgZXZlbnQgdGhhdCB0aGUgdWNvZGUgd2FzIHVuZnJp
ZW5kbHkgYW5kCisJCQkgKiBtb2RpZmllZCB0aGUgcmVnaXN0ZXJzIGF0IGFsbCwgd2UgbmVl
ZCB0byBtYWtlIHN1cmUKKwkJCSAqIHRoYXQgd2UgYXJlbid0IGNvcnJ1cHRpbmcgYW4gaW5u
b2NlbnQgbm9uLWN1cnJlbnQKKwkJCSAqIHRhc2sncyByZWdpc3RlcnMuCisJCQkgKi8KKwkJ
CV9fY3B1X2ludmFsaWRhdGVfZnByZWdzX3N0YXRlKCk7CisJCX0gZWxzZSB7CisJCQkvKgor
CQkJICogQXMgYWJvdmUsIHdlIG1heSBoYXZlIGp1c3QgY2xvYmJlcmVkIGN1cnJlbnQncwor
CQkJICogdXNlciBGUFUgc3RhdGUuICBXZSB3aWxsIGVpdGhlciBzdWNjZXNzZnVsbHkKKwkJ
CSAqIGxvYWQgaXQgb3IgY2xlYXIgaXQgYmVsb3csIHNvIG5vIGFjdGlvbiBpcyByZXF1aXJl
ZAorCQkJICogaGVyZS4KKwkJCSAqLworCQl9CisKIAkJZnByZWdzX3VubG9jaygpOwogCX0g
ZWxzZSB7CiAJCS8qCi0tIAoyLjMxLjEKCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA=
--------------686200B77A971DA2BDFA4281--
