Return-Path: <stable-owner@vger.kernel.org>
X-Original-To: lists+stable@lfdr.de
Delivered-To: lists+stable@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 4CEAF86EA9
	for <lists+stable@lfdr.de>; Fri,  9 Aug 2019 02:05:38 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404550AbfHIAFf (ORCPT <rfc822;lists+stable@lfdr.de>);
        Thu, 8 Aug 2019 20:05:35 -0400
Received: from shadbolt.e.decadent.org.uk ([88.96.1.126]:38760 "EHLO
        shadbolt.e.decadent.org.uk" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1732708AbfHIAFf (ORCPT
        <rfc822;stable@vger.kernel.org>); Thu, 8 Aug 2019 20:05:35 -0400
Received: from [192.168.4.242] (helo=deadeye)
        by shadbolt.decadent.org.uk with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
        (Exim 4.89)
        (envelope-from <ben@decadent.org.uk>)
        id 1hvsPV-0000QO-M8; Fri, 09 Aug 2019 01:05:33 +0100
Received: from ben by deadeye with local (Exim 4.92)
        (envelope-from <ben@decadent.org.uk>)
        id 1hvsPV-0000mj-Gq; Fri, 09 Aug 2019 01:05:33 +0100
Message-ID: <1fcba38ae50cb4e740839c825fb2eb96b3c54956.camel@decadent.org.uk>
Subject: Grand Schemozzle, 4.9 backport
From:   Ben Hutchings <ben@decadent.org.uk>
To:     Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc:     stable <stable@vger.kernel.org>,
        Josh Poimboeuf <jpoimboe@redhat.com>,
        Thomas Gleixner <tglx@linutronix.de>
Date:   Fri, 09 Aug 2019 01:05:28 +0100
Content-Type: multipart/signed; micalg="pgp-sha512";
        protocol="application/pgp-signature"; boundary="=-bKa5Ab2ZP0Z6flonPDQT"
User-Agent: Evolution 3.30.5-1.1 
MIME-Version: 1.0
X-SA-Exim-Connect-IP: 192.168.4.242
X-SA-Exim-Mail-From: ben@decadent.org.uk
X-SA-Exim-Scanned: No (on shadbolt.decadent.org.uk); SAEximRunCond expanded to false
Sender: stable-owner@vger.kernel.org
Precedence: bulk
List-ID: <stable.vger.kernel.org>
X-Mailing-List: stable@vger.kernel.org


--=-bKa5Ab2ZP0Z6flonPDQT
Content-Type: multipart/mixed; boundary="=-F5rOwfiTdwv/hSmR27TI"


--=-F5rOwfiTdwv/hSmR27TI
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Here's a lightly tested backport of the Spectre v1 swapgs mitigation,
for 4.9.

Ben.

--=20
Ben Hutchings
If you seem to know what you are doing, you'll be given more to do.



--=-F5rOwfiTdwv/hSmR27TI
Content-Type: application/mbox; name="gs-4.9.mbox"
Content-Disposition: attachment; filename="gs-4.9.mbox"
Content-Transfer-Encoding: base64

RnJvbSA3ZjM4YzgwYzE4NGIxN2Y0YjI5NGI4NmExNmZmZDRhNTY5NWY0YmMwIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBCZW4gSHV0Y2hpbmdzIDxiZW5AZGVjYWRlbnQub3JnLnVrPgpE
YXRlOiBUaHUsIDggQXVnIDIwMTkgMjA6MDM6MzIgKzAxMDAKU3ViamVjdDogW1BBVENIIDEvNV0g
eDg2OiBjcHVmZWF0dXJlczogU29ydCBmZWF0dXJlIHdvcmQgNwoKVGhpcyB3aWxsIG1ha2UgaXQg
Y2xlYXJlciB3aGljaCBiaXRzIGFyZSBhbGxvY2F0ZWQsIGluIGNhc2Ugd2UgbmVlZCB0bwphc3Np
Z24gbW9yZSBmZWF0dXJlIGJpdHMgZm9yIGxhdGVyIGJhY2twb3J0cy4KClNpZ25lZC1vZmYtYnk6
IEJlbiBIdXRjaGluZ3MgPGJlbkBkZWNhZGVudC5vcmcudWs+Ci0tLQogYXJjaC94ODYvaW5jbHVk
ZS9hc20vY3B1ZmVhdHVyZXMuaCB8IDQgKy0tLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9u
KCspLCAzIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL2Nw
dWZlYXR1cmVzLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9jcHVmZWF0dXJlcy5oCmluZGV4IDA2
ZGUzMzhiZTBkOC4uMjYwMzFjOTRlYzMyIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2Fz
bS9jcHVmZWF0dXJlcy5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2NwdWZlYXR1cmVzLmgK
QEAgLTIwMSw5ICsyMDEsNiBAQAogCiAjZGVmaW5lIFg4Nl9GRUFUVVJFX1JTQl9DVFhTVwkoIDcq
MzIrMTkpIC8qICIiIEZpbGwgUlNCIG9uIGNvbnRleHQgc3dpdGNoZXMgKi8KIAotLyogQmVjYXVz
ZSB0aGUgQUxURVJOQVRJVkUgc2NoZW1lIGlzIGZvciBtZW1iZXJzIG9mIHRoZSBYODZfRkVBVFVS
RSBjbHViLi4uICovCi0jZGVmaW5lIFg4Nl9GRUFUVVJFX0tBSVNFUgkoIDcqMzIrMzEpIC8qIENP
TkZJR19QQUdFX1RBQkxFX0lTT0xBVElPTiB3L28gbm9rYWlzZXIgKi8KLQogI2RlZmluZSBYODZf
RkVBVFVSRV9VU0VfSUJQQgkoIDcqMzIrMjEpIC8qICIiIEluZGlyZWN0IEJyYW5jaCBQcmVkaWN0
aW9uIEJhcnJpZXIgZW5hYmxlZCAqLwogI2RlZmluZSBYODZfRkVBVFVSRV9VU0VfSUJSU19GVwko
IDcqMzIrMjIpIC8qICIiIFVzZSBJQlJTIGR1cmluZyBydW50aW1lIGZpcm13YXJlIGNhbGxzICov
CiAjZGVmaW5lIFg4Nl9GRUFUVVJFX1NQRUNfU1RPUkVfQllQQVNTX0RJU0FCTEUgKCA3KjMyKzIz
KSAvKiAiIiBEaXNhYmxlIFNwZWN1bGF0aXZlIFN0b3JlIEJ5cGFzcy4gKi8KQEAgLTIxNCw2ICsy
MTEsNyBAQAogI2RlZmluZSBYODZfRkVBVFVSRV9aRU4JCSggNyozMisyOCkgLyogIiIgQ1BVIGlz
IEFNRCBmYW1pbHkgMHgxNyAoWmVuKSAqLwogI2RlZmluZSBYODZfRkVBVFVSRV9MMVRGX1BURUlO
VgkoIDcqMzIrMjkpIC8qICIiIEwxVEYgd29ya2Fyb3VuZCBQVEUgaW52ZXJzaW9uICovCiAjZGVm
aW5lIFg4Nl9GRUFUVVJFX0lCUlNfRU5IQU5DRUQJKCA3KjMyKzMwKSAvKiBFbmhhbmNlZCBJQlJT
ICovCisjZGVmaW5lIFg4Nl9GRUFUVVJFX0tBSVNFUgkoIDcqMzIrMzEpIC8qIENPTkZJR19QQUdF
X1RBQkxFX0lTT0xBVElPTiB3L28gbm9rYWlzZXIgKi8KIAogLyogVmlydHVhbGl6YXRpb24gZmxh
Z3M6IExpbnV4IGRlZmluZWQsIHdvcmQgOCAqLwogI2RlZmluZSBYODZfRkVBVFVSRV9UUFJfU0hB
RE9XICAoIDgqMzIrIDApIC8qIEludGVsIFRQUiBTaGFkb3cgKi8KCkZyb20gNzYxYjMzMTI5NDZi
MWI2Y2UzMGQwNjhiNmQzNjc5MTg4YTQwNzEzMyBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJv
bTogSm9zaCBQb2ltYm9ldWYgPGpwb2ltYm9lQHJlZGhhdC5jb20+CkRhdGU6IE1vbiwgOCBKdWwg
MjAxOSAxMTo1MjoyNSAtMDUwMApTdWJqZWN0OiBbUEFUQ0ggMi81XSB4ODYvc3BlY3VsYXRpb246
IFByZXBhcmUgZW50cnkgY29kZSBmb3IgU3BlY3RyZSB2MSBzd2FwZ3MKIG1pdGlnYXRpb25zCgpj
b21taXQgMThlYzU0ZmRkNmQxOGQ5MjAyNWFmMDk3Y2QwNDJhNzVjZjBlYTI0YyB1cHN0cmVhbS4K
ClNwZWN0cmUgdjEgaXNuJ3Qgb25seSBhYm91dCBhcnJheSBib3VuZHMgY2hlY2tzLiAgSXQgY2Fu
IGFmZmVjdCBhbnkKY29uZGl0aW9uYWwgY2hlY2tzLiAgVGhlIGtlcm5lbCBlbnRyeSBjb2RlIGlu
dGVycnVwdCwgZXhjZXB0aW9uLCBhbmQgTk1JCmhhbmRsZXJzIGFsbCBoYXZlIGNvbmRpdGlvbmFs
IHN3YXBncyBjaGVja3MuICBUaG9zZSBtYXkgYmUgcHJvYmxlbWF0aWMgaW4KdGhlIGNvbnRleHQg
b2YgU3BlY3RyZSB2MSwgYXMga2VybmVsIGNvZGUgY2FuIHNwZWN1bGF0aXZlbHkgcnVuIHdpdGgg
YSB1c2VyCkdTLgoKRm9yIGV4YW1wbGU6CgoJaWYgKGNvbWluZyBmcm9tIHVzZXIgc3BhY2UpCgkJ
c3dhcGdzCgltb3YgJWdzOjxwZXJjcHVfb2Zmc2V0PiwgJXJlZwoJbW92ICglcmVnKSwgJXJlZzEK
CldoZW4gY29taW5nIGZyb20gdXNlciBzcGFjZSwgdGhlIENQVSBjYW4gc3BlY3VsYXRpdmVseSBz
a2lwIHRoZSBzd2FwZ3MsIGFuZAp0aGVuIGRvIGEgc3BlY3VsYXRpdmUgcGVyY3B1IGxvYWQgdXNp
bmcgdGhlIHVzZXIgR1MgdmFsdWUuICBTbyB0aGUgdXNlciBjYW4Kc3BlY3VsYXRpdmVseSBmb3Jj
ZSBhIHJlYWQgb2YgYW55IGtlcm5lbCB2YWx1ZS4gIElmIGEgZ2FkZ2V0IGV4aXN0cyB3aGljaAp1
c2VzIHRoZSBwZXJjcHUgdmFsdWUgYXMgYW4gYWRkcmVzcyBpbiBhbm90aGVyIGxvYWQvc3RvcmUs
IHRoZW4gdGhlCmNvbnRlbnRzIG9mIHRoZSBrZXJuZWwgdmFsdWUgbWF5IGJlY29tZSB2aXNpYmxl
IHZpYSBhbiBMMSBzaWRlIGNoYW5uZWwKYXR0YWNrLgoKQSBzaW1pbGFyIGF0dGFjayBleGlzdHMg
d2hlbiBjb21pbmcgZnJvbSBrZXJuZWwgc3BhY2UuICBUaGUgQ1BVIGNhbgpzcGVjdWxhdGl2ZWx5
IGRvIHRoZSBzd2FwZ3MsIGNhdXNpbmcgdGhlIHVzZXIgR1MgdG8gZ2V0IHVzZWQgZm9yIHRoZSBy
ZXN0Cm9mIHRoZSBzcGVjdWxhdGl2ZSB3aW5kb3cuCgpUaGUgbWl0aWdhdGlvbiBpcyBzaW1pbGFy
IHRvIGEgdHJhZGl0aW9uYWwgU3BlY3RyZSB2MSBtaXRpZ2F0aW9uLCBleGNlcHQ6CgogIGEpIGlu
ZGV4IG1hc2tpbmcgaXNuJ3QgcG9zc2libGU7IGJlY2F1c2UgdGhlIGluZGV4IChwZXJjcHUgb2Zm
c2V0KQogICAgIGlzbid0IHVzZXItY29udHJvbGxlZDsgYW5kCgogIGIpIGFuIGxmZW5jZSBpcyBu
ZWVkZWQgaW4gYm90aCB0aGUgImZyb20gdXNlciIgc3dhcGdzIHBhdGggYW5kIHRoZQogICAgICJm
cm9tIGtlcm5lbCIgbm9uLXN3YXBncyBwYXRoIChiZWNhdXNlIG9mIHRoZSB0d28gYXR0YWNrcyBk
ZXNjcmliZWQKICAgICBhYm92ZSkuCgpUaGUgdXNlciBlbnRyeSBzd2FwZ3MgcGF0aHMgYWxyZWFk
eSBoYXZlIFNXSVRDSF9UT19LRVJORUxfQ1IzLCB3aGljaCBoYXMgYQpDUjMgd3JpdGUgd2hlbiBQ
VEkgaXMgZW5hYmxlZC4gIFNpbmNlIENSMyB3cml0ZXMgYXJlIHNlcmlhbGl6aW5nLCB0aGUKbGZl
bmNlcyBjYW4gYmUgc2tpcHBlZCBpbiB0aG9zZSBjYXNlcy4KCk9uIHRoZSBvdGhlciBoYW5kLCB0
aGUga2VybmVsIGVudHJ5IHN3YXBncyBwYXRocyBkb24ndCBkZXBlbmQgb24gUFRJLgoKVG8gYXZv
aWQgdW5uZWNlc3NhcnkgbGZlbmNlcyBmb3IgdGhlIHVzZXIgZW50cnkgY2FzZSwgY3JlYXRlIHR3
byBzZXBhcmF0ZQpmZWF0dXJlcyBmb3IgYWx0ZXJuYXRpdmUgcGF0Y2hpbmc6CgogIFg4Nl9GRUFU
VVJFX0ZFTkNFX1NXQVBHU19VU0VSCiAgWDg2X0ZFQVRVUkVfRkVOQ0VfU1dBUEdTX0tFUk5FTAoK
VXNlIHRoZXNlIGZlYXR1cmVzIGluIGVudHJ5IGNvZGUgdG8gcGF0Y2ggaW4gbGZlbmNlcyB3aGVy
ZSBuZWVkZWQuCgpUaGUgZmVhdHVyZXMgYXJlbid0IGVuYWJsZWQgeWV0LCBzbyB0aGVyZSdzIG5v
IGZ1bmN0aW9uYWwgY2hhbmdlLgoKU2lnbmVkLW9mZi1ieTogSm9zaCBQb2ltYm9ldWYgPGpwb2lt
Ym9lQHJlZGhhdC5jb20+ClNpZ25lZC1vZmYtYnk6IFRob21hcyBHbGVpeG5lciA8dGdseEBsaW51
dHJvbml4LmRlPgpSZXZpZXdlZC1ieTogRGF2ZSBIYW5zZW4gPGRhdmUuaGFuc2VuQGludGVsLmNv
bT4KW2J3aDogQmFja3BvcnRlZCB0byA0Ljk6CiAtIEFzc2lnbiB0aGUgQ1BVIGZlYXR1cmUgYml0
cyBmcm9tIHdvcmQgNwogLSBBZGQgRkVOQ0VfU1dBUEdTX0tFUk5FTF9FTlRSWSB0byBOTUkgZW50
cnksIHNpbmNlIGl0IGRvZXMgbm90CiAgIHVzZSBwYXJhbm9pZF9lbnRyeQogLSBJbmNsdWRlIDxh
c20vY3B1ZmVhdHVyZXMuaD4gaW4gY2FsbGluZy5oCiAtIEFkanVzdCBjb250ZXh0XQpTaWduZWQt
b2ZmLWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW5AZGVjYWRlbnQub3JnLnVrPgotLS0KIGFyY2gveDg2
L2VudHJ5L2NhbGxpbmcuaCAgICAgICAgICAgfCAxOCArKysrKysrKysrKysrKysrKysKIGFyY2gv
eDg2L2VudHJ5L2VudHJ5XzY0LlMgICAgICAgICAgfCAyMSArKysrKysrKysrKysrKysrKysrLS0K
IGFyY2gveDg2L2luY2x1ZGUvYXNtL2NwdWZlYXR1cmVzLmggfCAgMyArKy0KIDMgZmlsZXMgY2hh
bmdlZCwgMzkgaW5zZXJ0aW9ucygrKSwgMyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9hcmNo
L3g4Ni9lbnRyeS9jYWxsaW5nLmggYi9hcmNoL3g4Ni9lbnRyeS9jYWxsaW5nLmgKaW5kZXggOWE5
ZTU4ODQwNjZjLi44YWY4YzA3MGYyMTMgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2VudHJ5L2NhbGxp
bmcuaAorKysgYi9hcmNoL3g4Ni9lbnRyeS9jYWxsaW5nLmgKQEAgLTEsNCArMSw1IEBACiAjaW5j
bHVkZSA8bGludXgvanVtcF9sYWJlbC5oPgorI2luY2x1ZGUgPGFzbS9jcHVmZWF0dXJlcy5oPgog
CiAvKgogCkBAIC0yMDEsNiArMjAyLDIzIEBAIEZvciAzMi1iaXQgd2UgaGF2ZSB0aGUgZm9sbG93
aW5nIGNvbnZlbnRpb25zIC0ga2VybmVsIGlzIGJ1aWx0IHdpdGgKIAkuYnl0ZSAweGYxCiAJLmVu
ZG0KIAorLyoKKyAqIE1pdGlnYXRlIFNwZWN0cmUgdjEgZm9yIGNvbmRpdGlvbmFsIHN3YXBncyBj
b2RlIHBhdGhzLgorICoKKyAqIEZFTkNFX1NXQVBHU19VU0VSX0VOVFJZIGlzIHVzZWQgaW4gdGhl
IHVzZXIgZW50cnkgc3dhcGdzIGNvZGUgcGF0aCwgdG8KKyAqIHByZXZlbnQgYSBzcGVjdWxhdGl2
ZSBzd2FwZ3Mgd2hlbiBjb21pbmcgZnJvbSBrZXJuZWwgc3BhY2UuCisgKgorICogRkVOQ0VfU1dB
UEdTX0tFUk5FTF9FTlRSWSBpcyB1c2VkIGluIHRoZSBrZXJuZWwgZW50cnkgbm9uLXN3YXBncyBj
b2RlIHBhdGgsCisgKiB0byBwcmV2ZW50IHRoZSBzd2FwZ3MgZnJvbSBnZXR0aW5nIHNwZWN1bGF0
aXZlbHkgc2tpcHBlZCB3aGVuIGNvbWluZyBmcm9tCisgKiB1c2VyIHNwYWNlLgorICovCisubWFj
cm8gRkVOQ0VfU1dBUEdTX1VTRVJfRU5UUlkKKwlBTFRFUk5BVElWRSAiIiwgImxmZW5jZSIsIFg4
Nl9GRUFUVVJFX0ZFTkNFX1NXQVBHU19VU0VSCisuZW5kbQorLm1hY3JvIEZFTkNFX1NXQVBHU19L
RVJORUxfRU5UUlkKKwlBTFRFUk5BVElWRSAiIiwgImxmZW5jZSIsIFg4Nl9GRUFUVVJFX0ZFTkNF
X1NXQVBHU19LRVJORUwKKy5lbmRtCisKICNlbmRpZiAvKiBDT05GSUdfWDg2XzY0ICovCiAKIC8q
CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9lbnRyeS9lbnRyeV82NC5TIGIvYXJjaC94ODYvZW50cnkv
ZW50cnlfNjQuUwppbmRleCA4MjUyZDlkYzQ4ZWIuLjU5MmY2MmZjNDlmMCAxMDA2NDQKLS0tIGEv
YXJjaC94ODYvZW50cnkvZW50cnlfNjQuUworKysgYi9hcmNoL3g4Ni9lbnRyeS9lbnRyeV82NC5T
CkBAIC00MjAsNiArNDIwLDcgQEAgRU5EKGlycV9lbnRyaWVzX3N0YXJ0KQogCSAqIHRyYWNraW5n
IHRoYXQgd2UncmUgaW4ga2VybmVsIG1vZGUuCiAJICovCiAJU1dBUEdTCisJRkVOQ0VfU1dBUEdT
X1VTRVJfRU5UUlkKIAlTV0lUQ0hfS0VSTkVMX0NSMwogCiAJLyoKQEAgLTQzMyw4ICs0MzQsMTAg
QEAgRU5EKGlycV9lbnRyaWVzX3N0YXJ0KQogCVRSQUNFX0lSUVNfT0ZGCiAKIAlDQUxMX2VudGVy
X2Zyb21fdXNlcl9tb2RlCi0KKwlqbXBxCTJmCiAxOgorCUZFTkNFX1NXQVBHU19LRVJORUxfRU5U
UlkKKzI6CiAJLyoKIAkgKiBTYXZlIHByZXZpb3VzIHN0YWNrIHBvaW50ZXIsIG9wdGlvbmFsbHkg
c3dpdGNoIHRvIGludGVycnVwdCBzdGFjay4KIAkgKiBpcnFfY291bnQgaXMgdXNlZCB0byBjaGVj
ayBpZiBhIENQVSBpcyBhbHJlYWR5IG9uIGFuIGludGVycnVwdCBzdGFjawpAQCAtMTAwNCw2ICsx
MDA3LDEzIEBAIEVOVFJZKHBhcmFub2lkX2VudHJ5KQogCW1vdnEJJXJheCwgJWNyMwogMjoKICNl
bmRpZgorCS8qCisJICogVGhlIGFib3ZlIGRvZXNuJ3QgZG8gYW4gdW5jb25kaXRpb25hbCBDUjMg
d3JpdGUsIGV2ZW4gaW4gdGhlIFBUSQorCSAqIGNhc2UuICBTbyBkbyBhbiBsZmVuY2UgdG8gcHJl
dmVudCBHUyBzcGVjdWxhdGlvbiwgcmVnYXJkbGVzcyBvZgorCSAqIHdoZXRoZXIgUFRJIGlzIGVu
YWJsZWQuCisJICovCisJRkVOQ0VfU1dBUEdTX0tFUk5FTF9FTlRSWQorCiAJcmV0CiBFTkQocGFy
YW5vaWRfZW50cnkpCiAKQEAgLTEwNjUsNiArMTA3NSw3IEBAIEVOVFJZKGVycm9yX2VudHJ5KQog
CSAqIGZyb20gdXNlciBtb2RlIGR1ZSB0byBhbiBJUkVUIGZhdWx0LgogCSAqLwogCVNXQVBHUwor
CUZFTkNFX1NXQVBHU19VU0VSX0VOVFJZCiAKIC5MZXJyb3JfZW50cnlfZnJvbV91c2VybW9kZV9h
ZnRlcl9zd2FwZ3M6CiAJLyoKQEAgLTEwNzYsNiArMTA4Nyw4IEBAIEVOVFJZKGVycm9yX2VudHJ5
KQogCUNBTExfZW50ZXJfZnJvbV91c2VyX21vZGUKIAlyZXQKIAorLkxlcnJvcl9lbnRyeV9kb25l
X2xmZW5jZToKKwlGRU5DRV9TV0FQR1NfS0VSTkVMX0VOVFJZCiAuTGVycm9yX2VudHJ5X2RvbmU6
CiAJVFJBQ0VfSVJRU19PRkYKIAlyZXQKQEAgLTEwOTQsNyArMTEwNyw3IEBAIEVOVFJZKGVycm9y
X2VudHJ5KQogCWNtcHEJJXJheCwgUklQKzgoJXJzcCkKIAlqZQkuTGJzdGVwX2lyZXQKIAljbXBx
CSQuTGdzX2NoYW5nZSwgUklQKzgoJXJzcCkKLQlqbmUJLkxlcnJvcl9lbnRyeV9kb25lCisJam5l
CS5MZXJyb3JfZW50cnlfZG9uZV9sZmVuY2UKIAogCS8qCiAJICogaGFjazogLkxnc19jaGFuZ2Ug
Y2FuIGZhaWwgd2l0aCB1c2VyIGdzYmFzZS4gIElmIHRoaXMgaGFwcGVucywgZml4IHVwCkBAIC0x
MTAyLDYgKzExMTUsNyBAQCBFTlRSWShlcnJvcl9lbnRyeSkKIAkgKiAuTGdzX2NoYW5nZSdzIGVy
cm9yIGhhbmRsZXIgd2l0aCBrZXJuZWwgZ3NiYXNlLgogCSAqLwogCVNXQVBHUworCUZFTkNFX1NX
QVBHU19VU0VSX0VOVFJZCiAJam1wIC5MZXJyb3JfZW50cnlfZG9uZQogCiAuTGJzdGVwX2lyZXQ6
CkBAIC0xMTE1LDYgKzExMjksNyBAQCBFTlRSWShlcnJvcl9lbnRyeSkKIAkgKiBTd2l0Y2ggdG8g
a2VybmVsIGdzYmFzZToKIAkgKi8KIAlTV0FQR1MKKwlGRU5DRV9TV0FQR1NfVVNFUl9FTlRSWQog
CiAJLyoKIAkgKiBQcmV0ZW5kIHRoYXQgdGhlIGV4Y2VwdGlvbiBjYW1lIGZyb20gdXNlciBtb2Rl
OiBzZXQgdXAgcHRfcmVncwpAQCAtMTIxMSw2ICsxMjI2LDcgQEAgRU5UUlkobm1pKQogCSAqIHRv
IHN3aXRjaCBDUjMgaGVyZS4KIAkgKi8KIAljbGQKKwlGRU5DRV9TV0FQR1NfVVNFUl9FTlRSWQog
CW1vdnEJJXJzcCwgJXJkeAogCW1vdnEJUEVSX0NQVV9WQVIoY3B1X2N1cnJlbnRfdG9wX29mX3N0
YWNrKSwgJXJzcAogCXB1c2hxCTUqOCglcmR4KQkvKiBwdF9yZWdzLT5zcyAqLwpAQCAtMTQ5OSw2
ICsxNTE1LDcgQEAgRU5UUlkobm1pKQogCW1vdnEJJXJheCwgJWNyMwogMjoKICNlbmRpZgorCUZF
TkNFX1NXQVBHU19LRVJORUxfRU5UUlkKIAogCS8qIHBhcmFub2lkZW50cnkgZG9fbm1pLCAwOyB3
aXRob3V0IFRSQUNFX0lSUVNfT0ZGICovCiAJY2FsbAlkb19ubWkKZGlmZiAtLWdpdCBhL2FyY2gv
eDg2L2luY2x1ZGUvYXNtL2NwdWZlYXR1cmVzLmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9jcHVm
ZWF0dXJlcy5oCmluZGV4IDI2MDMxYzk0ZWMzMi4uN2M0NzYxNGI4ZDlkIDEwMDY0NAotLS0gYS9h
cmNoL3g4Ni9pbmNsdWRlL2FzbS9jcHVmZWF0dXJlcy5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUv
YXNtL2NwdWZlYXR1cmVzLmgKQEAgLTE5Miw3ICsxOTIsOCBAQAogCiAjZGVmaW5lIFg4Nl9GRUFU
VVJFX0hXX1BTVEFURQkoIDcqMzIrIDgpIC8qIEFNRCBIVy1QU3RhdGUgKi8KICNkZWZpbmUgWDg2
X0ZFQVRVUkVfUFJPQ19GRUVEQkFDSyAoIDcqMzIrIDkpIC8qIEFNRCBQcm9jRmVlZGJhY2tJbnRl
cmZhY2UgKi8KLQorI2RlZmluZSBYODZfRkVBVFVSRV9GRU5DRV9TV0FQR1NfVVNFUgkoIDcqMzIr
MTApIC8qICIiIExGRU5DRSBpbiB1c2VyIGVudHJ5IFNXQVBHUyBwYXRoICovCisjZGVmaW5lIFg4
Nl9GRUFUVVJFX0ZFTkNFX1NXQVBHU19LRVJORUwJKCA3KjMyKzExKSAvKiAiIiBMRkVOQ0UgaW4g
a2VybmVsIGVudHJ5IFNXQVBHUyBwYXRoICovCiAjZGVmaW5lIFg4Nl9GRUFUVVJFX1JFVFBPTElO
RQkoIDcqMzIrMTIpIC8qICIiIEdlbmVyaWMgUmV0cG9saW5lIG1pdGlnYXRpb24gZm9yIFNwZWN0
cmUgdmFyaWFudCAyICovCiAjZGVmaW5lIFg4Nl9GRUFUVVJFX1JFVFBPTElORV9BTUQgKCA3KjMy
KzEzKSAvKiAiIiBBTUQgUmV0cG9saW5lIG1pdGlnYXRpb24gZm9yIFNwZWN0cmUgdmFyaWFudCAy
ICovCiAKCkZyb20gZGZmZDg1ZDA2YjE3ZjI1N2I5NzQ5YzhmYjgwZjQ5M2I4YjRiZjFmMSBNb24g
U2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogSm9zaCBQb2ltYm9ldWYgPGpwb2ltYm9lQHJlZGhh
dC5jb20+CkRhdGU6IE1vbiwgOCBKdWwgMjAxOSAxMTo1MjoyNiAtMDUwMApTdWJqZWN0OiBbUEFU
Q0ggMy81XSB4ODYvc3BlY3VsYXRpb246IEVuYWJsZSBTcGVjdHJlIHYxIHN3YXBncyBtaXRpZ2F0
aW9ucwoKY29tbWl0IGEyMDU5ODI1OTg2YTFjODE0M2ZkNjY5ODc3NGZhOWQ4MzczM2JiMTEgdXBz
dHJlYW0uCgpUaGUgcHJldmlvdXMgY29tbWl0IGFkZGVkIG1hY3JvIGNhbGxzIGluIHRoZSBlbnRy
eSBjb2RlIHdoaWNoIG1pdGlnYXRlIHRoZQpTcGVjdHJlIHYxIHN3YXBncyBpc3N1ZSBpZiB0aGUg
WDg2X0ZFQVRVUkVfRkVOQ0VfU1dBUEdTXyogZmVhdHVyZXMgYXJlCmVuYWJsZWQuICBFbmFibGUg
dGhvc2UgZmVhdHVyZXMgd2hlcmUgYXBwbGljYWJsZS4KClRoZSBtaXRpZ2F0aW9ucyBtYXkgYmUg
ZGlzYWJsZWQgd2l0aCAibm9zcGVjdHJlX3YxIiBvciAibWl0aWdhdGlvbnM9b2ZmIi4KClRoZXJl
IGFyZSBkaWZmZXJlbnQgZmVhdHVyZXMgd2hpY2ggY2FuIGFmZmVjdCB0aGUgcmlzayBvZiBhdHRh
Y2s6CgotIFdoZW4gRlNHU0JBU0UgaXMgZW5hYmxlZCwgdW5wcml2aWxlZ2VkIHVzZXJzIGFyZSBh
YmxlIHRvIHBsYWNlIGFueQogIHZhbHVlIGluIEdTLCB1c2luZyB0aGUgd3Jnc2Jhc2UgaW5zdHJ1
Y3Rpb24uICBUaGlzIG1lYW5zIHRoZXkgY2FuCiAgd3JpdGUgYSBHUyB2YWx1ZSB3aGljaCBwb2lu
dHMgdG8gYW55IHZhbHVlIGluIGtlcm5lbCBzcGFjZSwgd2hpY2ggY2FuCiAgYmUgdXNlZnVsIHdp
dGggdGhlIGZvbGxvd2luZyBnYWRnZXQgaW4gYW4gaW50ZXJydXB0L2V4Y2VwdGlvbi9OTUkKICBo
YW5kbGVyOgoKCWlmIChjb21pbmcgZnJvbSB1c2VyIHNwYWNlKQoJCXN3YXBncwoJbW92ICVnczo8
cGVyY3B1X29mZnNldD4sICVyZWcxCgkvLyBkZXBlbmRlbnQgbG9hZCBvciBzdG9yZSBiYXNlZCBv
biB0aGUgdmFsdWUgb2YgJXJlZwoJLy8gZm9yIGV4YW1wbGU6IG1vdiAlKHJlZzEpLCAlcmVnMgoK
ICBJZiBhbiBpbnRlcnJ1cHQgaXMgY29taW5nIGZyb20gdXNlciBzcGFjZSwgYW5kIHRoZSBlbnRy
eSBjb2RlCiAgc3BlY3VsYXRpdmVseSBza2lwcyB0aGUgc3dhcGdzIChkdWUgdG8gdXNlciBicmFu
Y2ggbWlzdHJhaW5pbmcpLCBpdAogIG1heSBzcGVjdWxhdGl2ZWx5IGV4ZWN1dGUgdGhlIEdTLWJh
c2VkIGxvYWQgYW5kIGEgc3Vic2VxdWVudCBkZXBlbmRlbnQKICBsb2FkIG9yIHN0b3JlLCBleHBv
c2luZyB0aGUga2VybmVsIGRhdGEgdG8gYW4gTDEgc2lkZSBjaGFubmVsIGxlYWsuCgogIE5vdGUg
dGhhdCwgb24gSW50ZWwsIGEgc2ltaWxhciBhdHRhY2sgZXhpc3RzIGluIHRoZSBhYm92ZSBnYWRn
ZXQgd2hlbgogIGNvbWluZyBmcm9tIGtlcm5lbCBzcGFjZSwgaWYgdGhlIHN3YXBncyBnZXRzIHNw
ZWN1bGF0aXZlbHkgZXhlY3V0ZWQgdG8KICBzd2l0Y2ggYmFjayB0byB0aGUgdXNlciBHUy4gIE9u
IEFNRCwgdGhpcyB2YXJpYW50IGlzbid0IHBvc3NpYmxlCiAgYmVjYXVzZSBzd2FwZ3MgaXMgc2Vy
aWFsaXppbmcgd2l0aCByZXNwZWN0IHRvIGZ1dHVyZSBHUy1iYXNlZAogIGFjY2Vzc2VzLgoKICBO
T1RFOiBUaGUgRlNHU0JBU0UgcGF0Y2ggc2V0IGhhc24ndCBiZWVuIG1lcmdlZCB5ZXQsIHNvIHRo
ZSBhYm92ZSBjYXNlCglkb2Vzbid0IGV4aXN0IHF1aXRlIHlldC4KCi0gV2hlbiBGU0dTQkFTRSBp
cyBkaXNhYmxlZCwgdGhlIGlzc3VlIGlzIG1pdGlnYXRlZCBzb21ld2hhdCBiZWNhdXNlCiAgdW5w
cml2aWxlZ2VkIHVzZXJzIG11c3QgdXNlIHByY3RsKEFSQ0hfU0VUX0dTKSB0byBzZXQgR1MsIHdo
aWNoCiAgcmVzdHJpY3RzIEdTIHZhbHVlcyB0byB1c2VyIHNwYWNlIGFkZHJlc3NlcyBvbmx5LiAg
VGhhdCBtZWFucyB0aGUKICBnYWRnZXQgd291bGQgbmVlZCBhbiBhZGRpdGlvbmFsIHN0ZXAsIHNp
bmNlIHRoZSB0YXJnZXQga2VybmVsIGFkZHJlc3MKICBuZWVkcyB0byBiZSByZWFkIGZyb20gdXNl
ciBzcGFjZSBmaXJzdC4gIFNvbWV0aGluZyBsaWtlOgoKCWlmIChjb21pbmcgZnJvbSB1c2VyIHNw
YWNlKQoJCXN3YXBncwoJbW92ICVnczo8cGVyY3B1X29mZnNldD4sICVyZWcxCgltb3YgKCVyZWcx
KSwgJXJlZzIKCS8vIGRlcGVuZGVudCBsb2FkIG9yIHN0b3JlIGJhc2VkIG9uIHRoZSB2YWx1ZSBv
ZiAlcmVnMgoJLy8gZm9yIGV4YW1wbGU6IG1vdiAlKHJlZzIpLCAlcmVnMwoKICBJdCdzIGRpZmZp
Y3VsdCB0byBhdWRpdCBmb3IgdGhpcyBnYWRnZXQgaW4gYWxsIHRoZSBoYW5kbGVycywgc28gd2hp
bGUKICB0aGVyZSBhcmUgbm8ga25vd24gaW5zdGFuY2VzIG9mIGl0LCBpdCdzIGVudGlyZWx5IHBv
c3NpYmxlIHRoYXQgaXQKICBleGlzdHMgc29tZXdoZXJlIChvciBjb3VsZCBiZSBpbnRyb2R1Y2Vk
IGluIHRoZSBmdXR1cmUpLiAgV2l0aG91dAogIHRvb2xpbmcgdG8gYW5hbHl6ZSBhbGwgc3VjaCBj
b2RlIHBhdGhzLCBjb25zaWRlciBpdCB2dWxuZXJhYmxlLgoKICBFZmZlY3RzIG9mIFNNQVAgb24g
dGhlICFGU0dTQkFTRSBjYXNlOgoKICAtIElmIFNNQVAgaXMgZW5hYmxlZCwgYW5kIHRoZSBDUFUg
cmVwb3J0cyBSRENMX05PIChpLmUuLCBub3QKICAgIHN1c2NlcHRpYmxlIHRvIE1lbHRkb3duKSwg
dGhlIGtlcm5lbCBpcyBwcmV2ZW50ZWQgZnJvbSBzcGVjdWxhdGl2ZWx5CiAgICByZWFkaW5nIHVz
ZXIgc3BhY2UgbWVtb3J5LCBldmVuIEwxIGNhY2hlZCB2YWx1ZXMuICBUaGlzIGVmZmVjdGl2ZWx5
CiAgICBkaXNhYmxlcyB0aGUgIUZTR1NCQVNFIGF0dGFjayB2ZWN0b3IuCgogIC0gSWYgU01BUCBp
cyBlbmFibGVkLCBidXQgdGhlIENQVSAqaXMqIHN1c2NlcHRpYmxlIHRvIE1lbHRkb3duLCBTTUFQ
CiAgICBzdGlsbCBwcmV2ZW50cyB0aGUga2VybmVsIGZyb20gc3BlY3VsYXRpdmVseSByZWFkaW5n
IHVzZXIgc3BhY2UKICAgIG1lbW9yeS4gIEJ1dCBpdCBkb2VzICpub3QqIHByZXZlbnQgdGhlIGtl
cm5lbCBmcm9tIHJlYWRpbmcgdGhlCiAgICB1c2VyIHZhbHVlIGZyb20gTDEsIGlmIGl0IGhhcyBh
bHJlYWR5IGJlZW4gY2FjaGVkLiAgVGhpcyBpcyBwcm9iYWJseQogICAgb25seSBhIHNtYWxsIGh1
cmRsZSBmb3IgYW4gYXR0YWNrZXIgdG8gb3ZlcmNvbWUuCgpUaGFua3MgdG8gRGF2ZSBIYW5zZW4g
Zm9yIGNvbnRyaWJ1dGluZyB0aGUgc3BlY3VsYXRpdmVfc21hcCgpIGZ1bmN0aW9uLgoKVGhhbmtz
IHRvIEFuZHJldyBDb29wZXIgZm9yIHByb3ZpZGluZyB0aGUgaW5zaWRlIHNjb29wIG9uIHdoZXRo
ZXIgc3dhcGdzCmlzIHNlcmlhbGl6aW5nIG9uIEFNRC4KClsgdGdseDogRml4ZWQgdGhlIFVTRVIg
ZmVuY2UgZGVjaXNpb24gYW5kIHBvbGlzaGVkIHRoZSBjb21tZW50IGFzIHN1Z2dlc3RlZAogIAli
eSBEYXZlIEhhbnNlbiBdCgpTaWduZWQtb2ZmLWJ5OiBKb3NoIFBvaW1ib2V1ZiA8anBvaW1ib2VA
cmVkaGF0LmNvbT4KU2lnbmVkLW9mZi1ieTogVGhvbWFzIEdsZWl4bmVyIDx0Z2x4QGxpbnV0cm9u
aXguZGU+ClJldmlld2VkLWJ5OiBEYXZlIEhhbnNlbiA8ZGF2ZS5oYW5zZW5AaW50ZWwuY29tPgpb
YndoOiBCYWNrcG9ydGVkIHRvIDQuOToKIC0gQ2hlY2sgZm9yIFg4Nl9GRUFUVVJFX0tBSVNFUiBp
bnN0ZWFkIG9mIFg4Nl9GRUFUVVJFX1BUSQogLSBtaXRpZ2F0aW9ucz0gcGFyYW1ldGVyIGlzIHg4
Ni1vbmx5IGhlcmUKIC0gQWRqdXN0IGZpbGVuYW1lLCBjb250ZXh0XQpTaWduZWQtb2ZmLWJ5OiBC
ZW4gSHV0Y2hpbmdzIDxiZW5AZGVjYWRlbnQub3JnLnVrPgotLS0KIERvY3VtZW50YXRpb24va2Vy
bmVsLXBhcmFtZXRlcnMudHh0IHwgICA5ICsrLQogYXJjaC94ODYva2VybmVsL2NwdS9idWdzLmMg
ICAgICAgICAgfCAxMTUgKysrKysrKysrKysrKysrKysrKysrKysrKy0tLQogMiBmaWxlcyBjaGFu
Z2VkLCAxMTEgaW5zZXJ0aW9ucygrKSwgMTMgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvRG9j
dW1lbnRhdGlvbi9rZXJuZWwtcGFyYW1ldGVycy50eHQgYi9Eb2N1bWVudGF0aW9uL2tlcm5lbC1w
YXJhbWV0ZXJzLnR4dAppbmRleCA1NWE5YmJiY2Y1ZTEuLmY0ZjBhMWI5YmEyOSAxMDA2NDQKLS0t
IGEvRG9jdW1lbnRhdGlvbi9rZXJuZWwtcGFyYW1ldGVycy50eHQKKysrIGIvRG9jdW1lbnRhdGlv
bi9rZXJuZWwtcGFyYW1ldGVycy50eHQKQEAgLTI0ODQsNiArMjQ4NCw3IEBAIGJ5dGVzIHJlc3Bl
Y3RpdmVseS4gU3VjaCBsZXR0ZXIgc3VmZml4ZXMgY2FuIGFsc28gYmUgZW50aXJlbHkgb21pdHRl
ZC4KIAkJCQlpbXByb3ZlcyBzeXN0ZW0gcGVyZm9ybWFuY2UsIGJ1dCBpdCBtYXkgYWxzbwogCQkJ
CWV4cG9zZSB1c2VycyB0byBzZXZlcmFsIENQVSB2dWxuZXJhYmlsaXRpZXMuCiAJCQkJRXF1aXZh
bGVudCB0bzogbm9wdGkgW1g4Nl0KKwkJCQkJICAgICAgIG5vc3BlY3RyZV92MSBbWDg2XQogCQkJ
CQkgICAgICAgbm9zcGVjdHJlX3YyIFtYODZdCiAJCQkJCSAgICAgICBzcGVjdHJlX3YyX3VzZXI9
b2ZmIFtYODZdCiAJCQkJCSAgICAgICBzcGVjX3N0b3JlX2J5cGFzc19kaXNhYmxlPW9mZiBbWDg2
XQpAQCAtMjgxOSwxMCArMjgyMCw2IEBAIGJ5dGVzIHJlc3BlY3RpdmVseS4gU3VjaCBsZXR0ZXIg
c3VmZml4ZXMgY2FuIGFsc28gYmUgZW50aXJlbHkgb21pdHRlZC4KIAogCW5vaHVnZWlvbWFwCVtL
TkwseDg2XSBEaXNhYmxlIGtlcm5lbCBodWdlIEkvTyBtYXBwaW5ncy4KIAotCW5vc3BlY3RyZV92
MQlbUFBDXSBEaXNhYmxlIG1pdGlnYXRpb25zIGZvciBTcGVjdHJlIFZhcmlhbnQgMSAoYm91bmRz
Ci0JCQljaGVjayBieXBhc3MpLiBXaXRoIHRoaXMgb3B0aW9uIGRhdGEgbGVha3MgYXJlIHBvc3Np
YmxlCi0JCQlpbiB0aGUgc3lzdGVtLgotCiAJbm9zbXQJCVtLTkwsUzM5MF0gRGlzYWJsZSBzeW1t
ZXRyaWMgbXVsdGl0aHJlYWRpbmcgKFNNVCkuCiAJCQlFcXVpdmFsZW50IHRvIHNtdD0xLgogCkBA
IC0yODMwLDYgKzI4MjcsMTAgQEAgYnl0ZXMgcmVzcGVjdGl2ZWx5LiBTdWNoIGxldHRlciBzdWZm
aXhlcyBjYW4gYWxzbyBiZSBlbnRpcmVseSBvbWl0dGVkLgogCQkJbm9zbXQ9Zm9yY2U6IEZvcmNl
IGRpc2FibGUgU01ULCBjYW5ub3QgYmUgdW5kb25lCiAJCQkJICAgICB2aWEgdGhlIHN5c2ZzIGNv
bnRyb2wgZmlsZS4KIAorCW5vc3BlY3RyZV92MQlbWDg2LFBQQ10gRGlzYWJsZSBtaXRpZ2F0aW9u
cyBmb3IgU3BlY3RyZSBWYXJpYW50IDEKKwkJCShib3VuZHMgY2hlY2sgYnlwYXNzKS4gV2l0aCB0
aGlzIG9wdGlvbiBkYXRhIGxlYWtzIGFyZQorCQkJcG9zc2libGUgaW4gdGhlIHN5c3RlbS4KKwog
CW5vc3BlY3RyZV92MglbWDg2LFBQQ19GU0xfQk9PSzNFXSBEaXNhYmxlIGFsbCBtaXRpZ2F0aW9u
cyBmb3IgdGhlIFNwZWN0cmUgdmFyaWFudCAyCiAJCQkoaW5kaXJlY3QgYnJhbmNoIHByZWRpY3Rp
b24pIHZ1bG5lcmFiaWxpdHkuIFN5c3RlbSBtYXkKIAkJCWFsbG93IGRhdGEgbGVha3Mgd2l0aCB0
aGlzIG9wdGlvbiwgd2hpY2ggaXMgZXF1aXZhbGVudApkaWZmIC0tZ2l0IGEvYXJjaC94ODYva2Vy
bmVsL2NwdS9idWdzLmMgYi9hcmNoL3g4Ni9rZXJuZWwvY3B1L2J1Z3MuYwppbmRleCBhNGYzNDNh
YzA0MmUuLjA0ZDQ0NjE3NWFmMiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva2VybmVsL2NwdS9idWdz
LmMKKysrIGIvYXJjaC94ODYva2VybmVsL2NwdS9idWdzLmMKQEAgLTMxLDYgKzMxLDcgQEAKICNp
bmNsdWRlIDxhc20vaW50ZWwtZmFtaWx5Lmg+CiAjaW5jbHVkZSA8YXNtL2U4MjAuaD4KIAorc3Rh
dGljIHZvaWQgX19pbml0IHNwZWN0cmVfdjFfc2VsZWN0X21pdGlnYXRpb24odm9pZCk7CiBzdGF0
aWMgdm9pZCBfX2luaXQgc3BlY3RyZV92Ml9zZWxlY3RfbWl0aWdhdGlvbih2b2lkKTsKIHN0YXRp
YyB2b2lkIF9faW5pdCBzc2Jfc2VsZWN0X21pdGlnYXRpb24odm9pZCk7CiBzdGF0aWMgdm9pZCBf
X2luaXQgbDF0Zl9zZWxlY3RfbWl0aWdhdGlvbih2b2lkKTsKQEAgLTk1LDE3ICs5NiwxMSBAQCB2
b2lkIF9faW5pdCBjaGVja19idWdzKHZvaWQpCiAJaWYgKGJvb3RfY3B1X2hhcyhYODZfRkVBVFVS
RV9TVElCUCkpCiAJCXg4Nl9zcGVjX2N0cmxfbWFzayB8PSBTUEVDX0NUUkxfU1RJQlA7CiAKLQkv
KiBTZWxlY3QgdGhlIHByb3BlciBzcGVjdHJlIG1pdGlnYXRpb24gYmVmb3JlIHBhdGNoaW5nIGFs
dGVybmF0aXZlcyAqLworCS8qIFNlbGVjdCB0aGUgcHJvcGVyIENQVSBtaXRpZ2F0aW9ucyBiZWZv
cmUgcGF0Y2hpbmcgYWx0ZXJuYXRpdmVzOiAqLworCXNwZWN0cmVfdjFfc2VsZWN0X21pdGlnYXRp
b24oKTsKIAlzcGVjdHJlX3YyX3NlbGVjdF9taXRpZ2F0aW9uKCk7Ci0KLQkvKgotCSAqIFNlbGVj
dCBwcm9wZXIgbWl0aWdhdGlvbiBmb3IgYW55IGV4cG9zdXJlIHRvIHRoZSBTcGVjdWxhdGl2ZSBT
dG9yZQotCSAqIEJ5cGFzcyB2dWxuZXJhYmlsaXR5LgotCSAqLwogCXNzYl9zZWxlY3RfbWl0aWdh
dGlvbigpOwotCiAJbDF0Zl9zZWxlY3RfbWl0aWdhdGlvbigpOwotCiAJbWRzX3NlbGVjdF9taXRp
Z2F0aW9uKCk7CiAKIAlhcmNoX3NtdF91cGRhdGUoKTsKQEAgLTI3MCw2ICsyNjUsMTA4IEBAIHN0
YXRpYyBpbnQgX19pbml0IG1kc19jbWRsaW5lKGNoYXIgKnN0cikKIH0KIGVhcmx5X3BhcmFtKCJt
ZHMiLCBtZHNfY21kbGluZSk7CiAKKyN1bmRlZiBwcl9mbXQKKyNkZWZpbmUgcHJfZm10KGZtdCkg
ICAgICJTcGVjdHJlIFYxIDogIiBmbXQKKworZW51bSBzcGVjdHJlX3YxX21pdGlnYXRpb24gewor
CVNQRUNUUkVfVjFfTUlUSUdBVElPTl9OT05FLAorCVNQRUNUUkVfVjFfTUlUSUdBVElPTl9BVVRP
LAorfTsKKworc3RhdGljIGVudW0gc3BlY3RyZV92MV9taXRpZ2F0aW9uIHNwZWN0cmVfdjFfbWl0
aWdhdGlvbiBfX3JvX2FmdGVyX2luaXQgPQorCVNQRUNUUkVfVjFfTUlUSUdBVElPTl9BVVRPOwor
CitzdGF0aWMgY29uc3QgY2hhciAqIGNvbnN0IHNwZWN0cmVfdjFfc3RyaW5nc1tdID0geworCVtT
UEVDVFJFX1YxX01JVElHQVRJT05fTk9ORV0gPSAiVnVsbmVyYWJsZTogX191c2VyIHBvaW50ZXIg
c2FuaXRpemF0aW9uIGFuZCB1c2VyY29weSBiYXJyaWVycyBvbmx5OyBubyBzd2FwZ3MgYmFycmll
cnMiLAorCVtTUEVDVFJFX1YxX01JVElHQVRJT05fQVVUT10gPSAiTWl0aWdhdGlvbjogdXNlcmNv
cHkvc3dhcGdzIGJhcnJpZXJzIGFuZCBfX3VzZXIgcG9pbnRlciBzYW5pdGl6YXRpb24iLAorfTsK
Kworc3RhdGljIGJvb2wgaXNfc3dhcGdzX3NlcmlhbGl6aW5nKHZvaWQpCit7CisJLyoKKwkgKiBU
ZWNobmljYWxseSwgc3dhcGdzIGlzbid0IHNlcmlhbGl6aW5nIG9uIEFNRCAoZGVzcGl0ZSBpdCBw
cmV2aW91c2x5CisJICogYmVpbmcgZG9jdW1lbnRlZCBhcyBzdWNoIGluIHRoZSBBUE0pLiAgQnV0
IGFjY29yZGluZyB0byBBTUQsICVncyBpcworCSAqIHVwZGF0ZWQgbm9uLXNwZWN1bGF0aXZlbHks
IGFuZCB0aGUgaXNzdWluZyBvZiAlZ3MtcmVsYXRpdmUgbWVtb3J5CisJICogb3BlcmFuZHMgd2ls
bCBiZSBibG9ja2VkIHVudGlsIHRoZSAlZ3MgdXBkYXRlIGNvbXBsZXRlcywgd2hpY2ggaXMKKwkg
KiBnb29kIGVub3VnaCBmb3Igb3VyIHB1cnBvc2VzLgorCSAqLworCXJldHVybiBib290X2NwdV9k
YXRhLng4Nl92ZW5kb3IgPT0gWDg2X1ZFTkRPUl9BTUQ7Cit9CisKKy8qCisgKiBEb2VzIFNNQVAg
cHJvdmlkZSBmdWxsIG1pdGlnYXRpb24gYWdhaW5zdCBzcGVjdWxhdGl2ZSBrZXJuZWwgYWNjZXNz
IHRvCisgKiB1c2Vyc3BhY2U/CisgKi8KK3N0YXRpYyBib29sIHNtYXBfd29ya3Nfc3BlY3VsYXRp
dmVseSh2b2lkKQoreworCWlmICghYm9vdF9jcHVfaGFzKFg4Nl9GRUFUVVJFX1NNQVApKQorCQly
ZXR1cm4gZmFsc2U7CisKKwkvKgorCSAqIE9uIENQVXMgd2hpY2ggYXJlIHZ1bG5lcmFibGUgdG8g
TWVsdGRvd24sIFNNQVAgZG9lcyBub3QKKwkgKiBwcmV2ZW50IHNwZWN1bGF0aXZlIGFjY2VzcyB0
byB1c2VyIGRhdGEgaW4gdGhlIEwxIGNhY2hlLgorCSAqIENvbnNpZGVyIFNNQVAgdG8gYmUgbm9u
LWZ1bmN0aW9uYWwgYXMgYSBtaXRpZ2F0aW9uIG9uIHRoZXNlCisJICogQ1BVcy4KKwkgKi8KKwlp
ZiAoYm9vdF9jcHVfaGFzKFg4Nl9CVUdfQ1BVX01FTFRET1dOKSkKKwkJcmV0dXJuIGZhbHNlOwor
CisJcmV0dXJuIHRydWU7Cit9CisKK3N0YXRpYyB2b2lkIF9faW5pdCBzcGVjdHJlX3YxX3NlbGVj
dF9taXRpZ2F0aW9uKHZvaWQpCit7CisJaWYgKCFib290X2NwdV9oYXNfYnVnKFg4Nl9CVUdfU1BF
Q1RSRV9WMSkgfHwgY3B1X21pdGlnYXRpb25zX29mZigpKSB7CisJCXNwZWN0cmVfdjFfbWl0aWdh
dGlvbiA9IFNQRUNUUkVfVjFfTUlUSUdBVElPTl9OT05FOworCQlyZXR1cm47CisJfQorCisJaWYg
KHNwZWN0cmVfdjFfbWl0aWdhdGlvbiA9PSBTUEVDVFJFX1YxX01JVElHQVRJT05fQVVUTykgewor
CQkvKgorCQkgKiBXaXRoIFNwZWN0cmUgdjEsIGEgdXNlciBjYW4gc3BlY3VsYXRpdmVseSBjb250
cm9sIGVpdGhlcgorCQkgKiBwYXRoIG9mIGEgY29uZGl0aW9uYWwgc3dhcGdzIHdpdGggYSB1c2Vy
LWNvbnRyb2xsZWQgR1MKKwkJICogdmFsdWUuICBUaGUgbWl0aWdhdGlvbiBpcyB0byBhZGQgbGZl
bmNlcyB0byBib3RoIGNvZGUgcGF0aHMuCisJCSAqCisJCSAqIElmIEZTR1NCQVNFIGlzIGVuYWJs
ZWQsIHRoZSB1c2VyIGNhbiBwdXQgYSBrZXJuZWwgYWRkcmVzcyBpbgorCQkgKiBHUywgaW4gd2hp
Y2ggY2FzZSBTTUFQIHByb3ZpZGVzIG5vIHByb3RlY3Rpb24uCisJCSAqCisJCSAqIFsgTk9URTog
RG9uJ3QgY2hlY2sgZm9yIFg4Nl9GRUFUVVJFX0ZTR1NCQVNFIHVudGlsIHRoZQorCQkgKgkgICBG
U0dTQkFTRSBlbmFibGVtZW50IHBhdGNoZXMgaGF2ZSBiZWVuIG1lcmdlZC4gXQorCQkgKgorCQkg
KiBJZiBGU0dTQkFTRSBpcyBkaXNhYmxlZCwgdGhlIHVzZXIgY2FuIG9ubHkgcHV0IGEgdXNlciBz
cGFjZQorCQkgKiBhZGRyZXNzIGluIEdTLiAgVGhhdCBtYWtlcyBhbiBhdHRhY2sgaGFyZGVyLCBi
dXQgc3RpbGwKKwkJICogcG9zc2libGUgaWYgdGhlcmUncyBubyBTTUFQIHByb3RlY3Rpb24uCisJ
CSAqLworCQlpZiAoIXNtYXBfd29ya3Nfc3BlY3VsYXRpdmVseSgpKSB7CisJCQkvKgorCQkJICog
TWl0aWdhdGlvbiBjYW4gYmUgcHJvdmlkZWQgZnJvbSBTV0FQR1MgaXRzZWxmIG9yCisJCQkgKiBQ
VEkgYXMgdGhlIENSMyB3cml0ZSBpbiB0aGUgTWVsdGRvd24gbWl0aWdhdGlvbgorCQkJICogaXMg
c2VyaWFsaXppbmcuCisJCQkgKgorCQkJICogSWYgbmVpdGhlciBpcyB0aGVyZSwgbWl0aWdhdGUg
d2l0aCBhbiBMRkVOQ0UuCisJCQkgKi8KKwkJCWlmICghaXNfc3dhcGdzX3NlcmlhbGl6aW5nKCkg
JiYgIWJvb3RfY3B1X2hhcyhYODZfRkVBVFVSRV9LQUlTRVIpKQorCQkJCXNldHVwX2ZvcmNlX2Nw
dV9jYXAoWDg2X0ZFQVRVUkVfRkVOQ0VfU1dBUEdTX1VTRVIpOworCisJCQkvKgorCQkJICogRW5h
YmxlIGxmZW5jZXMgaW4gdGhlIGtlcm5lbCBlbnRyeSAobm9uLXN3YXBncykKKwkJCSAqIHBhdGhz
LCB0byBwcmV2ZW50IHVzZXIgZW50cnkgZnJvbSBzcGVjdWxhdGl2ZWx5CisJCQkgKiBza2lwcGlu
ZyBzd2FwZ3MuCisJCQkgKi8KKwkJCXNldHVwX2ZvcmNlX2NwdV9jYXAoWDg2X0ZFQVRVUkVfRkVO
Q0VfU1dBUEdTX0tFUk5FTCk7CisJCX0KKwl9CisKKwlwcl9pbmZvKCIlc1xuIiwgc3BlY3RyZV92
MV9zdHJpbmdzW3NwZWN0cmVfdjFfbWl0aWdhdGlvbl0pOworfQorCitzdGF0aWMgaW50IF9faW5p
dCBub3NwZWN0cmVfdjFfY21kbGluZShjaGFyICpzdHIpCit7CisJc3BlY3RyZV92MV9taXRpZ2F0
aW9uID0gU1BFQ1RSRV9WMV9NSVRJR0FUSU9OX05PTkU7CisJcmV0dXJuIDA7Cit9CitlYXJseV9w
YXJhbSgibm9zcGVjdHJlX3YxIiwgbm9zcGVjdHJlX3YxX2NtZGxpbmUpOworCiAjdW5kZWYgcHJf
Zm10CiAjZGVmaW5lIHByX2ZtdChmbXQpICAgICAiU3BlY3RyZSBWMiA6ICIgZm10CiAKQEAgLTEy
NjUsNyArMTM2Miw3IEBAIHN0YXRpYyBzc2l6ZV90IGNwdV9zaG93X2NvbW1vbihzdHJ1Y3QgZGV2
aWNlICpkZXYsIHN0cnVjdCBkZXZpY2VfYXR0cmlidXRlICphdHRyCiAJCWJyZWFrOwogCiAJY2Fz
ZSBYODZfQlVHX1NQRUNUUkVfVjE6Ci0JCXJldHVybiBzcHJpbnRmKGJ1ZiwgIk1pdGlnYXRpb246
IF9fdXNlciBwb2ludGVyIHNhbml0aXphdGlvblxuIik7CisJCXJldHVybiBzcHJpbnRmKGJ1Ziwg
IiVzXG4iLCBzcGVjdHJlX3YxX3N0cmluZ3Nbc3BlY3RyZV92MV9taXRpZ2F0aW9uXSk7CiAKIAlj
YXNlIFg4Nl9CVUdfU1BFQ1RSRV9WMjoKIAkJcmV0dXJuIHNwcmludGYoYnVmLCAiJXMlcyVzJXMl
cyVzXG4iLCBzcGVjdHJlX3YyX3N0cmluZ3Nbc3BlY3RyZV92Ml9lbmFibGVkXSwKCkZyb20gZjU5
MTg1NTRiYWNhMTdiMmE3MGMxNjg5YjgwNDAyYmQwZjMxOThjZSBNb24gU2VwIDE3IDAwOjAwOjAw
IDIwMDEKRnJvbTogSm9zaCBQb2ltYm9ldWYgPGpwb2ltYm9lQHJlZGhhdC5jb20+CkRhdGU6IE1v
biwgMTUgSnVsIDIwMTkgMTE6NTE6MzkgLTA1MDAKU3ViamVjdDogW1BBVENIIDQvNV0geDg2L2Vu
dHJ5LzY0OiBVc2UgSk1QIGluc3RlYWQgb2YgSk1QUQoKY29tbWl0IDY0ZGJjMTIyYjIwZjc1MTgz
ZDg4MjI2MThjMjRmODUxNDRhNWE5NGQgdXBzdHJlYW0uCgpTb21laG93IHRoZSBzd2FwZ3MgbWl0
aWdhdGlvbiBlbnRyeSBjb2RlIHBhdGNoIGVuZGVkIHVwIHdpdGggYSBKTVBRCmluc3RydWN0aW9u
IGluc3RlYWQgb2YgSk1QLCB3aGVyZSBvbmx5IHRoZSBzaG9ydCBqdW1wIGlzIG5lZWRlZC4gIFNv
bWUKYXNzZW1ibGVyIHZlcnNpb25zIGFwcGFyZW50bHkgZmFpbCB0byBvcHRpbWl6ZSBKTVBRIGlu
dG8gYSB0d28tYnl0ZSBKTVAKd2hlbiBwb3NzaWJsZSwgaW5zdGVhZCBhbHdheXMgdXNpbmcgYSA3
LWJ5dGUgSk1QIHdpdGggcmVsb2NhdGlvbi4gIEZvcgpzb21lIHJlYXNvbiB0aGF0IG1ha2VzIHRo
ZSBlbnRyeSBjb2RlIGV4cGxvZGUgd2l0aCBhICNHUCBkdXJpbmcgYm9vdC4KCkNoYW5nZSBpdCBi
YWNrIHRvICJKTVAiIGFzIG9yaWdpbmFsbHkgaW50ZW5kZWQuCgpGaXhlczogMThlYzU0ZmRkNmQx
ICgieDg2L3NwZWN1bGF0aW9uOiBQcmVwYXJlIGVudHJ5IGNvZGUgZm9yIFNwZWN0cmUgdjEgc3dh
cGdzIG1pdGlnYXRpb25zIikKU2lnbmVkLW9mZi1ieTogSm9zaCBQb2ltYm9ldWYgPGpwb2ltYm9l
QHJlZGhhdC5jb20+ClNpZ25lZC1vZmYtYnk6IFRob21hcyBHbGVpeG5lciA8dGdseEBsaW51dHJv
bml4LmRlPgpbYndoOiBCYWNrcG9ydGVkIHRvIDQuOTogYWRqdXN0IGNvbnRleHRdClNpZ25lZC1v
ZmYtYnk6IEJlbiBIdXRjaGluZ3MgPGJlbkBkZWNhZGVudC5vcmcudWs+Ci0tLQogYXJjaC94ODYv
ZW50cnkvZW50cnlfNjQuUyB8IDIgKy0KIDEgZmlsZSBjaGFuZ2VkLCAxIGluc2VydGlvbigrKSwg
MSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2VudHJ5L2VudHJ5XzY0LlMgYi9h
cmNoL3g4Ni9lbnRyeS9lbnRyeV82NC5TCmluZGV4IDU5MmY2MmZjNDlmMC4uMTBlY2ZiYTQzZGZm
IDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9lbnRyeS9lbnRyeV82NC5TCisrKyBiL2FyY2gveDg2L2Vu
dHJ5L2VudHJ5XzY0LlMKQEAgLTQzNCw3ICs0MzQsNyBAQCBFTkQoaXJxX2VudHJpZXNfc3RhcnQp
CiAJVFJBQ0VfSVJRU19PRkYKIAogCUNBTExfZW50ZXJfZnJvbV91c2VyX21vZGUKLQlqbXBxCTJm
CisJam1wCTJmCiAxOgogCUZFTkNFX1NXQVBHU19LRVJORUxfRU5UUlkKIDI6CgpGcm9tIGY2ZGRi
ZmE0MDllZjAyNWZlMTExM2VjMTQ1M2Y3ODUzMzkwYmU1YjEgTW9uIFNlcCAxNyAwMDowMDowMCAy
MDAxCkZyb206IFRob21hcyBHbGVpeG5lciA8dGdseEBsaW51dHJvbml4LmRlPgpEYXRlOiBXZWQs
IDE3IEp1bCAyMDE5IDIxOjE4OjU5ICswMjAwClN1YmplY3Q6IFtQQVRDSCA1LzVdIHg4Ni9zcGVj
dWxhdGlvbi9zd2FwZ3M6IEV4Y2x1ZGUgQVRPTXMgZnJvbSBzcGVjdWxhdGlvbgogdGhyb3VnaCBT
V0FQR1MKCmNvbW1pdCBmMzZjZjM4NmUzZmVjMjU4YTM0MWQ0NDY5MTU4NjJlZGVkM2UxM2Q4IHVw
c3RyZWFtLgoKSW50ZWwgcHJvdmlkZWQgdGhlIGZvbGxvd2luZyBpbmZvcm1hdGlvbjoKCiBPbiBh
bGwgY3VycmVudCBBdG9tIHByb2Nlc3NvcnMsIGluc3RydWN0aW9ucyB0aGF0IHVzZSBhIHNlZ21l
bnQgcmVnaXN0ZXIKIHZhbHVlIChlLmcuIGEgbG9hZCBvciBzdG9yZSkgd2lsbCBub3Qgc3BlY3Vs
YXRpdmVseSBleGVjdXRlIGJlZm9yZSB0aGUKIGxhc3Qgd3JpdGVyIG9mIHRoYXQgc2VnbWVudCBy
ZXRpcmVzLiBUaHVzIHRoZXkgd2lsbCBub3QgdXNlIGEKIHNwZWN1bGF0aXZlbHkgd3JpdHRlbiBz
ZWdtZW50IHZhbHVlLgoKVGhhdCBtZWFucyBvbiBBVE9NcyB0aGVyZSBpcyBubyBzcGVjdWxhdGlv
biB0aHJvdWdoIFNXQVBHUywgc28gdGhlIFNXQVBHUwplbnRyeSBwYXRocyBjYW4gYmUgZXhjbHVk
ZWQgZnJvbSB0aGUgZXh0cmEgTEZFTkNFIGlmIFBUSSBpcyBkaXNhYmxlZC4KCkNyZWF0ZSBhIHNl
cGFyYXRlIGJ1ZyBmbGFnIGZvciB0aGUgdGhyb3VnaCBTV0FQR1Mgc3BlY3VsYXRpb24gYW5kIG1h
cmsgYWxsCm91dC1vZi1vcmRlciBBVE9NcyBhbmQgQU1EL0hZR09OIENQVXMgYXMgbm90IGFmZmVj
dGVkLiBUaGUgaW4tb3JkZXIgQVRPTXMKYXJlIGV4Y2x1ZGVkIGZyb20gdGhlIHdob2xlIG1pdGln
YXRpb24gbWVzcyBhbnl3YXkuCgpSZXBvcnRlZC1ieTogQW5kcmV3IENvb3BlciA8YW5kcmV3LmNv
b3BlcjNAY2l0cml4LmNvbT4KU2lnbmVkLW9mZi1ieTogVGhvbWFzIEdsZWl4bmVyIDx0Z2x4QGxp
bnV0cm9uaXguZGU+ClJldmlld2VkLWJ5OiBUeWxlciBIaWNrcyA8dHloaWNrc0BjYW5vbmljYWwu
Y29tPgpSZXZpZXdlZC1ieTogSm9zaCBQb2ltYm9ldWYgPGpwb2ltYm9lQHJlZGhhdC5jb20+Clti
d2g6IEJhY2twb3J0ZWQgdG8gNC40OgogLSBUaGVyZSdzIG5vIHdoaXRlbGlzdCBlbnRyeSAob3Ig
YW55IHN1cHBvcnQpIGZvciBIeWdvbiBDUFVzCiAtIEFkanVzdCBjb250ZXh0LCBpbmRlbnRhdGlv
bl0KU2lnbmVkLW9mZi1ieTogQmVuIEh1dGNoaW5ncyA8YmVuQGRlY2FkZW50Lm9yZy51az4KLS0t
CiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS9jcHVmZWF0dXJlcy5oIHwgIDEgKwogYXJjaC94ODYva2Vy
bmVsL2NwdS9idWdzLmMgICAgICAgICB8IDE4ICsrKy0tLS0tLS0tLS0KIGFyY2gveDg2L2tlcm5l
bC9jcHUvY29tbW9uLmMgICAgICAgfCA0MiArKysrKysrKysrKysrKysrKysrLS0tLS0tLS0tLS0K
IDMgZmlsZXMgY2hhbmdlZCwgMzIgaW5zZXJ0aW9ucygrKSwgMjkgZGVsZXRpb25zKC0pCgpkaWZm
IC0tZ2l0IGEvYXJjaC94ODYvaW5jbHVkZS9hc20vY3B1ZmVhdHVyZXMuaCBiL2FyY2gveDg2L2lu
Y2x1ZGUvYXNtL2NwdWZlYXR1cmVzLmgKaW5kZXggN2M0NzYxNGI4ZDlkLi4zYTk3MmRhMTU1ZDYg
MTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2luY2x1ZGUvYXNtL2NwdWZlYXR1cmVzLmgKKysrIGIvYXJj
aC94ODYvaW5jbHVkZS9hc20vY3B1ZmVhdHVyZXMuaApAQCAtMzU2LDUgKzM1Niw2IEBACiAjZGVm
aW5lIFg4Nl9CVUdfTDFURgkJWDg2X0JVRygxOCkgLyogQ1BVIGlzIGFmZmVjdGVkIGJ5IEwxIFRl
cm1pbmFsIEZhdWx0ICovCiAjZGVmaW5lIFg4Nl9CVUdfTURTCQlYODZfQlVHKDE5KSAvKiBDUFUg
aXMgYWZmZWN0ZWQgYnkgTWljcm9hcmNoaXRlY3R1cmFsIGRhdGEgc2FtcGxpbmcgKi8KICNkZWZp
bmUgWDg2X0JVR19NU0JEU19PTkxZCVg4Nl9CVUcoMjApIC8qIENQVSBpcyBvbmx5IGFmZmVjdGVk
IGJ5IHRoZSAgTVNEQlMgdmFyaWFudCBvZiBCVUdfTURTICovCisjZGVmaW5lIFg4Nl9CVUdfU1dB
UEdTCQlYODZfQlVHKDIxKSAvKiBDUFUgaXMgYWZmZWN0ZWQgYnkgc3BlY3VsYXRpb24gdGhyb3Vn
aCBTV0FQR1MgKi8KIAogI2VuZGlmIC8qIF9BU01fWDg2X0NQVUZFQVRVUkVTX0ggKi8KZGlmZiAt
LWdpdCBhL2FyY2gveDg2L2tlcm5lbC9jcHUvYnVncy5jIGIvYXJjaC94ODYva2VybmVsL2NwdS9i
dWdzLmMKaW5kZXggMDRkNDQ2MTc1YWYyLi4yYTQyZmVmMjc1YWQgMTAwNjQ0Ci0tLSBhL2FyY2gv
eDg2L2tlcm5lbC9jcHUvYnVncy5jCisrKyBiL2FyY2gveDg2L2tlcm5lbC9jcHUvYnVncy5jCkBA
IC0yODEsMTggKzI4MSw2IEBAIHN0YXRpYyBjb25zdCBjaGFyICogY29uc3Qgc3BlY3RyZV92MV9z
dHJpbmdzW10gPSB7CiAJW1NQRUNUUkVfVjFfTUlUSUdBVElPTl9BVVRPXSA9ICJNaXRpZ2F0aW9u
OiB1c2VyY29weS9zd2FwZ3MgYmFycmllcnMgYW5kIF9fdXNlciBwb2ludGVyIHNhbml0aXphdGlv
biIsCiB9OwogCi1zdGF0aWMgYm9vbCBpc19zd2FwZ3Nfc2VyaWFsaXppbmcodm9pZCkKLXsKLQkv
KgotCSAqIFRlY2huaWNhbGx5LCBzd2FwZ3MgaXNuJ3Qgc2VyaWFsaXppbmcgb24gQU1EIChkZXNw
aXRlIGl0IHByZXZpb3VzbHkKLQkgKiBiZWluZyBkb2N1bWVudGVkIGFzIHN1Y2ggaW4gdGhlIEFQ
TSkuICBCdXQgYWNjb3JkaW5nIHRvIEFNRCwgJWdzIGlzCi0JICogdXBkYXRlZCBub24tc3BlY3Vs
YXRpdmVseSwgYW5kIHRoZSBpc3N1aW5nIG9mICVncy1yZWxhdGl2ZSBtZW1vcnkKLQkgKiBvcGVy
YW5kcyB3aWxsIGJlIGJsb2NrZWQgdW50aWwgdGhlICVncyB1cGRhdGUgY29tcGxldGVzLCB3aGlj
aCBpcwotCSAqIGdvb2QgZW5vdWdoIGZvciBvdXIgcHVycG9zZXMuCi0JICovCi0JcmV0dXJuIGJv
b3RfY3B1X2RhdGEueDg2X3ZlbmRvciA9PSBYODZfVkVORE9SX0FNRDsKLX0KLQogLyoKICAqIERv
ZXMgU01BUCBwcm92aWRlIGZ1bGwgbWl0aWdhdGlvbiBhZ2FpbnN0IHNwZWN1bGF0aXZlIGtlcm5l
bCBhY2Nlc3MgdG8KICAqIHVzZXJzcGFjZT8KQEAgLTM0Myw5ICszMzEsMTEgQEAgc3RhdGljIHZv
aWQgX19pbml0IHNwZWN0cmVfdjFfc2VsZWN0X21pdGlnYXRpb24odm9pZCkKIAkJCSAqIFBUSSBh
cyB0aGUgQ1IzIHdyaXRlIGluIHRoZSBNZWx0ZG93biBtaXRpZ2F0aW9uCiAJCQkgKiBpcyBzZXJp
YWxpemluZy4KIAkJCSAqCi0JCQkgKiBJZiBuZWl0aGVyIGlzIHRoZXJlLCBtaXRpZ2F0ZSB3aXRo
IGFuIExGRU5DRS4KKwkJCSAqIElmIG5laXRoZXIgaXMgdGhlcmUsIG1pdGlnYXRlIHdpdGggYW4g
TEZFTkNFIHRvCisJCQkgKiBzdG9wIHNwZWN1bGF0aW9uIHRocm91Z2ggc3dhcGdzLgogCQkJICov
Ci0JCQlpZiAoIWlzX3N3YXBnc19zZXJpYWxpemluZygpICYmICFib290X2NwdV9oYXMoWDg2X0ZF
QVRVUkVfS0FJU0VSKSkKKwkJCWlmIChib290X2NwdV9oYXNfYnVnKFg4Nl9CVUdfU1dBUEdTKSAm
JgorCQkJICAgICFib290X2NwdV9oYXMoWDg2X0ZFQVRVUkVfS0FJU0VSKSkKIAkJCQlzZXR1cF9m
b3JjZV9jcHVfY2FwKFg4Nl9GRUFUVVJFX0ZFTkNFX1NXQVBHU19VU0VSKTsKIAogCQkJLyoKZGlm
ZiAtLWdpdCBhL2FyY2gveDg2L2tlcm5lbC9jcHUvY29tbW9uLmMgYi9hcmNoL3g4Ni9rZXJuZWwv
Y3B1L2NvbW1vbi5jCmluZGV4IGNkYTEzMGRjNTZiOS4uMTJmYTE2MDUxODcxIDEwMDY0NAotLS0g
YS9hcmNoL3g4Ni9rZXJuZWwvY3B1L2NvbW1vbi5jCisrKyBiL2FyY2gveDg2L2tlcm5lbC9jcHUv
Y29tbW9uLmMKQEAgLTg5Nyw2ICs4OTcsNyBAQCBzdGF0aWMgdm9pZCBpZGVudGlmeV9jcHVfd2l0
aG91dF9jcHVpZChzdHJ1Y3QgY3B1aW5mb194ODYgKmMpCiAjZGVmaW5lIE5PX0wxVEYJCUJJVCgz
KQogI2RlZmluZSBOT19NRFMJCUJJVCg0KQogI2RlZmluZSBNU0JEU19PTkxZCUJJVCg1KQorI2Rl
ZmluZSBOT19TV0FQR1MJQklUKDYpCiAKICNkZWZpbmUgVlVMTldMKF92ZW5kb3IsIF9mYW1pbHks
IF9tb2RlbCwgX3doaXRlbGlzdCkJXAogCXsgWDg2X1ZFTkRPUl8jI192ZW5kb3IsIF9mYW1pbHks
IF9tb2RlbCwgWDg2X0ZFQVRVUkVfQU5ZLCBfd2hpdGVsaXN0IH0KQEAgLTkyMCwyOSArOTIxLDM3
IEBAIHN0YXRpYyBjb25zdCBfX2luaXRjb25zdCBzdHJ1Y3QgeDg2X2NwdV9pZCBjcHVfdnVsbl93
aGl0ZWxpc3RbXSA9IHsKIAlWVUxOV0xfSU5URUwoQVRPTV9CT05ORUxMLAkJTk9fU1BFQ1VMQVRJ
T04pLAogCVZVTE5XTF9JTlRFTChBVE9NX0JPTk5FTExfTUlELAkJTk9fU1BFQ1VMQVRJT04pLAog
Ci0JVlVMTldMX0lOVEVMKEFUT01fU0lMVkVSTU9OVCwJCU5PX1NTQiB8IE5PX0wxVEYgfCBNU0JE
U19PTkxZKSwKLQlWVUxOV0xfSU5URUwoQVRPTV9TSUxWRVJNT05UX1gsCQlOT19TU0IgfCBOT19M
MVRGIHwgTVNCRFNfT05MWSksCi0JVlVMTldMX0lOVEVMKEFUT01fU0lMVkVSTU9OVF9NSUQsCU5P
X1NTQiB8IE5PX0wxVEYgfCBNU0JEU19PTkxZKSwKLQlWVUxOV0xfSU5URUwoQVRPTV9BSVJNT05U
LAkJTk9fU1NCIHwgTk9fTDFURiB8IE1TQkRTX09OTFkpLAotCVZVTE5XTF9JTlRFTChYRU9OX1BI
SV9LTkwsCQlOT19TU0IgfCBOT19MMVRGIHwgTVNCRFNfT05MWSksCi0JVlVMTldMX0lOVEVMKFhF
T05fUEhJX0tOTSwJCU5PX1NTQiB8IE5PX0wxVEYgfCBNU0JEU19PTkxZKSwKKwlWVUxOV0xfSU5U
RUwoQVRPTV9TSUxWRVJNT05ULAkJTk9fU1NCIHwgTk9fTDFURiB8IE1TQkRTX09OTFkgfCBOT19T
V0FQR1MpLAorCVZVTE5XTF9JTlRFTChBVE9NX1NJTFZFUk1PTlRfWCwJCU5PX1NTQiB8IE5PX0wx
VEYgfCBNU0JEU19PTkxZIHwgTk9fU1dBUEdTKSwKKwlWVUxOV0xfSU5URUwoQVRPTV9TSUxWRVJN
T05UX01JRCwJTk9fU1NCIHwgTk9fTDFURiB8IE1TQkRTX09OTFkgfCBOT19TV0FQR1MpLAorCVZV
TE5XTF9JTlRFTChBVE9NX0FJUk1PTlQsCQlOT19TU0IgfCBOT19MMVRGIHwgTVNCRFNfT05MWSB8
IE5PX1NXQVBHUyksCisJVlVMTldMX0lOVEVMKFhFT05fUEhJX0tOTCwJCU5PX1NTQiB8IE5PX0wx
VEYgfCBNU0JEU19PTkxZIHwgTk9fU1dBUEdTKSwKKwlWVUxOV0xfSU5URUwoWEVPTl9QSElfS05N
LAkJTk9fU1NCIHwgTk9fTDFURiB8IE1TQkRTX09OTFkgfCBOT19TV0FQR1MpLAogCiAJVlVMTldM
X0lOVEVMKENPUkVfWU9OQUgsCQlOT19TU0IpLAogCi0JVlVMTldMX0lOVEVMKEFUT01fQUlSTU9O
VF9NSUQsCQlOT19MMVRGIHwgTVNCRFNfT05MWSksCisJVlVMTldMX0lOVEVMKEFUT01fQUlSTU9O
VF9NSUQsCQlOT19MMVRGIHwgTVNCRFNfT05MWSB8IE5PX1NXQVBHUyksCiAKLQlWVUxOV0xfSU5U
RUwoQVRPTV9HT0xETU9OVCwJCU5PX01EUyB8IE5PX0wxVEYpLAotCVZVTE5XTF9JTlRFTChBVE9N
X0dPTERNT05UX1gsCQlOT19NRFMgfCBOT19MMVRGKSwKLQlWVUxOV0xfSU5URUwoQVRPTV9HT0xE
TU9OVF9QTFVTLAlOT19NRFMgfCBOT19MMVRGKSwKKwlWVUxOV0xfSU5URUwoQVRPTV9HT0xETU9O
VCwJCU5PX01EUyB8IE5PX0wxVEYgfCBOT19TV0FQR1MpLAorCVZVTE5XTF9JTlRFTChBVE9NX0dP
TERNT05UX1gsCQlOT19NRFMgfCBOT19MMVRGIHwgTk9fU1dBUEdTKSwKKwlWVUxOV0xfSU5URUwo
QVRPTV9HT0xETU9OVF9QTFVTLAlOT19NRFMgfCBOT19MMVRGIHwgTk9fU1dBUEdTKSwKKworCS8q
CisJICogVGVjaG5pY2FsbHksIHN3YXBncyBpc24ndCBzZXJpYWxpemluZyBvbiBBTUQgKGRlc3Bp
dGUgaXQgcHJldmlvdXNseQorCSAqIGJlaW5nIGRvY3VtZW50ZWQgYXMgc3VjaCBpbiB0aGUgQVBN
KS4gIEJ1dCBhY2NvcmRpbmcgdG8gQU1ELCAlZ3MgaXMKKwkgKiB1cGRhdGVkIG5vbi1zcGVjdWxh
dGl2ZWx5LCBhbmQgdGhlIGlzc3Vpbmcgb2YgJWdzLXJlbGF0aXZlIG1lbW9yeQorCSAqIG9wZXJh
bmRzIHdpbGwgYmUgYmxvY2tlZCB1bnRpbCB0aGUgJWdzIHVwZGF0ZSBjb21wbGV0ZXMsIHdoaWNo
IGlzCisJICogZ29vZCBlbm91Z2ggZm9yIG91ciBwdXJwb3Nlcy4KKwkgKi8KIAogCS8qIEFNRCBG
YW1pbHkgMHhmIC0gMHgxMiAqLwotCVZVTE5XTF9BTUQoMHgwZiwJTk9fTUVMVERPV04gfCBOT19T
U0IgfCBOT19MMVRGIHwgTk9fTURTKSwKLQlWVUxOV0xfQU1EKDB4MTAsCU5PX01FTFRET1dOIHwg
Tk9fU1NCIHwgTk9fTDFURiB8IE5PX01EUyksCi0JVlVMTldMX0FNRCgweDExLAlOT19NRUxURE9X
TiB8IE5PX1NTQiB8IE5PX0wxVEYgfCBOT19NRFMpLAotCVZVTE5XTF9BTUQoMHgxMiwJTk9fTUVM
VERPV04gfCBOT19TU0IgfCBOT19MMVRGIHwgTk9fTURTKSwKKwlWVUxOV0xfQU1EKDB4MGYsCU5P
X01FTFRET1dOIHwgTk9fU1NCIHwgTk9fTDFURiB8IE5PX01EUyB8IE5PX1NXQVBHUyksCisJVlVM
TldMX0FNRCgweDEwLAlOT19NRUxURE9XTiB8IE5PX1NTQiB8IE5PX0wxVEYgfCBOT19NRFMgfCBO
T19TV0FQR1MpLAorCVZVTE5XTF9BTUQoMHgxMSwJTk9fTUVMVERPV04gfCBOT19TU0IgfCBOT19M
MVRGIHwgTk9fTURTIHwgTk9fU1dBUEdTKSwKKwlWVUxOV0xfQU1EKDB4MTIsCU5PX01FTFRET1dO
IHwgTk9fU1NCIHwgTk9fTDFURiB8IE5PX01EUyB8IE5PX1NXQVBHUyksCiAKIAkvKiBGQU1JTFlf
QU5ZIG11c3QgYmUgbGFzdCwgb3RoZXJ3aXNlIDB4MGYgLSAweDEyIG1hdGNoZXMgd29uJ3Qgd29y
ayAqLwotCVZVTE5XTF9BTUQoWDg2X0ZBTUlMWV9BTlksCU5PX01FTFRET1dOIHwgTk9fTDFURiB8
IE5PX01EUyksCisJVlVMTldMX0FNRChYODZfRkFNSUxZX0FOWSwJTk9fTUVMVERPV04gfCBOT19M
MVRGIHwgTk9fTURTIHwgTk9fU1dBUEdTKSwKIAl7fQogfTsKIApAQCAtOTc5LDYgKzk4OCw5IEBA
IHN0YXRpYyB2b2lkIF9faW5pdCBjcHVfc2V0X2J1Z19iaXRzKHN0cnVjdCBjcHVpbmZvX3g4NiAq
YykKIAkJCXNldHVwX2ZvcmNlX2NwdV9idWcoWDg2X0JVR19NU0JEU19PTkxZKTsKIAl9CiAKKwlp
ZiAoIWNwdV9tYXRjaGVzKE5PX1NXQVBHUykpCisJCXNldHVwX2ZvcmNlX2NwdV9idWcoWDg2X0JV
R19TV0FQR1MpOworCiAJaWYgKGNwdV9tYXRjaGVzKE5PX01FTFRET1dOKSkKIAkJcmV0dXJuOwog
Cg==


--=-F5rOwfiTdwv/hSmR27TI--

--=-bKa5Ab2ZP0Z6flonPDQT
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: This is a digitally signed message part

-----BEGIN PGP SIGNATURE-----

iQIzBAABCgAdFiEErCspvTSmr92z9o8157/I7JWGEQkFAl1MuMgACgkQ57/I7JWG
EQk+wRAAsbiS82G5VHmHsGceKL3pF78jcSrtqW5qXWtPX6o/ERXfKiVj3ebhgybw
BtYw/cISAXwxSol5w7LgSiF0SMqyIX5PlbLIzAARSJWzvUw63JeZWSeLSeOtb4sb
nYWgWaP+RG5g3ZkY3SUsSZh4Y48zzOHyvBYtxUsaFic1UkAOYoZ7LBKybTDpTfoW
S9H+c9xNJBJsfG/zPMrLQUyIAVAkU5XYqcbCq2qH7hd6sonPwpGnXYWfyPhW5JCm
nlQwtV0EAp0i4oiT3Ha9OYpcGPFbBfxxIJMMzRaJ88AjoD1HBXWVUh9+TOVJ/sOM
iy3z94LhPef7NvogyfAoFG5Bc1FzaUytIIqGOAOP9RjIWeLFAZMdzn2+Oevqywe6
su41ZbJDu1SxqoHrKkuS2bSUkBYnqv1QrBpoIPxnPXeXsksQBu2KIYZS9CHQ/GUG
VB5+NDgcEeeak6AhCqEMuS/CYZSwY+RhfvBwSZiHJHsd2cukv3ApJuK9lS5Bj49E
zbGNsvWzeXOwntyhXFOCOL7S1hcaQ+HCwlOpTn4f2rshfFyV4vSEIEvWB/tN54rX
BtcxwhhWWjeemhHx0xJTzx5O0woQjMKWssXIgWz1Ilp0a7PriDJ5TBBoIRYaMpGe
7U7SKqHRCHKeVJ/Uf0V9C9klMR5WawK78zO56bDBDcgW0ptL6pc=
=nGRP
-----END PGP SIGNATURE-----

--=-bKa5Ab2ZP0Z6flonPDQT--
