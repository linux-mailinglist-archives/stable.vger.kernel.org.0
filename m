Return-Path: <stable-owner@vger.kernel.org>
X-Original-To: lists+stable@lfdr.de
Delivered-To: lists+stable@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 906F91B94AA
	for <lists+stable@lfdr.de>; Mon, 27 Apr 2020 01:52:28 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726234AbgDZXw0 (ORCPT <rfc822;lists+stable@lfdr.de>);
        Sun, 26 Apr 2020 19:52:26 -0400
Received: from imap2.colo.codethink.co.uk ([78.40.148.184]:34470 "EHLO
        imap2.colo.codethink.co.uk" rhost-flags-OK-OK-OK-OK)
        by vger.kernel.org with ESMTP id S1726196AbgDZXw0 (ORCPT
        <rfc822;stable@vger.kernel.org>); Sun, 26 Apr 2020 19:52:26 -0400
Received: from shadbolt.e.decadent.org.uk ([88.96.1.126] helo=xylophone)
        by imap2.colo.codethink.co.uk with esmtpsa  (Exim 4.92 #3 (Debian))
        id 1jSr4L-0008KP-FQ; Mon, 27 Apr 2020 00:52:18 +0100
Message-ID: <dd9bbb3b4eefec476db8b28ad3044e9abd8450f9.camel@codethink.co.uk>
Subject: [4.19-stable] Security fixes for KVM
From:   Ben Hutchings <ben.hutchings@codethink.co.uk>
To:     Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
        Sasha Levin <Alexander.Levin@microsoft.com>
Cc:     stable <stable@vger.kernel.org>
Date:   Mon, 27 Apr 2020 00:52:14 +0100
Organization: Codethink Ltd.
Content-Type: multipart/mixed; boundary="=-hRTESwtA1DCK6EOjpYZX"
User-Agent: Evolution 3.30.5-1.1 
MIME-Version: 1.0
Sender: stable-owner@vger.kernel.org
Precedence: bulk
List-ID: <stable.vger.kernel.org>
X-Mailing-List: stable@vger.kernel.org


--=-hRTESwtA1DCK6EOjpYZX
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

Here are some fixes that required backporting for 4.19, this time all
in KVM.  All of them are already present in later stable branches.

Ben.

-- 
Ben Hutchings, Software Developer                         Codethink Ltd
https://www.codethink.co.uk/                 Dale House, 35 Dale Street
                                     Manchester, M1 2HF, United Kingdom

--=-hRTESwtA1DCK6EOjpYZX
Content-Type: application/mbox; name="security-kvm-4.19.mbox"
Content-Disposition: attachment; filename="security-kvm-4.19.mbox"
Content-Transfer-Encoding: base64

RnJvbSBlNjIwNWZmOWJlMmY0YzdmY2E4YTM2NTk3N2M5ZGUwMGY4OWM3MmMxIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBTZWFuIENocmlzdG9waGVyc29uIDxzZWFuLmouY2hyaXN0b3Bo
ZXJzb25AaW50ZWwuY29tPgpEYXRlOiBGcmksIDI1IEphbiAyMDE5IDA3OjQwOjUwIC0wODAwClN1
YmplY3Q6IEtWTTogVk1YOiBaZXJvIG91dCAqYWxsKiBnZW5lcmFsIHB1cnBvc2UgcmVnaXN0ZXJz
IGFmdGVyIFZNLUV4aXQKCmNvbW1pdCAwZTBhYjczYzlhMDI0MzczNmJjZDc3OWIzMGI3MTdlMjNi
YTlhNTZkIHVwc3RyZWFtLgoKLi4uZXhjZXB0IFJTUCwgd2hpY2ggaXMgcmVzdG9yZWQgYnkgaGFy
ZHdhcmUgYXMgcGFydCBvZiBWTS1FeGl0LgoKUGFvbG8gdGhlb3JpemVkIHRoYXQgcmVzdG9yaW5n
IHJlZ2lzdGVycyBmcm9tIHRoZSBzdGFjayBhZnRlciBhIFZNLUV4aXQKaW4gbGlldSBvZiB6ZXJv
aW5nIHRoZW0gY291bGQgbGVhZCB0byBzcGVjdWxhdGl2ZSBleGVjdXRpb24gd2l0aCB0aGUKZ3Vl
c3QncyB2YWx1ZXMsIGUuZy4gaWYgdGhlIHN0YWNrIGFjY2Vzc2VzIG1pc3MgdGhlIEwxIGNhY2hl
WzFdLgpaZXJvaW5nIFhPUnMgYXJlIGRpcnQgY2hlYXAsIHNvIGp1c3QgYmUgdWx0cmEtcGFyYW5v
aWQuCgpOb3RlIHRoYXQgdGhlIHNjcmF0Y2ggcmVnaXN0ZXIgKGN1cnJlbnRseSBSQ1gpIHVzZWQg
dG8gc2F2ZS9yZXN0b3JlIHRoZQpndWVzdCBzdGF0ZSBpcyBhbHNvIHplcm9lZCBhcyBpdHMgaG9z
dC1kZWZpbmVkIHZhbHVlIGlzIGxvYWRlZCB2aWEgdGhlCnN0YWNrLCBqdXN0IHdpdGggYSBNT1Yg
aW5zdGVhZCBvZiBhIFBPUC4KClsxXSBodHRwczovL3BhdGNod29yay5rZXJuZWwub3JnL3BhdGNo
LzEwNzcxNTM5LyMyMjQ0MTI1NQoKRml4ZXM6IDBjYjViMzA2OThmZCAoImt2bTogdm14OiBTY3J1
YiBoYXJkd2FyZSBHUFJzIGF0IFZNLWV4aXQiKQpDYzogSmltIE1hdHRzb24gPGptYXR0c29uQGdv
b2dsZS5jb20+ClNpZ25lZC1vZmYtYnk6IFNlYW4gQ2hyaXN0b3BoZXJzb24gPHNlYW4uai5jaHJp
c3RvcGhlcnNvbkBpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IFBhb2xvIEJvbnppbmkgPHBib256
aW5pQHJlZGhhdC5jb20+Cltid2g6IEJhY2twb3J0ZWQgdG8gNC4xOTogYWRqdXN0IGZpbGVuYW1l
LCBjb250ZXh0XQpTaWduZWQtb2ZmLWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW4uaHV0Y2hpbmdzQGNv
ZGV0aGluay5jby51az4KLS0tCiBhcmNoL3g4Ni9rdm0vdm14LmMgfCAxMiArKysrKysrKysrKysK
IDEgZmlsZSBjaGFuZ2VkLCAxMiBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvYXJjaC94ODYv
a3ZtL3ZteC5jIGIvYXJjaC94ODYva3ZtL3ZteC5jCmluZGV4IGQzN2I0ODE3M2U5Yy4uZTRkMGFk
MDY3OTBlIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0vdm14LmMKKysrIGIvYXJjaC94ODYva3Zt
L3ZteC5jCkBAIC0xMDg0MSw2ICsxMDg0MSwxNSBAQCBzdGF0aWMgdm9pZCBfX25vY2xvbmUgdm14
X3ZjcHVfcnVuKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIAkJIm1vdiAlJXIxMywgJWNbcjEzXSgl
MCkgXG5cdCIKIAkJIm1vdiAlJXIxNCwgJWNbcjE0XSglMCkgXG5cdCIKIAkJIm1vdiAlJXIxNSwg
JWNbcjE1XSglMCkgXG5cdCIKKworCQkvKgorCQkgKiBDbGVhciBhbGwgZ2VuZXJhbCBwdXJwb3Nl
IHJlZ2lzdGVycyAoZXhjZXB0IFJTUCwgd2hpY2ggaXMgbG9hZGVkIGJ5CisJCSAqIHRoZSBDUFUg
ZHVyaW5nIFZNLUV4aXQpIHRvIHByZXZlbnQgc3BlY3VsYXRpdmUgdXNlIG9mIHRoZSBndWVzdCdz
CisJCSAqIHZhbHVlcywgZXZlbiB0aG9zZSB0aGF0IGFyZSBzYXZlZC9sb2FkZWQgdmlhIHRoZSBz
dGFjay4gIEluIHRoZW9yeSwKKwkJICogYW4gTDEgY2FjaGUgbWlzcyB3aGVuIHJlc3RvcmluZyBy
ZWdpc3RlcnMgY291bGQgbGVhZCB0byBzcGVjdWxhdGl2ZQorCQkgKiBleGVjdXRpb24gd2l0aCB0
aGUgZ3Vlc3QncyB2YWx1ZXMuICBaZXJvaW5nIFhPUnMgYXJlIGRpcnQgY2hlYXAsCisJCSAqIGku
ZS4gdGhlIGV4dHJhIHBhcmFub2lhIGlzIGVzc2VudGlhbGx5IGZyZWUuCisJCSAqLwogCQkieG9y
ICUlcjhkLCAgJSVyOGQgXG5cdCIKIAkJInhvciAlJXI5ZCwgICUlcjlkIFxuXHQiCiAJCSJ4b3Ig
JSVyMTBkLCAlJXIxMGQgXG5cdCIKQEAgLTEwODU1LDggKzEwODY0LDExIEBAIHN0YXRpYyB2b2lk
IF9fbm9jbG9uZSB2bXhfdmNwdV9ydW4oc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQogCiAJCSJ4b3Ig
JSVlYXgsICUlZWF4IFxuXHQiCiAJCSJ4b3IgJSVlYngsICUlZWJ4IFxuXHQiCisJCSJ4b3IgJSVl
Y3gsICUlZWN4IFxuXHQiCisJCSJ4b3IgJSVlZHgsICUlZWR4IFxuXHQiCiAJCSJ4b3IgJSVlc2ks
ICUlZXNpIFxuXHQiCiAJCSJ4b3IgJSVlZGksICUlZWRpIFxuXHQiCisJCSJ4b3IgJSVlYnAsICUl
ZWJwIFxuXHQiCiAJCSJwb3AgICUlIiBfQVNNX0JQICI7IHBvcCAgJSUiIF9BU01fRFggIiBcblx0
IgogCQkiLnB1c2hzZWN0aW9uIC5yb2RhdGEgXG5cdCIKIAkJIi5nbG9iYWwgdm14X3JldHVybiBc
blx0IgoKRnJvbSBiYzhhZWE2ZWE2NjI4ZDU3NTJmY2RlZDAyN2Y0Zjg2MTY2NDk0ZDQ3IE1vbiBT
ZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTZWFuIENocmlzdG9waGVyc29uIDxzZWFuLmouY2hy
aXN0b3BoZXJzb25AaW50ZWwuY29tPgpEYXRlOiBUdWUsIDcgTWF5IDIwMTkgMDk6MDY6MjggLTA3
MDAKU3ViamVjdDogS1ZNOiBuVk1YOiBBbHdheXMgc3luYyBHVUVTVF9CTkRDRkdTIHdoZW4gaXQg
Y29tZXMgZnJvbSB2bWNzMDEKCmNvbW1pdCAzYjAxM2EyOTcyZDViYzM0NGQ2ZWFhOGYyNGZkZmUy
NjgyMTFlNDVmIHVwc3RyZWFtLgoKSWYgTDEgZG9lcyBub3Qgc2V0IFZNX0VOVFJZX0xPQURfQk5E
Q0ZHUywgdGhlbiBMMSdzIEJORENGR1MgdmFsdWUgbXVzdApiZSBwcm9wYWdhdGVkIHRvIHZtY3Mw
MiBzaW5jZSBLVk0gYWx3YXlzIHJ1bnMgd2l0aCBWTV9FTlRSWV9MT0FEX0JORENGR1MKd2hlbiBN
UFggaXMgc3VwcG9ydGVkLiAgQmVjYXVzZSB0aGUgdmFsdWUgZWZmZWN0aXZlbHkgY29tZXMgZnJv
bSB2bWNzMDEsCnZtY3MwMiBtdXN0IGJlIHVwZGF0ZWQgZXZlbiBpZiB2bWNzMTIgaXMgY2xlYW4u
CgpGaXhlczogNjJjZjliZDgxMThjNCAoIktWTTogblZNWDogRml4IGVtdWxhdGlvbiBvZiBWTV9F
TlRSWV9MT0FEX0JORENGR1MiKQpDYzogTGlyYW4gQWxvbiA8bGlyYW4uYWxvbkBvcmFjbGUuY29t
PgpTaWduZWQtb2ZmLWJ5OiBTZWFuIENocmlzdG9waGVyc29uIDxzZWFuLmouY2hyaXN0b3BoZXJz
b25AaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBQYW9sbyBCb256aW5pIDxwYm9uemluaUByZWRo
YXQuY29tPgpbYndoOiBCYWNrcG9ydGVkIHRvIDQuMTk6IGFkanVzdCBmaWxlbmFtZSwgY29udGV4
dF0KU2lnbmVkLW9mZi1ieTogQmVuIEh1dGNoaW5ncyA8YmVuLmh1dGNoaW5nc0Bjb2RldGhpbmsu
Y28udWs+Ci0tLQogYXJjaC94ODYva3ZtL3ZteC5jIHwgMTMgKysrKysrLS0tLS0tLQogMSBmaWxl
IGNoYW5nZWQsIDYgaW5zZXJ0aW9ucygrKSwgNyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9h
cmNoL3g4Ni9rdm0vdm14LmMgYi9hcmNoL3g4Ni9rdm0vdm14LmMKaW5kZXggZTRkMGFkMDY3OTBl
Li5jY2JkZGM4MGFkNTUgMTAwNjQ0Ci0tLSBhL2FyY2gveDg2L2t2bS92bXguYworKysgYi9hcmNo
L3g4Ni9rdm0vdm14LmMKQEAgLTEyMTM3LDEzICsxMjEzNyw5IEBAIHN0YXRpYyB2b2lkIHByZXBh
cmVfdm1jczAyX2Z1bGwoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qgdm1jczEyICp2bWNz
MTIpCiAKIAlzZXRfY3I0X2d1ZXN0X2hvc3RfbWFzayh2bXgpOwogCi0JaWYgKGt2bV9tcHhfc3Vw
cG9ydGVkKCkpIHsKLQkJaWYgKHZteC0+bmVzdGVkLm5lc3RlZF9ydW5fcGVuZGluZyAmJgotCQkJ
KHZtY3MxMi0+dm1fZW50cnlfY29udHJvbHMgJiBWTV9FTlRSWV9MT0FEX0JORENGR1MpKQotCQkJ
dm1jc193cml0ZTY0KEdVRVNUX0JORENGR1MsIHZtY3MxMi0+Z3Vlc3RfYm5kY2Zncyk7Ci0JCWVs
c2UKLQkJCXZtY3Nfd3JpdGU2NChHVUVTVF9CTkRDRkdTLCB2bXgtPm5lc3RlZC52bWNzMDFfZ3Vl
c3RfYm5kY2Zncyk7Ci0JfQorCWlmIChrdm1fbXB4X3N1cHBvcnRlZCgpICYmIHZteC0+bmVzdGVk
Lm5lc3RlZF9ydW5fcGVuZGluZyAmJgorCSAgICAodm1jczEyLT52bV9lbnRyeV9jb250cm9scyAm
IFZNX0VOVFJZX0xPQURfQk5EQ0ZHUykpCisJCXZtY3Nfd3JpdGU2NChHVUVTVF9CTkRDRkdTLCB2
bWNzMTItPmd1ZXN0X2JuZGNmZ3MpOwogCiAJaWYgKGVuYWJsZV92cGlkKSB7CiAJCWlmIChuZXN0
ZWRfY3B1X2hhc192cGlkKHZtY3MxMikgJiYgdm14LT5uZXN0ZWQudnBpZDAyKQpAQCAtMTIyMDcs
NiArMTIyMDMsOSBAQCBzdGF0aWMgaW50IHByZXBhcmVfdm1jczAyKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSwgc3RydWN0IHZtY3MxMiAqdm1jczEyLAogCQlrdm1fc2V0X2RyKHZjcHUsIDcsIHZjcHUt
PmFyY2guZHI3KTsKIAkJdm1jc193cml0ZTY0KEdVRVNUX0lBMzJfREVCVUdDVEwsIHZteC0+bmVz
dGVkLnZtY3MwMV9kZWJ1Z2N0bCk7CiAJfQorCWlmIChrdm1fbXB4X3N1cHBvcnRlZCgpICYmICgh
dm14LT5uZXN0ZWQubmVzdGVkX3J1bl9wZW5kaW5nIHx8CisJICAgICEodm1jczEyLT52bV9lbnRy
eV9jb250cm9scyAmIFZNX0VOVFJZX0xPQURfQk5EQ0ZHUykpKQorCQl2bWNzX3dyaXRlNjQoR1VF
U1RfQk5EQ0ZHUywgdm14LT5uZXN0ZWQudm1jczAxX2d1ZXN0X2JuZGNmZ3MpOwogCWlmICh2bXgt
Pm5lc3RlZC5uZXN0ZWRfcnVuX3BlbmRpbmcpIHsKIAkJdm1jc193cml0ZTMyKFZNX0VOVFJZX0lO
VFJfSU5GT19GSUVMRCwKIAkJCSAgICAgdm1jczEyLT52bV9lbnRyeV9pbnRyX2luZm9fZmllbGQp
OwoKRnJvbSAyZDdjZmRlYjk0OTliMjYzYWE3ZTFmYzJjMWUyOWNmYzNlYzUzODk1IE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBLYXJpbUFsbGFoIEFobWVkIDxrYXJhaG1lZEBhbWF6b24u
ZGU+CkRhdGU6IFRodSwgMzEgSmFuIDIwMTkgMjE6MjQ6MzQgKzAxMDAKU3ViamVjdDogS1ZNOiBJ
bnRyb2R1Y2UgYSBuZXcgZ3Vlc3QgbWFwcGluZyBBUEkKCmNvbW1pdCBlNDVhZGY2NjVhNTNkZjBk
YjM3Zjc4NGVkODdjNmI1N2RkZDgxODg1IHVwc3RyZWFtLgoKSW4gS1ZNLCBzcGVjaWFsbHkgZm9y
IG5lc3RlZCBndWVzdHMsIHRoZXJlIGlzIGEgZG9taW5hbnQgcGF0dGVybiBvZjoKCgk9PiBtYXAg
Z3Vlc3QgbWVtb3J5IC0+IGRvX3NvbWV0aGluZyAtPiB1bm1hcCBndWVzdCBtZW1vcnkKCkluIGFk
ZGl0aW9uIHRvIGFsbCB0aGlzIHVubmVjZXNzYXJpbHkgbm9pc2UgaW4gdGhlIGNvZGUgZHVlIHRv
IGJvaWxlciBwbGF0ZQpjb2RlLCBtb3N0IG9mIHRoZSB0aW1lIHRoZSBtYXBwaW5nIGZ1bmN0aW9u
IGRvZXMgbm90IHByb3Blcmx5IGhhbmRsZSBtZW1vcnkKdGhhdCBpcyBub3QgYmFja2VkIGJ5ICJz
dHJ1Y3QgcGFnZSIuIFRoaXMgbmV3IGd1ZXN0IG1hcHBpbmcgQVBJIGVuY2Fwc3VsYXRlCm1vc3Qg
b2YgdGhpcyBib2lsZXIgcGxhdGUgY29kZSBhbmQgYWxzbyBoYW5kbGVzIGd1ZXN0IG1lbW9yeSB0
aGF0IGlzIG5vdApiYWNrZWQgYnkgInN0cnVjdCBwYWdlIi4KClRoZSBjdXJyZW50IGltcGxlbWVu
dGF0aW9uIG9mIHRoaXMgQVBJIGlzIHVzaW5nIG1lbXJlbWFwIGZvciBtZW1vcnkgdGhhdCBpcwpu
b3QgYmFja2VkIGJ5IGEgInN0cnVjdCBwYWdlIiB3aGljaCB3b3VsZCBsZWFkIHRvIGEgaHVnZSBz
bG93LWRvd24gaWYgaXQKd2FzIHVzZWQgZm9yIGhpZ2gtZnJlcXVlbmN5IG1hcHBpbmcgb3BlcmF0
aW9ucy4gVGhlIEFQSSBkb2VzIG5vdCBoYXZlIGFueQplZmZlY3Qgb24gY3VycmVudCBzZXR1cHMg
d2hlcmUgZ3Vlc3QgbWVtb3J5IGlzIGJhY2tlZCBieSBhICJzdHJ1Y3QgcGFnZSIuCkZ1cnRoZXIg
cGF0Y2hlcyBhcmUgZ29pbmcgdG8gYWxzbyBpbnRyb2R1Y2UgYSBwZm4tY2FjaGUgd2hpY2ggd291
bGQKc2lnbmlmaWNhbnRseSBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbWVtcmVtYXAg
Y2FzZS4KClNpZ25lZC1vZmYtYnk6IEthcmltQWxsYWggQWhtZWQgPGthcmFobWVkQGFtYXpvbi5k
ZT4KUmV2aWV3ZWQtYnk6IEtvbnJhZCBSemVzenV0ZWsgV2lsayA8a29ucmFkLndpbGtAb3JhY2xl
LmNvbT4KU2lnbmVkLW9mZi1ieTogUGFvbG8gQm9uemluaSA8cGJvbnppbmlAcmVkaGF0LmNvbT4K
W2J3aDogQmFja3BvcnRlZCB0byA0LjE5IGFzIGRlcGVuZGVuY3kgb2YgY29tbWl0IDFlZmY3MGE5
YWJkNAogIng4Ni9rdm06IEludHJvZHVjZSBrdm1fKHVuKW1hcF9nZm4oKSJdClNpZ25lZC1vZmYt
Ynk6IEJlbiBIdXRjaGluZ3MgPGJlbi5odXRjaGluZ3NAY29kZXRoaW5rLmNvLnVrPgotLS0KIGlu
Y2x1ZGUvbGludXgva3ZtX2hvc3QuaCB8IDI4ICsrKysrKysrKysrKysrKysrKwogdmlydC9rdm0v
a3ZtX21haW4uYyAgICAgIHwgNjQgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKwogMiBmaWxlcyBjaGFuZ2VkLCA5MiBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvaW5j
bHVkZS9saW51eC9rdm1faG9zdC5oIGIvaW5jbHVkZS9saW51eC9rdm1faG9zdC5oCmluZGV4IDBm
OTllY2MwMWJjNy4uYmVmOTVkYmExNGU4IDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L2t2bV9o
b3N0LmgKKysrIGIvaW5jbHVkZS9saW51eC9rdm1faG9zdC5oCkBAIC0yMDYsNiArMjA2LDMyIEBA
IGVudW0gewogCVJFQURJTkdfU0hBRE9XX1BBR0VfVEFCTEVTLAogfTsKIAorI2RlZmluZSBLVk1f
VU5NQVBQRURfUEFHRQkoKHZvaWQgKikgMHg1MDAgKyBQT0lTT05fUE9JTlRFUl9ERUxUQSkKKwor
c3RydWN0IGt2bV9ob3N0X21hcCB7CisJLyoKKwkgKiBPbmx5IHZhbGlkIGlmIHRoZSAncGZuJyBp
cyBtYW5hZ2VkIGJ5IHRoZSBob3N0IGtlcm5lbCAoaS5lLiBUaGVyZSBpcworCSAqIGEgJ3N0cnVj
dCBwYWdlJyBmb3IgaXQuIFdoZW4gdXNpbmcgbWVtPSBrZXJuZWwgcGFyYW1ldGVyIHNvbWUgbWVt
b3J5CisJICogY2FuIGJlIHVzZWQgYXMgZ3Vlc3QgbWVtb3J5IGJ1dCB0aGV5IGFyZSBub3QgbWFu
YWdlZCBieSBob3N0CisJICoga2VybmVsKS4KKwkgKiBJZiAncGZuJyBpcyBub3QgbWFuYWdlZCBi
eSB0aGUgaG9zdCBrZXJuZWwsIHRoaXMgZmllbGQgaXMKKwkgKiBpbml0aWFsaXplZCB0byBLVk1f
VU5NQVBQRURfUEFHRS4KKwkgKi8KKwlzdHJ1Y3QgcGFnZSAqcGFnZTsKKwl2b2lkICpodmE7CisJ
a3ZtX3Bmbl90IHBmbjsKKwlrdm1fcGZuX3QgZ2ZuOworfTsKKworLyoKKyAqIFVzZWQgdG8gY2hl
Y2sgaWYgdGhlIG1hcHBpbmcgaXMgdmFsaWQgb3Igbm90LiBOZXZlciB1c2UgJ2t2bV9ob3N0X21h
cCcKKyAqIGRpcmVjdGx5IHRvIGNoZWNrIGZvciB0aGF0LgorICovCitzdGF0aWMgaW5saW5lIGJv
b2wga3ZtX3ZjcHVfbWFwcGVkKHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCkKK3sKKwlyZXR1cm4g
ISFtYXAtPmh2YTsKK30KKwogLyoKICAqIFNvbWV0aW1lcyBhIGxhcmdlIG9yIGNyb3NzLXBhZ2Ug
bW1pbyBuZWVkcyB0byBiZSBicm9rZW4gdXAgaW50byBzZXBhcmF0ZQogICogZXhpdHMgZm9yIHVz
ZXJzcGFjZSBzZXJ2aWNpbmcuCkBAIC03MTEsNyArNzM3LDkgQEAgc3RydWN0IGt2bV9tZW1zbG90
cyAqa3ZtX3ZjcHVfbWVtc2xvdHMoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KTsKIHN0cnVjdCBrdm1f
bWVtb3J5X3Nsb3QgKmt2bV92Y3B1X2dmbl90b19tZW1zbG90KHN0cnVjdCBrdm1fdmNwdSAqdmNw
dSwgZ2ZuX3QgZ2ZuKTsKIGt2bV9wZm5fdCBrdm1fdmNwdV9nZm5fdG9fcGZuX2F0b21pYyhzdHJ1
Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdmbl90IGdmbik7CiBrdm1fcGZuX3Qga3ZtX3ZjcHVfZ2ZuX3Rv
X3BmbihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdmbl90IGdmbik7CitpbnQga3ZtX3ZjcHVfbWFw
KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ3BhX3QgZ3BhLCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICpt
YXApOwogc3RydWN0IHBhZ2UgKmt2bV92Y3B1X2dmbl90b19wYWdlKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSwgZ2ZuX3QgZ2ZuKTsKK3ZvaWQga3ZtX3ZjcHVfdW5tYXAoc3RydWN0IGt2bV92Y3B1ICp2
Y3B1LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsIGJvb2wgZGlydHkpOwogdW5zaWduZWQgbG9u
ZyBrdm1fdmNwdV9nZm5fdG9faHZhKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuKTsK
IHVuc2lnbmVkIGxvbmcga3ZtX3ZjcHVfZ2ZuX3RvX2h2YV9wcm90KHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSwgZ2ZuX3QgZ2ZuLCBib29sICp3cml0YWJsZSk7CiBpbnQga3ZtX3ZjcHVfcmVhZF9ndWVz
dF9wYWdlKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuLCB2b2lkICpkYXRhLCBpbnQg
b2Zmc2V0LApkaWZmIC0tZ2l0IGEvdmlydC9rdm0va3ZtX21haW4uYyBiL3ZpcnQva3ZtL2t2bV9t
YWluLmMKaW5kZXggNGU0OTliNzg1NjliLi5lYzE0NzlhYmIyOWQgMTAwNjQ0Ci0tLSBhL3ZpcnQv
a3ZtL2t2bV9tYWluLmMKKysrIGIvdmlydC9rdm0va3ZtX21haW4uYwpAQCAtMTcwNSw2ICsxNzA1
LDcwIEBAIHN0cnVjdCBwYWdlICpnZm5fdG9fcGFnZShzdHJ1Y3Qga3ZtICprdm0sIGdmbl90IGdm
bikKIH0KIEVYUE9SVF9TWU1CT0xfR1BMKGdmbl90b19wYWdlKTsKIAorc3RhdGljIGludCBfX2t2
bV9tYXBfZ2ZuKHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIGdmbl90IGdmbiwKKwkJCSBz
dHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXApCit7CisJa3ZtX3Bmbl90IHBmbjsKKwl2b2lkICpodmEg
PSBOVUxMOworCXN0cnVjdCBwYWdlICpwYWdlID0gS1ZNX1VOTUFQUEVEX1BBR0U7CisKKwlpZiAo
IW1hcCkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlwZm4gPSBnZm5fdG9fcGZuX21lbXNsb3Qoc2xv
dCwgZ2ZuKTsKKwlpZiAoaXNfZXJyb3Jfbm9zbG90X3BmbihwZm4pKQorCQlyZXR1cm4gLUVJTlZB
TDsKKworCWlmIChwZm5fdmFsaWQocGZuKSkgeworCQlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsK
KwkJaHZhID0ga21hcChwYWdlKTsKKwl9IGVsc2UgeworCQlodmEgPSBtZW1yZW1hcChwZm5fdG9f
aHBhKHBmbiksIFBBR0VfU0laRSwgTUVNUkVNQVBfV0IpOworCX0KKworCWlmICghaHZhKQorCQly
ZXR1cm4gLUVGQVVMVDsKKworCW1hcC0+cGFnZSA9IHBhZ2U7CisJbWFwLT5odmEgPSBodmE7CisJ
bWFwLT5wZm4gPSBwZm47CisJbWFwLT5nZm4gPSBnZm47CisKKwlyZXR1cm4gMDsKK30KKworaW50
IGt2bV92Y3B1X21hcChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdmbl90IGdmbiwgc3RydWN0IGt2
bV9ob3N0X21hcCAqbWFwKQoreworCXJldHVybiBfX2t2bV9tYXBfZ2ZuKGt2bV92Y3B1X2dmbl90
b19tZW1zbG90KHZjcHUsIGdmbiksIGdmbiwgbWFwKTsKK30KK0VYUE9SVF9TWU1CT0xfR1BMKGt2
bV92Y3B1X21hcCk7CisKK3ZvaWQga3ZtX3ZjcHVfdW5tYXAoc3RydWN0IGt2bV92Y3B1ICp2Y3B1
LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsCisJCSAgICBib29sIGRpcnR5KQoreworCWlmICgh
bWFwKQorCQlyZXR1cm47CisKKwlpZiAoIW1hcC0+aHZhKQorCQlyZXR1cm47CisKKwlpZiAobWFw
LT5wYWdlKQorCQlrdW5tYXAobWFwLT5wYWdlKTsKKwllbHNlCisJCW1lbXVubWFwKG1hcC0+aHZh
KTsKKworCWlmIChkaXJ0eSkgeworCQlrdm1fdmNwdV9tYXJrX3BhZ2VfZGlydHkodmNwdSwgbWFw
LT5nZm4pOworCQlrdm1fcmVsZWFzZV9wZm5fZGlydHkobWFwLT5wZm4pOworCX0gZWxzZSB7CisJ
CWt2bV9yZWxlYXNlX3Bmbl9jbGVhbihtYXAtPnBmbik7CisJfQorCisJbWFwLT5odmEgPSBOVUxM
OworCW1hcC0+cGFnZSA9IE5VTEw7Cit9CitFWFBPUlRfU1lNQk9MX0dQTChrdm1fdmNwdV91bm1h
cCk7CisKIHN0cnVjdCBwYWdlICprdm1fdmNwdV9nZm5fdG9fcGFnZShzdHJ1Y3Qga3ZtX3ZjcHUg
KnZjcHUsIGdmbl90IGdmbikKIHsKIAlrdm1fcGZuX3QgcGZuOwoKRnJvbSAwMTk1NTVkNzFjYzg1
ZTgwNzc4NzU4MjIyNzk4ZGE5ZGI4MWVhMzkxIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9t
OiBQYW9sbyBCb256aW5pIDxwYm9uemluaUByZWRoYXQuY29tPgpEYXRlOiBGcmksIDE3IE1heSAy
MDE5IDE0OjA4OjUzICswMjAwClN1YmplY3Q6IGt2bTogZml4IGNvbXBpbGF0aW9uIG9uIGFhcmNo
NjQKCmNvbW1pdCBjMDExZDIzYmEwNDY4MjZjY2Y4YzRhNGE2YzFkMDFjOWNjYWExNDAzIHVwc3Ry
ZWFtLgoKQ29tbWl0IGU0NWFkZjY2NWE1MyAoIktWTTogSW50cm9kdWNlIGEgbmV3IGd1ZXN0IG1h
cHBpbmcgQVBJIiwgMjAxOS0wMS0zMSkKaW50cm9kdWNlZCBhIGJ1aWxkIGZhaWx1cmUgb24gYWFy
Y2g2NCBkZWZjb25maWc6CgokIG1ha2UgLWokKG5wcm9jKSBBUkNIPWFybTY0IENST1NTX0NPTVBJ
TEU9YWFyY2g2NC1saW51eC1nbnUtIE89b3V0IGRlZmNvbmZpZyBcCiAgICAgICAgICAgICAgICBJ
bWFnZS5negouLi4KLi4vYXJjaC9hcm02NC9rdm0vLi4vLi4vLi4vdmlydC9rdm0va3ZtX21haW4u
YzoKICAgIEluIGZ1bmN0aW9uICdfX2t2bV9tYXBfZ2ZuJzoKLi4vYXJjaC9hcm02NC9rdm0vLi4v
Li4vLi4vdmlydC9rdm0va3ZtX21haW4uYzoxNzYzOjk6IGVycm9yOgogICAgaW1wbGljaXQgZGVj
bGFyYXRpb24gb2YgZnVuY3Rpb24gJ21lbXJlbWFwJzsgZGlkIHlvdSBtZWFuICdtZW1zZXRfcCc/
Ci4uL2FyY2gvYXJtNjQva3ZtLy4uLy4uLy4uL3ZpcnQva3ZtL2t2bV9tYWluLmM6MTc2Mzo0Njog
ZXJyb3I6CiAgICAnTUVNUkVNQVBfV0InIHVuZGVjbGFyZWQgKGZpcnN0IHVzZSBpbiB0aGlzIGZ1
bmN0aW9uKQouLi9hcmNoL2FybTY0L2t2bS8uLi8uLi8uLi92aXJ0L2t2bS9rdm1fbWFpbi5jOgog
ICAgSW4gZnVuY3Rpb24gJ2t2bV92Y3B1X3VubWFwJzoKLi4vYXJjaC9hcm02NC9rdm0vLi4vLi4v
Li4vdmlydC9rdm0va3ZtX21haW4uYzoxNzk1OjM6IGVycm9yOgogICAgaW1wbGljaXQgZGVjbGFy
YXRpb24gb2YgZnVuY3Rpb24gJ21lbXVubWFwJzsgZGlkIHlvdSBtZWFuICd2bV9tdW5tYXAnPwoK
YmVjYXVzZSB0aGVzZSBmdW5jdGlvbnMgYXJlIGRlY2xhcmVkIGluIDxsaW51eC9pby5oPiByYXRo
ZXIgdGhhbiA8YXNtL2lvLmg+LAphbmQgdGhlIGZvcm1lciB3YXMgYmVpbmcgcHVsbGVkIGluIGFs
cmVhZHkgb24geDg2IGJ1dCBub3Qgb24gYWFyY2g2NC4KClJlcG9ydGVkLWJ5OiBOYXRoYW4gQ2hh
bmNlbGxvciA8bmF0ZWNoYW5jZWxsb3JAZ21haWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBQYW9sbyBC
b256aW5pIDxwYm9uemluaUByZWRoYXQuY29tPgpbYndoOiBCYWNrcG9ydGVkIHRvIDQuMTk6IGFk
anVzdCBjb250ZXh0XQpTaWduZWQtb2ZmLWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW4uaHV0Y2hpbmdz
QGNvZGV0aGluay5jby51az4KLS0tCiB2aXJ0L2t2bS9rdm1fbWFpbi5jIHwgMiArLQogMSBmaWxl
IGNoYW5nZWQsIDEgaW5zZXJ0aW9uKCspLCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvdmly
dC9rdm0va3ZtX21haW4uYyBiL3ZpcnQva3ZtL2t2bV9tYWluLmMKaW5kZXggZWMxNDc5YWJiMjlk
Li40YTVlYTI2M2VkZjYgMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2t2bV9tYWluLmMKKysrIGIvdmly
dC9rdm0va3ZtX21haW4uYwpAQCAtNTIsOSArNTIsOSBAQAogI2luY2x1ZGUgPGxpbnV4L3NvcnQu
aD4KICNpbmNsdWRlIDxsaW51eC9ic2VhcmNoLmg+CiAjaW5jbHVkZSA8bGludXgva3RocmVhZC5o
PgorI2luY2x1ZGUgPGxpbnV4L2lvLmg+CiAKICNpbmNsdWRlIDxhc20vcHJvY2Vzc29yLmg+Ci0j
aW5jbHVkZSA8YXNtL2lvLmg+CiAjaW5jbHVkZSA8YXNtL2lvY3RsLmg+CiAjaW5jbHVkZSA8bGlu
dXgvdWFjY2Vzcy5oPgogI2luY2x1ZGUgPGFzbS9wZ3RhYmxlLmg+CgpGcm9tIDYwNjcyYzk2NTU3
ZTY0Mjk4YzY3ZWVhOTM4ZDJkODMwYTI5MTM3YTggTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZy
b206IFBhb2xvIEJvbnppbmkgPHBib256aW5pQHJlZGhhdC5jb20+CkRhdGU6IE1vbiwgMjAgTWF5
IDIwMTkgMTI6MDY6MzYgKzAyMDAKU3ViamVjdDoga3ZtOiBmaXggY29tcGlsYXRpb24gb24gczM5
MAoKY29tbWl0IGQzMGIyMTRkMWQwYWRkYjdiMmM5Yzc4MTc4ZDE1MDFjZDM5YTAxZmIgdXBzdHJl
YW0uCgpzMzkwIGRvZXMgbm90IGhhdmUgbWVtcmVtYXAsIGV2ZW4gdGhvdWdoIGluIHRoaXMgcGFy
dGljdWxhciBjYXNlIGl0CndvdWxkIGJlIHVzZWZ1bC4KClNpZ25lZC1vZmYtYnk6IFBhb2xvIEJv
bnppbmkgPHBib256aW5pQHJlZGhhdC5jb20+ClNpZ25lZC1vZmYtYnk6IEJlbiBIdXRjaGluZ3Mg
PGJlbi5odXRjaGluZ3NAY29kZXRoaW5rLmNvLnVrPgotLS0KIHZpcnQva3ZtL2t2bV9tYWluLmMg
fCAyICsrCiAxIGZpbGUgY2hhbmdlZCwgMiBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvdmly
dC9rdm0va3ZtX21haW4uYyBiL3ZpcnQva3ZtL2t2bV9tYWluLmMKaW5kZXggNGE1ZWEyNjNlZGY2
Li5mOTliOTliNzdhNDggMTAwNjQ0Ci0tLSBhL3ZpcnQva3ZtL2t2bV9tYWluLmMKKysrIGIvdmly
dC9rdm0va3ZtX21haW4uYwpAQCAtMTcyMiw4ICsxNzIyLDEwIEBAIHN0YXRpYyBpbnQgX19rdm1f
bWFwX2dmbihzdHJ1Y3Qga3ZtX21lbW9yeV9zbG90ICpzbG90LCBnZm5fdCBnZm4sCiAJaWYgKHBm
bl92YWxpZChwZm4pKSB7CiAJCXBhZ2UgPSBwZm5fdG9fcGFnZShwZm4pOwogCQlodmEgPSBrbWFw
KHBhZ2UpOworI2lmZGVmIENPTkZJR19IQVNfSU9NRU0KIAl9IGVsc2UgewogCQlodmEgPSBtZW1y
ZW1hcChwZm5fdG9faHBhKHBmbiksIFBBR0VfU0laRSwgTUVNUkVNQVBfV0IpOworI2VuZGlmCiAJ
fQogCiAJaWYgKCFodmEpCgpGcm9tIDMzMDc1YWRkMzhlZDliNWUyZDQ1ODQ4NmM2Njk1ZTk3ZDgx
YWUyOWMgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IENocmlzdGlhbiBCb3JudHJhZWdl
ciA8Ym9ybnRyYWVnZXJAZGUuaWJtLmNvbT4KRGF0ZTogTW9uLCAyNyBNYXkgMjAxOSAxMDoyODoy
NSArMDIwMApTdWJqZWN0OiBrdm06IGZpeCBjb21waWxlIG9uIHMzOTAgcGFydCAyCgpjb21taXQg
ZWIxZjJmMzg3ZGI4YzBkMDg0NTgxZmIyNmU3ZmFmZmRlNzAwYmM4ZSB1cHN0cmVhbS4KCldlIGFs
c28gbmVlZCB0byBmZW5jZSB0aGUgbWVtdW5tYXAgcGFydC4KCkZpeGVzOiBlNDVhZGY2NjVhNTMg
KCJLVk06IEludHJvZHVjZSBhIG5ldyBndWVzdCBtYXBwaW5nIEFQSSIpCkZpeGVzOiBkMzBiMjE0
ZDFkMGEgKGt2bTogZml4IGNvbXBpbGF0aW9uIG9uIHMzOTApCkNjOiBNaWNoYWwgS3ViZWNlayA8
bWt1YmVjZWtAc3VzZS5jej4KQ2M6IEthcmltQWxsYWggQWhtZWQgPGthcmFobWVkQGFtYXpvbi5k
ZT4KU2lnbmVkLW9mZi1ieTogQ2hyaXN0aWFuIEJvcm50cmFlZ2VyIDxib3JudHJhZWdlckBkZS5p
Ym0uY29tPgpTaWduZWQtb2ZmLWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW4uaHV0Y2hpbmdzQGNvZGV0
aGluay5jby51az4KLS0tCiB2aXJ0L2t2bS9rdm1fbWFpbi5jIHwgMiArKwogMSBmaWxlIGNoYW5n
ZWQsIDIgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2t2bV9tYWluLmMgYi92
aXJ0L2t2bS9rdm1fbWFpbi5jCmluZGV4IGY5OWI5OWI3N2E0OC4uNWI5NDlhYTI3M2RlIDEwMDY0
NAotLS0gYS92aXJ0L2t2bS9rdm1fbWFpbi5jCisrKyBiL3ZpcnQva3ZtL2t2bV9tYWluLmMKQEAg
LTE3NTYsOCArMTc1NiwxMCBAQCB2b2lkIGt2bV92Y3B1X3VubWFwKHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSwgc3RydWN0IGt2bV9ob3N0X21hcCAqbWFwLAogCiAJaWYgKG1hcC0+cGFnZSkKIAkJa3Vu
bWFwKG1hcC0+cGFnZSk7CisjaWZkZWYgQ09ORklHX0hBU19JT01FTQogCWVsc2UKIAkJbWVtdW5t
YXAobWFwLT5odmEpOworI2VuZGlmCiAKIAlpZiAoZGlydHkpIHsKIAkJa3ZtX3ZjcHVfbWFya19w
YWdlX2RpcnR5KHZjcHUsIG1hcC0+Z2ZuKTsKCkZyb20gZmExNjVmZTY2ODU1N2U5YTRlZWU4YjU0
YWJlMTNhMjUyYjFiOTFjYSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogS2FyaW1BbGxh
aCBBaG1lZCA8a2FyYWhtZWRAYW1hem9uLmRlPgpEYXRlOiBXZWQsIDEwIEp1bCAyMDE5IDExOjEz
OjEzICswMjAwClN1YmplY3Q6IEtWTTogUHJvcGVybHkgY2hlY2sgaWYgInBhZ2UiIGlzIHZhbGlk
IGluIGt2bV92Y3B1X3VubWFwCgpjb21taXQgYjYxNGM2MDI3ODk2ZmY5YWQ2NzU3MTIyZTg0NzYw
ZDkzOGNhYjE1ZSB1cHN0cmVhbS4KClRoZSBmaWVsZCAicGFnZSIgaXMgaW5pdGlhbGl6ZWQgdG8g
S1ZNX1VOTUFQUEVEX1BBR0Ugd2hlbiBpdCBpcyBub3QgdXNlZAooaS5lLiB3aGVuIHRoZSBtZW1v
cnkgbGl2ZXMgb3V0c2lkZSBrZXJuZWwgY29udHJvbCkuIFNvIHRoaXMgY2hlY2sgd2lsbAphbHdh
eXMgZW5kIHVwIHVzaW5nIGt1bm1hcCBldmVuIGZvciBtZW1yZW1hcCByZWdpb25zLgoKRml4ZXM6
IGU0NWFkZjY2NWE1MyAoIktWTTogSW50cm9kdWNlIGEgbmV3IGd1ZXN0IG1hcHBpbmcgQVBJIikK
U2lnbmVkLW9mZi1ieTogS2FyaW1BbGxhaCBBaG1lZCA8a2FyYWhtZWRAYW1hem9uLmRlPgpTaWdu
ZWQtb2ZmLWJ5OiBQYW9sbyBCb256aW5pIDxwYm9uemluaUByZWRoYXQuY29tPgpTaWduZWQtb2Zm
LWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW4uaHV0Y2hpbmdzQGNvZGV0aGluay5jby51az4KLS0tCiB2
aXJ0L2t2bS9rdm1fbWFpbi5jIHwgMiArLQogMSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9uKCsp
LCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvdmlydC9rdm0va3ZtX21haW4uYyBiL3ZpcnQv
a3ZtL2t2bV9tYWluLmMKaW5kZXggNWI5NDlhYTI3M2RlLi4zM2IyODg0NjljNzAgMTAwNjQ0Ci0t
LSBhL3ZpcnQva3ZtL2t2bV9tYWluLmMKKysrIGIvdmlydC9rdm0va3ZtX21haW4uYwpAQCAtMTc1
NCw3ICsxNzU0LDcgQEAgdm9pZCBrdm1fdmNwdV91bm1hcChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUs
IHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwKIAlpZiAoIW1hcC0+aHZhKQogCQlyZXR1cm47CiAK
LQlpZiAobWFwLT5wYWdlKQorCWlmIChtYXAtPnBhZ2UgIT0gS1ZNX1VOTUFQUEVEX1BBR0UpCiAJ
CWt1bm1hcChtYXAtPnBhZ2UpOwogI2lmZGVmIENPTkZJR19IQVNfSU9NRU0KIAllbHNlCgpGcm9t
IGQ3YTgyOTY4YmE0ZDY1NGYwODcyYjM2MDhiMTA1Y2NiMDRkOWNjMTMgTW9uIFNlcCAxNyAwMDow
MDowMCAyMDAxCkZyb206IEJvcmlzIE9zdHJvdnNreSA8Ym9yaXMub3N0cm92c2t5QG9yYWNsZS5j
b20+CkRhdGU6IFR1ZSwgMTIgTm92IDIwMTkgMTY6MzU6MDYgKzAwMDAKU3ViamVjdDogeDg2L2t2
bTogSW50cm9kdWNlIGt2bV8odW4pbWFwX2dmbigpCgpjb21taXQgMWVmZjcwYTlhYmQ0NmYxNzVk
ZWZhZmQyOWJjMTdhZDQ1NmYzOThhNyB1cHN0cmVhbS4KCmt2bV92Y3B1Xyh1biltYXAgb3BlcmF0
ZXMgb24gZ2ZucyBmcm9tIGFueSBjdXJyZW50IGFkZHJlc3Mgc3BhY2UuCkluIGNlcnRhaW4gY2Fz
ZXMgd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIG5vdCBtYXBwaW5nIFNNUkFNCmFuZCBmb3Ig
dGhhdCB3ZSBjYW4gdXNlIGt2bV8odW4pbWFwX2dmbigpIHRoYXQgd2UgYXJlIGludHJvZHVjaW5n
CmluIHRoaXMgcGF0Y2guCgpUaGlzIGlzIHBhcnQgb2YgQ1ZFLTIwMTktMzAxNi4KClNpZ25lZC1v
ZmYtYnk6IEJvcmlzIE9zdHJvdnNreSA8Ym9yaXMub3N0cm92c2t5QG9yYWNsZS5jb20+ClJldmll
d2VkLWJ5OiBKb2FvIE1hcnRpbnMgPGpvYW8ubS5tYXJ0aW5zQG9yYWNsZS5jb20+ClNpZ25lZC1v
ZmYtYnk6IFBhb2xvIEJvbnppbmkgPHBib256aW5pQHJlZGhhdC5jb20+ClNpZ25lZC1vZmYtYnk6
IEJlbiBIdXRjaGluZ3MgPGJlbi5odXRjaGluZ3NAY29kZXRoaW5rLmNvLnVrPgotLS0KIGluY2x1
ZGUvbGludXgva3ZtX2hvc3QuaCB8ICAyICsrCiB2aXJ0L2t2bS9rdm1fbWFpbi5jICAgICAgfCAy
OSArKysrKysrKysrKysrKysrKysrKysrKystLS0tLQogMiBmaWxlcyBjaGFuZ2VkLCAyNiBpbnNl
cnRpb25zKCspLCA1IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgva3Zt
X2hvc3QuaCBiL2luY2x1ZGUvbGludXgva3ZtX2hvc3QuaAppbmRleCBiZWY5NWRiYTE0ZTguLjMw
M2MxYTY5MTZjZSAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9rdm1faG9zdC5oCisrKyBiL2lu
Y2x1ZGUvbGludXgva3ZtX2hvc3QuaApAQCAtNzM4LDggKzczOCwxMCBAQCBzdHJ1Y3Qga3ZtX21l
bW9yeV9zbG90ICprdm1fdmNwdV9nZm5fdG9fbWVtc2xvdChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUs
IGdmbl90IGdmbgoga3ZtX3Bmbl90IGt2bV92Y3B1X2dmbl90b19wZm5fYXRvbWljKHN0cnVjdCBr
dm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuKTsKIGt2bV9wZm5fdCBrdm1fdmNwdV9nZm5fdG9fcGZu
KHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuKTsKIGludCBrdm1fdmNwdV9tYXAoc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1LCBncGFfdCBncGEsIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCk7
CitpbnQga3ZtX21hcF9nZm4oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4sIHN0cnVj
dCBrdm1faG9zdF9tYXAgKm1hcCk7CiBzdHJ1Y3QgcGFnZSAqa3ZtX3ZjcHVfZ2ZuX3RvX3BhZ2Uo
c3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4pOwogdm9pZCBrdm1fdmNwdV91bm1hcChz
dHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwgYm9vbCBkaXJ0
eSk7CitpbnQga3ZtX3VubWFwX2dmbihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1f
aG9zdF9tYXAgKm1hcCwgYm9vbCBkaXJ0eSk7CiB1bnNpZ25lZCBsb25nIGt2bV92Y3B1X2dmbl90
b19odmEoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4pOwogdW5zaWduZWQgbG9uZyBr
dm1fdmNwdV9nZm5fdG9faHZhX3Byb3Qoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4s
IGJvb2wgKndyaXRhYmxlKTsKIGludCBrdm1fdmNwdV9yZWFkX2d1ZXN0X3BhZ2Uoc3RydWN0IGt2
bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4sIHZvaWQgKmRhdGEsIGludCBvZmZzZXQsCmRpZmYgLS1n
aXQgYS92aXJ0L2t2bS9rdm1fbWFpbi5jIGIvdmlydC9rdm0va3ZtX21haW4uYwppbmRleCAzM2Iy
ODg0NjljNzAuLjhlMjliMmUwYmYyZSAxMDA2NDQKLS0tIGEvdmlydC9rdm0va3ZtX21haW4uYwor
KysgYi92aXJ0L2t2bS9rdm1fbWFpbi5jCkBAIC0xNzA1LDEyICsxNzA1LDEzIEBAIHN0cnVjdCBw
YWdlICpnZm5fdG9fcGFnZShzdHJ1Y3Qga3ZtICprdm0sIGdmbl90IGdmbikKIH0KIEVYUE9SVF9T
WU1CT0xfR1BMKGdmbl90b19wYWdlKTsKIAotc3RhdGljIGludCBfX2t2bV9tYXBfZ2ZuKHN0cnVj
dCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIGdmbl90IGdmbiwKK3N0YXRpYyBpbnQgX19rdm1fbWFw
X2dmbihzdHJ1Y3Qga3ZtX21lbXNsb3RzICpzbG90cywgZ2ZuX3QgZ2ZuLAogCQkJIHN0cnVjdCBr
dm1faG9zdF9tYXAgKm1hcCkKIHsKIAlrdm1fcGZuX3QgcGZuOwogCXZvaWQgKmh2YSA9IE5VTEw7
CiAJc3RydWN0IHBhZ2UgKnBhZ2UgPSBLVk1fVU5NQVBQRURfUEFHRTsKKwlzdHJ1Y3Qga3ZtX21l
bW9yeV9zbG90ICpzbG90ID0gX19nZm5fdG9fbWVtc2xvdChzbG90cywgZ2ZuKTsKIAogCWlmICgh
bWFwKQogCQlyZXR1cm4gLUVJTlZBTDsKQEAgLTE3MzksMTQgKzE3NDAsMjAgQEAgc3RhdGljIGlu
dCBfX2t2bV9tYXBfZ2ZuKHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsIGdmbl90IGdmbiwK
IAlyZXR1cm4gMDsKIH0KIAoraW50IGt2bV9tYXBfZ2ZuKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwg
Z2ZuX3QgZ2ZuLCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXApCit7CisJcmV0dXJuIF9fa3ZtX21h
cF9nZm4oa3ZtX21lbXNsb3RzKHZjcHUtPmt2bSksIGdmbiwgbWFwKTsKK30KK0VYUE9SVF9TWU1C
T0xfR1BMKGt2bV9tYXBfZ2ZuKTsKKwogaW50IGt2bV92Y3B1X21hcChzdHJ1Y3Qga3ZtX3ZjcHUg
KnZjcHUsIGdmbl90IGdmbiwgc3RydWN0IGt2bV9ob3N0X21hcCAqbWFwKQogewotCXJldHVybiBf
X2t2bV9tYXBfZ2ZuKGt2bV92Y3B1X2dmbl90b19tZW1zbG90KHZjcHUsIGdmbiksIGdmbiwgbWFw
KTsKKwlyZXR1cm4gX19rdm1fbWFwX2dmbihrdm1fdmNwdV9tZW1zbG90cyh2Y3B1KSwgZ2ZuLCBt
YXApOwogfQogRVhQT1JUX1NZTUJPTF9HUEwoa3ZtX3ZjcHVfbWFwKTsKIAotdm9pZCBrdm1fdmNw
dV91bm1hcChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwK
LQkJICAgIGJvb2wgZGlydHkpCitzdGF0aWMgdm9pZCBfX2t2bV91bm1hcF9nZm4oc3RydWN0IGt2
bV9tZW1vcnlfc2xvdCAqbWVtc2xvdCwKKwkJCXN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwgYm9v
bCBkaXJ0eSkKIHsKIAlpZiAoIW1hcCkKIAkJcmV0dXJuOwpAQCAtMTc2Miw3ICsxNzY5LDcgQEAg
dm9pZCBrdm1fdmNwdV91bm1hcChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1faG9z
dF9tYXAgKm1hcCwKICNlbmRpZgogCiAJaWYgKGRpcnR5KSB7Ci0JCWt2bV92Y3B1X21hcmtfcGFn
ZV9kaXJ0eSh2Y3B1LCBtYXAtPmdmbik7CisJCW1hcmtfcGFnZV9kaXJ0eV9pbl9zbG90KG1lbXNs
b3QsIG1hcC0+Z2ZuKTsKIAkJa3ZtX3JlbGVhc2VfcGZuX2RpcnR5KG1hcC0+cGZuKTsKIAl9IGVs
c2UgewogCQlrdm1fcmVsZWFzZV9wZm5fY2xlYW4obWFwLT5wZm4pOwpAQCAtMTc3MSw2ICsxNzc4
LDE4IEBAIHZvaWQga3ZtX3ZjcHVfdW5tYXAoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qg
a3ZtX2hvc3RfbWFwICptYXAsCiAJbWFwLT5odmEgPSBOVUxMOwogCW1hcC0+cGFnZSA9IE5VTEw7
CiB9CisKK2ludCBrdm1fdW5tYXBfZ2ZuKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgc3RydWN0IGt2
bV9ob3N0X21hcCAqbWFwLCBib29sIGRpcnR5KQoreworCV9fa3ZtX3VubWFwX2dmbihnZm5fdG9f
bWVtc2xvdCh2Y3B1LT5rdm0sIG1hcC0+Z2ZuKSwgbWFwLCBkaXJ0eSk7CisJcmV0dXJuIDA7Cit9
CitFWFBPUlRfU1lNQk9MX0dQTChrdm1fdW5tYXBfZ2ZuKTsKKwordm9pZCBrdm1fdmNwdV91bm1h
cChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwgYm9vbCBk
aXJ0eSkKK3sKKwlfX2t2bV91bm1hcF9nZm4oa3ZtX3ZjcHVfZ2ZuX3RvX21lbXNsb3QodmNwdSwg
bWFwLT5nZm4pLCBtYXAsIGRpcnR5KTsKK30KIEVYUE9SVF9TWU1CT0xfR1BMKGt2bV92Y3B1X3Vu
bWFwKTsKIAogc3RydWN0IHBhZ2UgKmt2bV92Y3B1X2dmbl90b19wYWdlKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSwgZ2ZuX3QgZ2ZuKQoKRnJvbSBiYzA4OTc0NWE3MjgyNTRmMzY4ZTEzNWMxNDU1ZjZk
Y2ViN2NmMmYwIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBCb3JpcyBPc3Ryb3Zza3kg
PGJvcmlzLm9zdHJvdnNreUBvcmFjbGUuY29tPgpEYXRlOiBUaHUsIDUgRGVjIDIwMTkgMDE6MzA6
NTEgKzAwMDAKU3ViamVjdDogeDg2L2t2bTogQ2FjaGUgZ2ZuIHRvIHBmbiB0cmFuc2xhdGlvbgoK
Y29tbWl0IDkxNzI0ODE0NGRiNWQ3MzIwNjU1ZGJiNDFkM2FmMGI4YTBmM2Q1ODkgdXBzdHJlYW0u
CgpfX2t2bV9tYXBfZ2ZuKCkncyBjYWxsIHRvIGdmbl90b19wZm5fbWVtc2xvdCgpIGlzCiogcmVs
YXRpdmVseSBleHBlbnNpdmUKKiBpbiBjZXJ0YWluIGNhc2VzIChzdWNoIGFzIHdoZW4gZG9uZSBm
cm9tIGF0b21pYyBjb250ZXh0KSBjYW5ub3QgYmUgY2FsbGVkCgpTdGFzaGluZyBnZm4tdG8tcGZu
IG1hcHBpbmcgc2hvdWxkIGhlbHAgd2l0aCBib3RoIGNhc2VzLgoKVGhpcyBpcyBwYXJ0IG9mIENW
RS0yMDE5LTMwMTYuCgpTaWduZWQtb2ZmLWJ5OiBCb3JpcyBPc3Ryb3Zza3kgPGJvcmlzLm9zdHJv
dnNreUBvcmFjbGUuY29tPgpSZXZpZXdlZC1ieTogSm9hbyBNYXJ0aW5zIDxqb2FvLm0ubWFydGlu
c0BvcmFjbGUuY29tPgpTaWduZWQtb2ZmLWJ5OiBQYW9sbyBCb256aW5pIDxwYm9uemluaUByZWRo
YXQuY29tPgpTaWduZWQtb2ZmLWJ5OiBCZW4gSHV0Y2hpbmdzIDxiZW4uaHV0Y2hpbmdzQGNvZGV0
aGluay5jby51az4KLS0tCiBhcmNoL3g4Ni9pbmNsdWRlL2FzbS9rdm1faG9zdC5oIHwgIDEgKwog
YXJjaC94ODYva3ZtL3g4Ni5jICAgICAgICAgICAgICB8IDEwICsrKysKIGluY2x1ZGUvbGludXgv
a3ZtX2hvc3QuaCAgICAgICAgfCAgNyArKy0KIGluY2x1ZGUvbGludXgva3ZtX3R5cGVzLmggICAg
ICAgfCAgOSArKy0KIHZpcnQva3ZtL2t2bV9tYWluLmMgICAgICAgICAgICAgfCA5OCArKysrKysr
KysrKysrKysrKysrKysrKysrKy0tLS0tLS0KIDUgZmlsZXMgY2hhbmdlZCwgMTAzIGluc2VydGlv
bnMoKyksIDIyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gveDg2L2luY2x1ZGUvYXNt
L2t2bV9ob3N0LmggYi9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9rdm1faG9zdC5oCmluZGV4IDVjOTli
OWJmY2UwNC4uY2E5YzcxMTBiOTlkIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9pbmNsdWRlL2FzbS9r
dm1faG9zdC5oCisrKyBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmgKQEAgLTYyNiw2
ICs2MjYsNyBAQCBzdHJ1Y3Qga3ZtX3ZjcHVfYXJjaCB7CiAJCXU2NCBsYXN0X3N0ZWFsOwogCQlz
dHJ1Y3QgZ2ZuX3RvX2h2YV9jYWNoZSBzdGltZTsKIAkJc3RydWN0IGt2bV9zdGVhbF90aW1lIHN0
ZWFsOworCQlzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSBjYWNoZTsKIAl9IHN0OwogCiAJdTY0IHRz
Y19vZmZzZXQ7CmRpZmYgLS1naXQgYS9hcmNoL3g4Ni9rdm0veDg2LmMgYi9hcmNoL3g4Ni9rdm0v
eDg2LmMKaW5kZXggMWE2ZTFhYTJmYjI5Li42OTE2ZjQ2OTA5YWIgMTAwNjQ0Ci0tLSBhL2FyY2gv
eDg2L2t2bS94ODYuYworKysgYi9hcmNoL3g4Ni9rdm0veDg2LmMKQEAgLTg2MzQsNiArODYzNCw5
IEBAIHN0YXRpYyB2b2lkIGZ4X2luaXQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQogdm9pZCBrdm1f
YXJjaF92Y3B1X2ZyZWUoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQogewogCXZvaWQgKndiaW52ZF9k
aXJ0eV9tYXNrID0gdmNwdS0+YXJjaC53YmludmRfZGlydHlfbWFzazsKKwlzdHJ1Y3QgZ2ZuX3Rv
X3Bmbl9jYWNoZSAqY2FjaGUgPSAmdmNwdS0+YXJjaC5zdC5jYWNoZTsKKworCWt2bV9yZWxlYXNl
X3BmbihjYWNoZS0+cGZuLCBjYWNoZS0+ZGlydHksIGNhY2hlKTsKIAogCWt2bWNsb2NrX3Jlc2V0
KHZjcHUpOwogCkBAIC05Mjk4LDExICs5MzAxLDE4IEBAIGludCBrdm1fYXJjaF9jcmVhdGVfbWVt
c2xvdChzdHJ1Y3Qga3ZtICprdm0sIHN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QsCiAKIHZv
aWQga3ZtX2FyY2hfbWVtc2xvdHNfdXBkYXRlZChzdHJ1Y3Qga3ZtICprdm0sIHU2NCBnZW4pCiB7
CisJc3RydWN0IGt2bV92Y3B1ICp2Y3B1OworCWludCBpOworCiAJLyoKIAkgKiBtZW1zbG90cy0+
Z2VuZXJhdGlvbiBoYXMgYmVlbiBpbmNyZW1lbnRlZC4KIAkgKiBtbWlvIGdlbmVyYXRpb24gbWF5
IGhhdmUgcmVhY2hlZCBpdHMgbWF4aW11bSB2YWx1ZS4KIAkgKi8KIAlrdm1fbW11X2ludmFsaWRh
dGVfbW1pb19zcHRlcyhrdm0sIGdlbik7CisKKwkvKiBGb3JjZSByZS1pbml0aWFsaXphdGlvbiBv
ZiBzdGVhbF90aW1lIGNhY2hlICovCisJa3ZtX2Zvcl9lYWNoX3ZjcHUoaSwgdmNwdSwga3ZtKQor
CQlrdm1fdmNwdV9raWNrKHZjcHUpOwogfQogCiBpbnQga3ZtX2FyY2hfcHJlcGFyZV9tZW1vcnlf
cmVnaW9uKHN0cnVjdCBrdm0gKmt2bSwKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgva3ZtX2hv
c3QuaCBiL2luY2x1ZGUvbGludXgva3ZtX2hvc3QuaAppbmRleCAzMDNjMWE2OTE2Y2UuLmRhYmI2
MGY5MDcyNiAxMDA2NDQKLS0tIGEvaW5jbHVkZS9saW51eC9rdm1faG9zdC5oCisrKyBiL2luY2x1
ZGUvbGludXgva3ZtX2hvc3QuaApAQCAtNzA4LDYgKzcwOCw3IEBAIHZvaWQga3ZtX3NldF9wZm5f
ZGlydHkoa3ZtX3Bmbl90IHBmbik7CiB2b2lkIGt2bV9zZXRfcGZuX2FjY2Vzc2VkKGt2bV9wZm5f
dCBwZm4pOwogdm9pZCBrdm1fZ2V0X3Bmbihrdm1fcGZuX3QgcGZuKTsKIAordm9pZCBrdm1fcmVs
ZWFzZV9wZm4oa3ZtX3Bmbl90IHBmbiwgYm9vbCBkaXJ0eSwgc3RydWN0IGdmbl90b19wZm5fY2Fj
aGUgKmNhY2hlKTsKIGludCBrdm1fcmVhZF9ndWVzdF9wYWdlKHN0cnVjdCBrdm0gKmt2bSwgZ2Zu
X3QgZ2ZuLCB2b2lkICpkYXRhLCBpbnQgb2Zmc2V0LAogCQkJaW50IGxlbik7CiBpbnQga3ZtX3Jl
YWRfZ3Vlc3RfYXRvbWljKHN0cnVjdCBrdm0gKmt2bSwgZ3BhX3QgZ3BhLCB2b2lkICpkYXRhLApA
QCAtNzM4LDEwICs3MzksMTIgQEAgc3RydWN0IGt2bV9tZW1vcnlfc2xvdCAqa3ZtX3ZjcHVfZ2Zu
X3RvX21lbXNsb3Qoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4KIGt2bV9wZm5fdCBr
dm1fdmNwdV9nZm5fdG9fcGZuX2F0b21pYyhzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGdmbl90IGdm
bik7CiBrdm1fcGZuX3Qga3ZtX3ZjcHVfZ2ZuX3RvX3BmbihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUs
IGdmbl90IGdmbik7CiBpbnQga3ZtX3ZjcHVfbWFwKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ3Bh
X3QgZ3BhLCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXApOwotaW50IGt2bV9tYXBfZ2ZuKHN0cnVj
dCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuLCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXApOwor
aW50IGt2bV9tYXBfZ2ZuKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuLCBzdHJ1Y3Qg
a3ZtX2hvc3RfbWFwICptYXAsCisJCXN0cnVjdCBnZm5fdG9fcGZuX2NhY2hlICpjYWNoZSwgYm9v
bCBhdG9taWMpOwogc3RydWN0IHBhZ2UgKmt2bV92Y3B1X2dmbl90b19wYWdlKHN0cnVjdCBrdm1f
dmNwdSAqdmNwdSwgZ2ZuX3QgZ2ZuKTsKIHZvaWQga3ZtX3ZjcHVfdW5tYXAoc3RydWN0IGt2bV92
Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsIGJvb2wgZGlydHkpOwotaW50IGt2
bV91bm1hcF9nZm4oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICpt
YXAsIGJvb2wgZGlydHkpOworaW50IGt2bV91bm1hcF9nZm4oc3RydWN0IGt2bV92Y3B1ICp2Y3B1
LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsCisJCSAgc3RydWN0IGdmbl90b19wZm5fY2FjaGUg
KmNhY2hlLCBib29sIGRpcnR5LCBib29sIGF0b21pYyk7CiB1bnNpZ25lZCBsb25nIGt2bV92Y3B1
X2dmbl90b19odmEoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4pOwogdW5zaWduZWQg
bG9uZyBrdm1fdmNwdV9nZm5fdG9faHZhX3Byb3Qoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5f
dCBnZm4sIGJvb2wgKndyaXRhYmxlKTsKIGludCBrdm1fdmNwdV9yZWFkX2d1ZXN0X3BhZ2Uoc3Ry
dWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4sIHZvaWQgKmRhdGEsIGludCBvZmZzZXQsCmRp
ZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L2t2bV90eXBlcy5oIGIvaW5jbHVkZS9saW51eC9rdm1f
dHlwZXMuaAppbmRleCA4YmYyNTlkYWU5ZjYuLmEzODcyOWM4Mjk2ZiAxMDA2NDQKLS0tIGEvaW5j
bHVkZS9saW51eC9rdm1fdHlwZXMuaAorKysgYi9pbmNsdWRlL2xpbnV4L2t2bV90eXBlcy5oCkBA
IC0zMiw3ICszMiw3IEBAIHN0cnVjdCBrdm1fbWVtc2xvdHM7CiAKIGVudW0ga3ZtX21yX2NoYW5n
ZTsKIAotI2luY2x1ZGUgPGFzbS90eXBlcy5oPgorI2luY2x1ZGUgPGxpbnV4L3R5cGVzLmg+CiAK
IC8qCiAgKiBBZGRyZXNzIHR5cGVzOgpAQCAtNjMsNCArNjMsMTEgQEAgc3RydWN0IGdmbl90b19o
dmFfY2FjaGUgewogCXN0cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKm1lbXNsb3Q7CiB9OwogCitzdHJ1
Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSB7CisJdTY0IGdlbmVyYXRpb247CisJZ2ZuX3QgZ2ZuOworCWt2
bV9wZm5fdCBwZm47CisJYm9vbCBkaXJ0eTsKK307CisKICNlbmRpZiAvKiBfX0tWTV9UWVBFU19I
X18gKi8KZGlmZiAtLWdpdCBhL3ZpcnQva3ZtL2t2bV9tYWluLmMgYi92aXJ0L2t2bS9rdm1fbWFp
bi5jCmluZGV4IDhlMjliMmUwYmYyZS4uYWNhMTViZDFjYzRjIDEwMDY0NAotLS0gYS92aXJ0L2t2
bS9rdm1fbWFpbi5jCisrKyBiL3ZpcnQva3ZtL2t2bV9tYWluLmMKQEAgLTE3MDUsMjcgKzE3MDUs
NzIgQEAgc3RydWN0IHBhZ2UgKmdmbl90b19wYWdlKHN0cnVjdCBrdm0gKmt2bSwgZ2ZuX3QgZ2Zu
KQogfQogRVhQT1JUX1NZTUJPTF9HUEwoZ2ZuX3RvX3BhZ2UpOwogCit2b2lkIGt2bV9yZWxlYXNl
X3Bmbihrdm1fcGZuX3QgcGZuLCBib29sIGRpcnR5LCBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAq
Y2FjaGUpCit7CisJaWYgKHBmbiA9PSAwKQorCQlyZXR1cm47CisKKwlpZiAoY2FjaGUpCisJCWNh
Y2hlLT5wZm4gPSBjYWNoZS0+Z2ZuID0gMDsKKworCWlmIChkaXJ0eSkKKwkJa3ZtX3JlbGVhc2Vf
cGZuX2RpcnR5KHBmbik7CisJZWxzZQorCQlrdm1fcmVsZWFzZV9wZm5fY2xlYW4ocGZuKTsKK30K
Kworc3RhdGljIHZvaWQga3ZtX2NhY2hlX2dmbl90b19wZm4oc3RydWN0IGt2bV9tZW1vcnlfc2xv
dCAqc2xvdCwgZ2ZuX3QgZ2ZuLAorCQkJCSBzdHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAqY2FjaGUs
IHU2NCBnZW4pCit7CisJa3ZtX3JlbGVhc2VfcGZuKGNhY2hlLT5wZm4sIGNhY2hlLT5kaXJ0eSwg
Y2FjaGUpOworCisJY2FjaGUtPnBmbiA9IGdmbl90b19wZm5fbWVtc2xvdChzbG90LCBnZm4pOwor
CWNhY2hlLT5nZm4gPSBnZm47CisJY2FjaGUtPmRpcnR5ID0gZmFsc2U7CisJY2FjaGUtPmdlbmVy
YXRpb24gPSBnZW47Cit9CisKIHN0YXRpYyBpbnQgX19rdm1fbWFwX2dmbihzdHJ1Y3Qga3ZtX21l
bXNsb3RzICpzbG90cywgZ2ZuX3QgZ2ZuLAotCQkJIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCkK
KwkJCSBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsCisJCQkgc3RydWN0IGdmbl90b19wZm5fY2Fj
aGUgKmNhY2hlLAorCQkJIGJvb2wgYXRvbWljKQogewogCWt2bV9wZm5fdCBwZm47CiAJdm9pZCAq
aHZhID0gTlVMTDsKIAlzdHJ1Y3QgcGFnZSAqcGFnZSA9IEtWTV9VTk1BUFBFRF9QQUdFOwogCXN0
cnVjdCBrdm1fbWVtb3J5X3Nsb3QgKnNsb3QgPSBfX2dmbl90b19tZW1zbG90KHNsb3RzLCBnZm4p
OworCXU2NCBnZW4gPSBzbG90cy0+Z2VuZXJhdGlvbjsKIAogCWlmICghbWFwKQogCQlyZXR1cm4g
LUVJTlZBTDsKIAotCXBmbiA9IGdmbl90b19wZm5fbWVtc2xvdChzbG90LCBnZm4pOworCWlmIChj
YWNoZSkgeworCQlpZiAoIWNhY2hlLT5wZm4gfHwgY2FjaGUtPmdmbiAhPSBnZm4gfHwKKwkJCWNh
Y2hlLT5nZW5lcmF0aW9uICE9IGdlbikgeworCQkJaWYgKGF0b21pYykKKwkJCQlyZXR1cm4gLUVB
R0FJTjsKKwkJCWt2bV9jYWNoZV9nZm5fdG9fcGZuKHNsb3QsIGdmbiwgY2FjaGUsIGdlbik7CisJ
CX0KKwkJcGZuID0gY2FjaGUtPnBmbjsKKwl9IGVsc2UgeworCQlpZiAoYXRvbWljKQorCQkJcmV0
dXJuIC1FQUdBSU47CisJCXBmbiA9IGdmbl90b19wZm5fbWVtc2xvdChzbG90LCBnZm4pOworCX0K
IAlpZiAoaXNfZXJyb3Jfbm9zbG90X3BmbihwZm4pKQogCQlyZXR1cm4gLUVJTlZBTDsKIAogCWlm
IChwZm5fdmFsaWQocGZuKSkgewogCQlwYWdlID0gcGZuX3RvX3BhZ2UocGZuKTsKLQkJaHZhID0g
a21hcChwYWdlKTsKKwkJaWYgKGF0b21pYykKKwkJCWh2YSA9IGttYXBfYXRvbWljKHBhZ2UpOwor
CQllbHNlCisJCQlodmEgPSBrbWFwKHBhZ2UpOwogI2lmZGVmIENPTkZJR19IQVNfSU9NRU0KLQl9
IGVsc2UgeworCX0gZWxzZSBpZiAoIWF0b21pYykgewogCQlodmEgPSBtZW1yZW1hcChwZm5fdG9f
aHBhKHBmbiksIFBBR0VfU0laRSwgTUVNUkVNQVBfV0IpOworCX0gZWxzZSB7CisJCXJldHVybiAt
RUlOVkFMOwogI2VuZGlmCiAJfQogCkBAIC0xNzQwLDIwICsxNzg1LDI1IEBAIHN0YXRpYyBpbnQg
X19rdm1fbWFwX2dmbihzdHJ1Y3Qga3ZtX21lbXNsb3RzICpzbG90cywgZ2ZuX3QgZ2ZuLAogCXJl
dHVybiAwOwogfQogCi1pbnQga3ZtX21hcF9nZm4oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5f
dCBnZm4sIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCkKK2ludCBrdm1fbWFwX2dmbihzdHJ1Y3Qg
a3ZtX3ZjcHUgKnZjcHUsIGdmbl90IGdmbiwgc3RydWN0IGt2bV9ob3N0X21hcCAqbWFwLAorCQlz
dHJ1Y3QgZ2ZuX3RvX3Bmbl9jYWNoZSAqY2FjaGUsIGJvb2wgYXRvbWljKQogewotCXJldHVybiBf
X2t2bV9tYXBfZ2ZuKGt2bV9tZW1zbG90cyh2Y3B1LT5rdm0pLCBnZm4sIG1hcCk7CisJcmV0dXJu
IF9fa3ZtX21hcF9nZm4oa3ZtX21lbXNsb3RzKHZjcHUtPmt2bSksIGdmbiwgbWFwLAorCQkJY2Fj
aGUsIGF0b21pYyk7CiB9CiBFWFBPUlRfU1lNQk9MX0dQTChrdm1fbWFwX2dmbik7CiAKIGludCBr
dm1fdmNwdV9tYXAoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBnZm5fdCBnZm4sIHN0cnVjdCBrdm1f
aG9zdF9tYXAgKm1hcCkKIHsKLQlyZXR1cm4gX19rdm1fbWFwX2dmbihrdm1fdmNwdV9tZW1zbG90
cyh2Y3B1KSwgZ2ZuLCBtYXApOworCXJldHVybiBfX2t2bV9tYXBfZ2ZuKGt2bV92Y3B1X21lbXNs
b3RzKHZjcHUpLCBnZm4sIG1hcCwKKwkJTlVMTCwgZmFsc2UpOwogfQogRVhQT1JUX1NZTUJPTF9H
UEwoa3ZtX3ZjcHVfbWFwKTsKIAogc3RhdGljIHZvaWQgX19rdm1fdW5tYXBfZ2ZuKHN0cnVjdCBr
dm1fbWVtb3J5X3Nsb3QgKm1lbXNsb3QsCi0JCQlzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsIGJv
b2wgZGlydHkpCisJCQlzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsCisJCQlzdHJ1Y3QgZ2ZuX3Rv
X3Bmbl9jYWNoZSAqY2FjaGUsCisJCQlib29sIGRpcnR5LCBib29sIGF0b21pYykKIHsKIAlpZiAo
IW1hcCkKIAkJcmV0dXJuOwpAQCAtMTc2MSwzNCArMTgxMSw0NCBAQCBzdGF0aWMgdm9pZCBfX2t2
bV91bm1hcF9nZm4oc3RydWN0IGt2bV9tZW1vcnlfc2xvdCAqbWVtc2xvdCwKIAlpZiAoIW1hcC0+
aHZhKQogCQlyZXR1cm47CiAKLQlpZiAobWFwLT5wYWdlICE9IEtWTV9VTk1BUFBFRF9QQUdFKQot
CQlrdW5tYXAobWFwLT5wYWdlKTsKKwlpZiAobWFwLT5wYWdlICE9IEtWTV9VTk1BUFBFRF9QQUdF
KSB7CisJCWlmIChhdG9taWMpCisJCQlrdW5tYXBfYXRvbWljKG1hcC0+aHZhKTsKKwkJZWxzZQor
CQkJa3VubWFwKG1hcC0+cGFnZSk7CisJfQogI2lmZGVmIENPTkZJR19IQVNfSU9NRU0KLQllbHNl
CisJZWxzZSBpZiAoIWF0b21pYykKIAkJbWVtdW5tYXAobWFwLT5odmEpOworCWVsc2UKKwkJV0FS
Tl9PTkNFKDEsICJVbmV4cGVjdGVkIHVubWFwcGluZyBpbiBhdG9taWMgY29udGV4dCIpOwogI2Vu
ZGlmCiAKLQlpZiAoZGlydHkpIHsKKwlpZiAoZGlydHkpCiAJCW1hcmtfcGFnZV9kaXJ0eV9pbl9z
bG90KG1lbXNsb3QsIG1hcC0+Z2ZuKTsKLQkJa3ZtX3JlbGVhc2VfcGZuX2RpcnR5KG1hcC0+cGZu
KTsKLQl9IGVsc2UgewotCQlrdm1fcmVsZWFzZV9wZm5fY2xlYW4obWFwLT5wZm4pOwotCX0KKwor
CWlmIChjYWNoZSkKKwkJY2FjaGUtPmRpcnR5IHw9IGRpcnR5OworCWVsc2UKKwkJa3ZtX3JlbGVh
c2VfcGZuKG1hcC0+cGZuLCBkaXJ0eSwgTlVMTCk7CiAKIAltYXAtPmh2YSA9IE5VTEw7CiAJbWFw
LT5wYWdlID0gTlVMTDsKIH0KIAotaW50IGt2bV91bm1hcF9nZm4oc3RydWN0IGt2bV92Y3B1ICp2
Y3B1LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsIGJvb2wgZGlydHkpCitpbnQga3ZtX3VubWFw
X2dmbihzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIHN0cnVjdCBrdm1faG9zdF9tYXAgKm1hcCwgCisJ
CSAgc3RydWN0IGdmbl90b19wZm5fY2FjaGUgKmNhY2hlLCBib29sIGRpcnR5LCBib29sIGF0b21p
YykKIHsKLQlfX2t2bV91bm1hcF9nZm4oZ2ZuX3RvX21lbXNsb3QodmNwdS0+a3ZtLCBtYXAtPmdm
biksIG1hcCwgZGlydHkpOworCV9fa3ZtX3VubWFwX2dmbihnZm5fdG9fbWVtc2xvdCh2Y3B1LT5r
dm0sIG1hcC0+Z2ZuKSwgbWFwLAorCQkJY2FjaGUsIGRpcnR5LCBhdG9taWMpOwogCXJldHVybiAw
OwogfQogRVhQT1JUX1NZTUJPTF9HUEwoa3ZtX3VubWFwX2dmbik7CiAKIHZvaWQga3ZtX3ZjcHVf
dW5tYXAoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1Y3Qga3ZtX2hvc3RfbWFwICptYXAsIGJv
b2wgZGlydHkpCiB7Ci0JX19rdm1fdW5tYXBfZ2ZuKGt2bV92Y3B1X2dmbl90b19tZW1zbG90KHZj
cHUsIG1hcC0+Z2ZuKSwgbWFwLCBkaXJ0eSk7CisJX19rdm1fdW5tYXBfZ2ZuKGt2bV92Y3B1X2dm
bl90b19tZW1zbG90KHZjcHUsIG1hcC0+Z2ZuKSwgbWFwLCBOVUxMLAorCQkJZGlydHksIGZhbHNl
KTsKIH0KIEVYUE9SVF9TWU1CT0xfR1BMKGt2bV92Y3B1X3VubWFwKTsKIAoKRnJvbSBjZDY4ZGEx
MTRjM2M3YTQxYTkwZGRiNThhOWRmMTY3Y2MwODhiMzFmIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAw
MQpGcm9tOiBCb3JpcyBPc3Ryb3Zza3kgPGJvcmlzLm9zdHJvdnNreUBvcmFjbGUuY29tPgpEYXRl
OiBUaHUsIDUgRGVjIDIwMTkgMDM6NDU6MzIgKzAwMDAKU3ViamVjdDogeDg2L0tWTTogTWFrZSBz
dXJlIEtWTV9WQ1BVX0ZMVVNIX1RMQiBmbGFnIGlzIG5vdCBtaXNzZWQKCmNvbW1pdCBiMDQzMTM4
MjQ2YTQxMDY0NTI3Y2YwMTlhM2Q1MWQ5ZjAxNWU5Nzk2IHVwc3RyZWFtLgoKVGhlcmUgaXMgYSBw
b3RlbnRpYWwgcmFjZSBpbiByZWNvcmRfc3RlYWxfdGltZSgpIGJldHdlZW4gc2V0dGluZwpob3N0
LWxvY2FsIHZjcHUtPmFyY2guc3Quc3RlYWwucHJlZW1wdGVkIHRvIHplcm8gKGkuZS4gY2xlYXJp
bmcKS1ZNX1ZDUFVfUFJFRU1QVEVEKSBhbmQgcHJvcGFnYXRpbmcgdGhpcyB2YWx1ZSB0byB0aGUg
Z3Vlc3Qgd2l0aAprdm1fd3JpdGVfZ3Vlc3RfY2FjaGVkKCkuIEJldHdlZW4gdGhvc2UgdHdvIGV2
ZW50cyB0aGUgZ3Vlc3QgbWF5CnN0aWxsIHNlZSBLVk1fVkNQVV9QUkVFTVBURUQgaW4gaXRzIGNv
cHkgb2Yga3ZtX3N0ZWFsX3RpbWUsIHNldApLVk1fVkNQVV9GTFVTSF9UTEIgYW5kIGFzc3VtZSB0
aGF0IGh5cGVydmlzb3Igd2lsbCBkbyB0aGUgcmlnaHQKdGhpbmcuIFdoaWNoIGl0IHdvbid0LgoK
SW5zdGFkIG9mIGNvcHlpbmcsIHdlIHNob3VsZCBtYXAga3ZtX3N0ZWFsX3RpbWUgYW5kIHRoYXQg
d2lsbApndWFyYW50ZWUgYXRvbWljaXR5IG9mIGFjY2Vzc2VzIHRvIEBwcmVlbXB0ZWQuCgpUaGlz
IGlzIHBhcnQgb2YgQ1ZFLTIwMTktMzAxNi4KClNpZ25lZC1vZmYtYnk6IEJvcmlzIE9zdHJvdnNr
eSA8Ym9yaXMub3N0cm92c2t5QG9yYWNsZS5jb20+ClJldmlld2VkLWJ5OiBKb2FvIE1hcnRpbnMg
PGpvYW8ubS5tYXJ0aW5zQG9yYWNsZS5jb20+ClNpZ25lZC1vZmYtYnk6IFBhb2xvIEJvbnppbmkg
PHBib256aW5pQHJlZGhhdC5jb20+Cltid2g6IEJhY2twb3J0ZWQgdG8gNC4xOTogTm8gdHJhY2Vw
b2ludCBpbiByZWNvcmRfc3RlYWxfdGltZSgpLl0KU2lnbmVkLW9mZi1ieTogQmVuIEh1dGNoaW5n
cyA8YmVuLmh1dGNoaW5nc0Bjb2RldGhpbmsuY28udWs+Ci0tLQogYXJjaC94ODYva3ZtL3g4Ni5j
IHwgNDkgKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLS0tLS0tLS0tLS0tLS0tLQogMSBm
aWxlIGNoYW5nZWQsIDI5IGluc2VydGlvbnMoKyksIDIwIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdp
dCBhL2FyY2gveDg2L2t2bS94ODYuYyBiL2FyY2gveDg2L2t2bS94ODYuYwppbmRleCA2OTE2ZjQ2
OTA5YWIuLmQ3NzgyMmUwM2ZmNiAxMDA2NDQKLS0tIGEvYXJjaC94ODYva3ZtL3g4Ni5jCisrKyBi
L2FyY2gveDg2L2t2bS94ODYuYwpAQCAtMjM5Nyw0MyArMjM5Nyw0NSBAQCBzdGF0aWMgdm9pZCBr
dm1fdmNwdV9mbHVzaF90bGIoc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBib29sIGludmFsaWRhdGVf
Z3BhKQogCiBzdGF0aWMgdm9pZCByZWNvcmRfc3RlYWxfdGltZShzdHJ1Y3Qga3ZtX3ZjcHUgKnZj
cHUpCiB7CisJc3RydWN0IGt2bV9ob3N0X21hcCBtYXA7CisJc3RydWN0IGt2bV9zdGVhbF90aW1l
ICpzdDsKKwogCWlmICghKHZjcHUtPmFyY2guc3QubXNyX3ZhbCAmIEtWTV9NU1JfRU5BQkxFRCkp
CiAJCXJldHVybjsKIAotCWlmICh1bmxpa2VseShrdm1fcmVhZF9ndWVzdF9jYWNoZWQodmNwdS0+
a3ZtLCAmdmNwdS0+YXJjaC5zdC5zdGltZSwKLQkJJnZjcHUtPmFyY2guc3Quc3RlYWwsIHNpemVv
ZihzdHJ1Y3Qga3ZtX3N0ZWFsX3RpbWUpKSkpCisJLyogLUVBR0FJTiBpcyByZXR1cm5lZCBpbiBh
dG9taWMgY29udGV4dCBzbyB3ZSBjYW4ganVzdCByZXR1cm4uICovCisJaWYgKGt2bV9tYXBfZ2Zu
KHZjcHUsIHZjcHUtPmFyY2guc3QubXNyX3ZhbCA+PiBQQUdFX1NISUZULAorCQkJJm1hcCwgJnZj
cHUtPmFyY2guc3QuY2FjaGUsIGZhbHNlKSkKIAkJcmV0dXJuOwogCisJc3QgPSBtYXAuaHZhICsK
KwkJb2Zmc2V0X2luX3BhZ2UodmNwdS0+YXJjaC5zdC5tc3JfdmFsICYgS1ZNX1NURUFMX1ZBTElE
X0JJVFMpOworCiAJLyoKIAkgKiBEb2luZyBhIFRMQiBmbHVzaCBoZXJlLCBvbiB0aGUgZ3Vlc3Qn
cyBiZWhhbGYsIGNhbiBhdm9pZAogCSAqIGV4cGVuc2l2ZSBJUElzLgogCSAqLwotCWlmICh4Y2hn
KCZ2Y3B1LT5hcmNoLnN0LnN0ZWFsLnByZWVtcHRlZCwgMCkgJiBLVk1fVkNQVV9GTFVTSF9UTEIp
CisJaWYgKHhjaGcoJnN0LT5wcmVlbXB0ZWQsIDApICYgS1ZNX1ZDUFVfRkxVU0hfVExCKQogCQlr
dm1fdmNwdV9mbHVzaF90bGIodmNwdSwgZmFsc2UpOwogCi0JaWYgKHZjcHUtPmFyY2guc3Quc3Rl
YWwudmVyc2lvbiAmIDEpCi0JCXZjcHUtPmFyY2guc3Quc3RlYWwudmVyc2lvbiArPSAxOyAgLyog
Zmlyc3QgdGltZSB3cml0ZSwgcmFuZG9tIGp1bmsgKi8KKwl2Y3B1LT5hcmNoLnN0LnN0ZWFsLnBy
ZWVtcHRlZCA9IDA7CiAKLQl2Y3B1LT5hcmNoLnN0LnN0ZWFsLnZlcnNpb24gKz0gMTsKKwlpZiAo
c3QtPnZlcnNpb24gJiAxKQorCQlzdC0+dmVyc2lvbiArPSAxOyAgLyogZmlyc3QgdGltZSB3cml0
ZSwgcmFuZG9tIGp1bmsgKi8KIAotCWt2bV93cml0ZV9ndWVzdF9jYWNoZWQodmNwdS0+a3ZtLCAm
dmNwdS0+YXJjaC5zdC5zdGltZSwKLQkJJnZjcHUtPmFyY2guc3Quc3RlYWwsIHNpemVvZihzdHJ1
Y3Qga3ZtX3N0ZWFsX3RpbWUpKTsKKwlzdC0+dmVyc2lvbiArPSAxOwogCiAJc21wX3dtYigpOwog
Ci0JdmNwdS0+YXJjaC5zdC5zdGVhbC5zdGVhbCArPSBjdXJyZW50LT5zY2hlZF9pbmZvLnJ1bl9k
ZWxheSAtCisJc3QtPnN0ZWFsICs9IGN1cnJlbnQtPnNjaGVkX2luZm8ucnVuX2RlbGF5IC0KIAkJ
dmNwdS0+YXJjaC5zdC5sYXN0X3N0ZWFsOwogCXZjcHUtPmFyY2guc3QubGFzdF9zdGVhbCA9IGN1
cnJlbnQtPnNjaGVkX2luZm8ucnVuX2RlbGF5OwogCi0Ja3ZtX3dyaXRlX2d1ZXN0X2NhY2hlZCh2
Y3B1LT5rdm0sICZ2Y3B1LT5hcmNoLnN0LnN0aW1lLAotCQkmdmNwdS0+YXJjaC5zdC5zdGVhbCwg
c2l6ZW9mKHN0cnVjdCBrdm1fc3RlYWxfdGltZSkpOwotCiAJc21wX3dtYigpOwogCi0JdmNwdS0+
YXJjaC5zdC5zdGVhbC52ZXJzaW9uICs9IDE7CisJc3QtPnZlcnNpb24gKz0gMTsKIAotCWt2bV93
cml0ZV9ndWVzdF9jYWNoZWQodmNwdS0+a3ZtLCAmdmNwdS0+YXJjaC5zdC5zdGltZSwKLQkJJnZj
cHUtPmFyY2guc3Quc3RlYWwsIHNpemVvZihzdHJ1Y3Qga3ZtX3N0ZWFsX3RpbWUpKTsKKwlrdm1f
dW5tYXBfZ2ZuKHZjcHUsICZtYXAsICZ2Y3B1LT5hcmNoLnN0LmNhY2hlLCB0cnVlLCBmYWxzZSk7
CiB9CiAKIGludCBrdm1fc2V0X21zcl9jb21tb24oc3RydWN0IGt2bV92Y3B1ICp2Y3B1LCBzdHJ1
Y3QgbXNyX2RhdGEgKm1zcl9pbmZvKQpAQCAtMzI3MiwxOCArMzI3NCwyNSBAQCB2b2lkIGt2bV9h
cmNoX3ZjcHVfbG9hZChzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUsIGludCBjcHUpCiAKIHN0YXRpYyB2
b2lkIGt2bV9zdGVhbF90aW1lX3NldF9wcmVlbXB0ZWQoc3RydWN0IGt2bV92Y3B1ICp2Y3B1KQog
eworCXN0cnVjdCBrdm1faG9zdF9tYXAgbWFwOworCXN0cnVjdCBrdm1fc3RlYWxfdGltZSAqc3Q7
CisKIAlpZiAoISh2Y3B1LT5hcmNoLnN0Lm1zcl92YWwgJiBLVk1fTVNSX0VOQUJMRUQpKQogCQly
ZXR1cm47CiAKIAlpZiAodmNwdS0+YXJjaC5zdC5zdGVhbC5wcmVlbXB0ZWQpCiAJCXJldHVybjsK
IAotCXZjcHUtPmFyY2guc3Quc3RlYWwucHJlZW1wdGVkID0gS1ZNX1ZDUFVfUFJFRU1QVEVEOwor
CWlmIChrdm1fbWFwX2dmbih2Y3B1LCB2Y3B1LT5hcmNoLnN0Lm1zcl92YWwgPj4gUEFHRV9TSElG
VCwgJm1hcCwKKwkJCSZ2Y3B1LT5hcmNoLnN0LmNhY2hlLCB0cnVlKSkKKwkJcmV0dXJuOworCisJ
c3QgPSBtYXAuaHZhICsKKwkJb2Zmc2V0X2luX3BhZ2UodmNwdS0+YXJjaC5zdC5tc3JfdmFsICYg
S1ZNX1NURUFMX1ZBTElEX0JJVFMpOworCisJc3QtPnByZWVtcHRlZCA9IHZjcHUtPmFyY2guc3Qu
c3RlYWwucHJlZW1wdGVkID0gS1ZNX1ZDUFVfUFJFRU1QVEVEOwogCi0Ja3ZtX3dyaXRlX2d1ZXN0
X29mZnNldF9jYWNoZWQodmNwdS0+a3ZtLCAmdmNwdS0+YXJjaC5zdC5zdGltZSwKLQkJCSZ2Y3B1
LT5hcmNoLnN0LnN0ZWFsLnByZWVtcHRlZCwKLQkJCW9mZnNldG9mKHN0cnVjdCBrdm1fc3RlYWxf
dGltZSwgcHJlZW1wdGVkKSwKLQkJCXNpemVvZih2Y3B1LT5hcmNoLnN0LnN0ZWFsLnByZWVtcHRl
ZCkpOworCWt2bV91bm1hcF9nZm4odmNwdSwgJm1hcCwgJnZjcHUtPmFyY2guc3QuY2FjaGUsIHRy
dWUsIHRydWUpOwogfQogCiB2b2lkIGt2bV9hcmNoX3ZjcHVfcHV0KHN0cnVjdCBrdm1fdmNwdSAq
dmNwdSkKCkZyb20gN2UzOTZlNTA5Y2UyYjAzZGE5NDA0Nzg2MTYyMDE4MWYyZWM0MGFkMyBNb24g
U2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogQm9yaXMgT3N0cm92c2t5IDxib3Jpcy5vc3Ryb3Zz
a3lAb3JhY2xlLmNvbT4KRGF0ZTogRnJpLCA2IERlYyAyMDE5IDE1OjM2OjEyICswMDAwClN1Ympl
Y3Q6IHg4Ni9LVk06IENsZWFuIHVwIGhvc3QncyBzdGVhbCB0aW1lIHN0cnVjdHVyZQoKY29tbWl0
IGE2YmQ4MTFmMTIwOWZlMWM2NGM5ZjZmZDU3ODEwMWQ2NDM2YzZiNmUgdXBzdHJlYW0uCgpOb3cg
dGhhdCB3ZSBhcmUgbWFwcGluZyBrdm1fc3RlYWxfdGltZSBmcm9tIHRoZSBndWVzdCBkaXJlY3Rs
eSB3ZQpkb24ndCBuZWVkIGtlZXAgYSBjb3B5IG9mIGl0IGluIGt2bV92Y3B1X2FyY2guc3QuIFRo
ZSBzYW1lIGlzIHRydWUKZm9yIHRoZSBzdGltZSBmaWVsZC4KClRoaXMgaXMgcGFydCBvZiBDVkUt
MjAxOS0zMDE2LgoKU2lnbmVkLW9mZi1ieTogQm9yaXMgT3N0cm92c2t5IDxib3Jpcy5vc3Ryb3Zz
a3lAb3JhY2xlLmNvbT4KUmV2aWV3ZWQtYnk6IEpvYW8gTWFydGlucyA8am9hby5tLm1hcnRpbnNA
b3JhY2xlLmNvbT4KU2lnbmVkLW9mZi1ieTogUGFvbG8gQm9uemluaSA8cGJvbnppbmlAcmVkaGF0
LmNvbT4KU2lnbmVkLW9mZi1ieTogQmVuIEh1dGNoaW5ncyA8YmVuLmh1dGNoaW5nc0Bjb2RldGhp
bmsuY28udWs+Ci0tLQogYXJjaC94ODYvaW5jbHVkZS9hc20va3ZtX2hvc3QuaCB8ICAzICstLQog
YXJjaC94ODYva3ZtL3g4Ni5jICAgICAgICAgICAgICB8IDExICsrKy0tLS0tLS0tCiAyIGZpbGVz
IGNoYW5nZWQsIDQgaW5zZXJ0aW9ucygrKSwgMTAgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEv
YXJjaC94ODYvaW5jbHVkZS9hc20va3ZtX2hvc3QuaCBiL2FyY2gveDg2L2luY2x1ZGUvYXNtL2t2
bV9ob3N0LmgKaW5kZXggY2E5YzcxMTBiOTlkLi4zMzEzNjM5NWRiOGYgMTAwNjQ0Ci0tLSBhL2Fy
Y2gveDg2L2luY2x1ZGUvYXNtL2t2bV9ob3N0LmgKKysrIGIvYXJjaC94ODYvaW5jbHVkZS9hc20v
a3ZtX2hvc3QuaApAQCAtNjIyLDEwICs2MjIsOSBAQCBzdHJ1Y3Qga3ZtX3ZjcHVfYXJjaCB7CiAJ
Ym9vbCBwdmNsb2NrX3NldF9ndWVzdF9zdG9wcGVkX3JlcXVlc3Q7CiAKIAlzdHJ1Y3QgeworCQl1
OCBwcmVlbXB0ZWQ7CiAJCXU2NCBtc3JfdmFsOwogCQl1NjQgbGFzdF9zdGVhbDsKLQkJc3RydWN0
IGdmbl90b19odmFfY2FjaGUgc3RpbWU7Ci0JCXN0cnVjdCBrdm1fc3RlYWxfdGltZSBzdGVhbDsK
IAkJc3RydWN0IGdmbl90b19wZm5fY2FjaGUgY2FjaGU7CiAJfSBzdDsKIApkaWZmIC0tZ2l0IGEv
YXJjaC94ODYva3ZtL3g4Ni5jIGIvYXJjaC94ODYva3ZtL3g4Ni5jCmluZGV4IGQ3NzgyMmUwM2Zm
Ni4uNmJmYzllYWY4ZGVlIDEwMDY0NAotLS0gYS9hcmNoL3g4Ni9rdm0veDg2LmMKKysrIGIvYXJj
aC94ODYva3ZtL3g4Ni5jCkBAIC0yNDE4LDcgKzI0MTgsNyBAQCBzdGF0aWMgdm9pZCByZWNvcmRf
c3RlYWxfdGltZShzdHJ1Y3Qga3ZtX3ZjcHUgKnZjcHUpCiAJaWYgKHhjaGcoJnN0LT5wcmVlbXB0
ZWQsIDApICYgS1ZNX1ZDUFVfRkxVU0hfVExCKQogCQlrdm1fdmNwdV9mbHVzaF90bGIodmNwdSwg
ZmFsc2UpOwogCi0JdmNwdS0+YXJjaC5zdC5zdGVhbC5wcmVlbXB0ZWQgPSAwOworCXZjcHUtPmFy
Y2guc3QucHJlZW1wdGVkID0gMDsKIAogCWlmIChzdC0+dmVyc2lvbiAmIDEpCiAJCXN0LT52ZXJz
aW9uICs9IDE7ICAvKiBmaXJzdCB0aW1lIHdyaXRlLCByYW5kb20ganVuayAqLwpAQCAtMjU3Nywx
MSArMjU3Nyw2IEBAIGludCBrdm1fc2V0X21zcl9jb21tb24oc3RydWN0IGt2bV92Y3B1ICp2Y3B1
LCBzdHJ1Y3QgbXNyX2RhdGEgKm1zcl9pbmZvKQogCQlpZiAoZGF0YSAmIEtWTV9TVEVBTF9SRVNF
UlZFRF9NQVNLKQogCQkJcmV0dXJuIDE7CiAKLQkJaWYgKGt2bV9nZm5fdG9faHZhX2NhY2hlX2lu
aXQodmNwdS0+a3ZtLCAmdmNwdS0+YXJjaC5zdC5zdGltZSwKLQkJCQkJCWRhdGEgJiBLVk1fU1RF
QUxfVkFMSURfQklUUywKLQkJCQkJCXNpemVvZihzdHJ1Y3Qga3ZtX3N0ZWFsX3RpbWUpKSkKLQkJ
CXJldHVybiAxOwotCiAJCXZjcHUtPmFyY2guc3QubXNyX3ZhbCA9IGRhdGE7CiAKIAkJaWYgKCEo
ZGF0YSAmIEtWTV9NU1JfRU5BQkxFRCkpCkBAIC0zMjgwLDcgKzMyNzUsNyBAQCBzdGF0aWMgdm9p
ZCBrdm1fc3RlYWxfdGltZV9zZXRfcHJlZW1wdGVkKHN0cnVjdCBrdm1fdmNwdSAqdmNwdSkKIAlp
ZiAoISh2Y3B1LT5hcmNoLnN0Lm1zcl92YWwgJiBLVk1fTVNSX0VOQUJMRUQpKQogCQlyZXR1cm47
CiAKLQlpZiAodmNwdS0+YXJjaC5zdC5zdGVhbC5wcmVlbXB0ZWQpCisJaWYgKHZjcHUtPmFyY2gu
c3QucHJlZW1wdGVkKQogCQlyZXR1cm47CiAKIAlpZiAoa3ZtX21hcF9nZm4odmNwdSwgdmNwdS0+
YXJjaC5zdC5tc3JfdmFsID4+IFBBR0VfU0hJRlQsICZtYXAsCkBAIC0zMjkwLDcgKzMyODUsNyBA
QCBzdGF0aWMgdm9pZCBrdm1fc3RlYWxfdGltZV9zZXRfcHJlZW1wdGVkKHN0cnVjdCBrdm1fdmNw
dSAqdmNwdSkKIAlzdCA9IG1hcC5odmEgKwogCQlvZmZzZXRfaW5fcGFnZSh2Y3B1LT5hcmNoLnN0
Lm1zcl92YWwgJiBLVk1fU1RFQUxfVkFMSURfQklUUyk7CiAKLQlzdC0+cHJlZW1wdGVkID0gdmNw
dS0+YXJjaC5zdC5zdGVhbC5wcmVlbXB0ZWQgPSBLVk1fVkNQVV9QUkVFTVBURUQ7CisJc3QtPnBy
ZWVtcHRlZCA9IHZjcHUtPmFyY2guc3QucHJlZW1wdGVkID0gS1ZNX1ZDUFVfUFJFRU1QVEVEOwog
CiAJa3ZtX3VubWFwX2dmbih2Y3B1LCAmbWFwLCAmdmNwdS0+YXJjaC5zdC5jYWNoZSwgdHJ1ZSwg
dHJ1ZSk7CiB9Cg==


--=-hRTESwtA1DCK6EOjpYZX--

