Return-Path: <stable-owner@vger.kernel.org>
X-Original-To: lists+stable@lfdr.de
Delivered-To: lists+stable@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 5BA766E47DF
	for <lists+stable@lfdr.de>; Mon, 17 Apr 2023 14:35:56 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229745AbjDQMfy (ORCPT <rfc822;lists+stable@lfdr.de>);
        Mon, 17 Apr 2023 08:35:54 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:56242 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229574AbjDQMfy (ORCPT
        <rfc822;stable@vger.kernel.org>); Mon, 17 Apr 2023 08:35:54 -0400
Received: from dfw.source.kernel.org (dfw.source.kernel.org [IPv6:2604:1380:4641:c500::1])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id E0C08C3;
        Mon, 17 Apr 2023 05:35:52 -0700 (PDT)
Received: from smtp.kernel.org (relay.kernel.org [52.25.139.140])
        (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
        (No client certificate requested)
        by dfw.source.kernel.org (Postfix) with ESMTPS id 7F53F6235E;
        Mon, 17 Apr 2023 12:35:52 +0000 (UTC)
Received: by smtp.kernel.org (Postfix) with ESMTPSA id DC353C433D2;
        Mon, 17 Apr 2023 12:35:51 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
        s=k20201202; t=1681734951;
        bh=6UXgo+VUKr4Q5O8Hy6t/zQ8QpSNaPZ2EAGJ/i9IICf0=;
        h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
        b=FdNW6CfnyxPyjxXXaZruUZDJNBhsoq+8Meh1VglBN4oyIousieo0IzJLaIoHvHgSv
         e+9cCYyGm0Sj7526x9L0i6DwZvlYFSHZtnMBAlWiueRmz1Sa1YJjb3BU7Wrc/9+5Ad
         Ogb/CkOnLpO0CqX1flslD3v4CpgXFtDLyaglwIpXpLINiAk3XK3aHk/lGgYlzI1c6P
         ukWd496kcUnB+bCUSqUl00kVKEX+gzg6/s3Ce0+chljj91kLZTNVfD08/h7f7w4UZl
         W7QWWRRS7jz5YZbFAHI5+6BK0B1p2Ab5+M5MZx74SoeVfU+jVSarR1ObnRbOFcMTO5
         AILePj3gUBKiA==
Received: from sofa.misterjones.org ([185.219.108.64] helo=goblin-girl.misterjones.org)
        by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        (Exim 4.95)
        (envelope-from <maz@kernel.org>)
        id 1poO5F-0090sd-KL;
        Mon, 17 Apr 2023 13:35:49 +0100
Date:   Mon, 17 Apr 2023 13:35:49 +0100
Message-ID: <86bkjmlm8q.wl-maz@kernel.org>
From:   Marc Zyngier <maz@kernel.org>
To:     Will Deacon <will@kernel.org>
Cc:     kvmarm@lists.linux.dev, kvm@vger.kernel.org,
        linux-arm-kernel@lists.infradead.org,
        James Morse <james.morse@arm.com>,
        Suzuki K Poulose <suzuki.poulose@arm.com>,
        Oliver Upton <oliver.upton@linux.dev>,
        Zenghui Yu <yuzenghui@huawei.com>,
        Catalin Marinas <catalin.marinas@arm.com>,
        Quentin Perret <qperret@google.com>,
        Mostafa Saleh <smostafa@google.com>, stable@vger.kernel.org
Subject: Re: [PATCH] KVM: arm64: Make vcpu flag updates non-preemptible
In-Reply-To: <20230417114025.GA30826@willie-the-truck>
References: <20230417093629.1440039-1-maz@kernel.org>
        <20230417114025.GA30826@willie-the-truck>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/28.2
 (aarch64-unknown-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 185.219.108.64
X-SA-Exim-Rcpt-To: will@kernel.org, kvmarm@lists.linux.dev, kvm@vger.kernel.org, linux-arm-kernel@lists.infradead.org, james.morse@arm.com, suzuki.poulose@arm.com, oliver.upton@linux.dev, yuzenghui@huawei.com, catalin.marinas@arm.com, qperret@google.com, smostafa@google.com, stable@vger.kernel.org
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false
X-Spam-Status: No, score=-4.4 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_MED,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <stable.vger.kernel.org>
X-Mailing-List: stable@vger.kernel.org

On Mon, 17 Apr 2023 12:40:26 +0100,
Will Deacon <will@kernel.org> wrote:
> 
> On Mon, Apr 17, 2023 at 10:36:29AM +0100, Marc Zyngier wrote:
> > Per-vcpu flags are updated using a non-atomic RMW operation.
> > Which means it is possible to get preempted between the read and
> > write operations.
> > 
> > Another interesting thing to note is that preemption also updates
> > flags, as we have some flag manipulation in both the load and put
> > operations.
> > 
> > It is thus possible to lose information communicated by either
> > load or put, as the preempted flag update will overwrite the flags
> > when the thread is resumed. This is specially critical if either
> > load or put has stored information which depends on the physical
> > CPU the vcpu runs on.
> > 
> > This results in really elusive bugs, and kudos must be given to
> > Mostafa for the long hours of debugging, and finally spotting
> > the problem.
> > 
> > Fixes: e87abb73e594 ("KVM: arm64: Add helpers to manipulate vcpu flags among a set")
> > Reported-by: Mostafa Saleh <smostafa@google.com>
> > Signed-off-by: Marc Zyngier <maz@kernel.org>
> > Cc: stable@vger.kernel.org
> > ---
> >  arch/arm64/include/asm/kvm_host.h | 17 +++++++++++++++++
> >  1 file changed, 17 insertions(+)
> > 
> > diff --git a/arch/arm64/include/asm/kvm_host.h b/arch/arm64/include/asm/kvm_host.h
> > index bcd774d74f34..d716cfd806e8 100644
> > --- a/arch/arm64/include/asm/kvm_host.h
> > +++ b/arch/arm64/include/asm/kvm_host.h
> > @@ -579,6 +579,19 @@ struct kvm_vcpu_arch {
> >  		v->arch.flagset & (m);				\
> >  	})
> >  
> > +/*
> > + * Note that the set/clear accessors must be preempt-safe in order to
> > + * avoid nesting them with load/put which also manipulate flags...
> > + */
> > +#ifdef __KVM_NVHE_HYPERVISOR__
> > +/* the nVHE hypervisor is always non-preemptible */
> > +#define __vcpu_flags_preempt_disable()
> > +#define __vcpu_flags_preempt_enable()
> > +#else
> > +#define __vcpu_flags_preempt_disable()	preempt_disable()
> > +#define __vcpu_flags_preempt_enable()	preempt_enable()
> > +#endif
> 
> If it makes things cleaner, we could define local (empty) copies of these
> preempt_*() macros at EL2 to save you having to wrap them here. Up to you.

Nah, that's fine. This is subtle enough stuff that I'm happy to see it
all exposed in the same location.

> >  #define __vcpu_set_flag(v, flagset, f, m)			\
> >  	do {							\
> >  		typeof(v->arch.flagset) *fset;			\
> > @@ -586,9 +599,11 @@ struct kvm_vcpu_arch {
> >  		__build_check_flag(v, flagset, f, m);		\
> >  								\
> >  		fset = &v->arch.flagset;			\
> > +		__vcpu_flags_preempt_disable();			\
> >  		if (HWEIGHT(m) > 1)				\
> >  			*fset &= ~(m);				\
> >  		*fset |= (f);					\
> > +		__vcpu_flags_preempt_enable();			\
> >  	} while (0)
> >  
> >  #define __vcpu_clear_flag(v, flagset, f, m)			\
> > @@ -598,7 +613,9 @@ struct kvm_vcpu_arch {
> >  		__build_check_flag(v, flagset, f, m);		\
> >  								\
> >  		fset = &v->arch.flagset;			\
> > +		__vcpu_flags_preempt_disable();			\
> >  		*fset &= ~(m);					\
> > +		__vcpu_flags_preempt_enable();			\
> >  	} while (0)
> >  
> >  #define vcpu_get_flag(v, ...)	__vcpu_get_flag((v), __VA_ARGS__)
> 
> Given that __vcpu_get_flag() is still preemptible, we should probably
> add a READ_ONCE() in there when we access the relevant flags field. In
> practice, they're all single-byte fields so it should be ok, but I think
> the READ_ONCE() is still worthwhile.

Yup, good point. People are already talking about expanding some of
the fields for $REASON, so they may become larger than a single byte.
And READ_ONCE() makes it clear that there is some level of atomicity
required here as well.

I'll respin this shortly.

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.
